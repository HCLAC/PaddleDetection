(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-baidu/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 2));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArrayLimit(arr, i) {if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(n);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}

var _toString = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

function isFn(fn) {
  return typeof fn === 'function';
}

function isStr(str) {
  return typeof str === 'string';
}

function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}

function noop() {}

/**
                    * Create a cached version of a pure function.
                    */
function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}

/**
   * Camelize a hyphen-delimited string.
   */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});
});

var HOOKS = [
'invoke',
'success',
'fail',
'complete',
'returnValue'];


var globalInterceptors = {};
var scopedInterceptors = {};

function mergeHook(parentVal, childVal) {
  var res = childVal ?
  parentVal ?
  parentVal.concat(childVal) :
  Array.isArray(childVal) ?
  childVal : [childVal] :
  parentVal;
  return res ?
  dedupeHooks(res) :
  res;
}

function dedupeHooks(hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res;
}

function removeHook(hooks, hook) {
  var index = hooks.indexOf(hook);
  if (index !== -1) {
    hooks.splice(index, 1);
  }
}

function mergeInterceptorHook(interceptor, option) {
  Object.keys(option).forEach(function (hook) {
    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {
      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);
    }
  });
}

function removeInterceptorHook(interceptor, option) {
  if (!interceptor || !option) {
    return;
  }
  Object.keys(option).forEach(function (hook) {
    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {
      removeHook(interceptor[hook], option[hook]);
    }
  });
}

function addInterceptor(method, option) {
  if (typeof method === 'string' && isPlainObject(option)) {
    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);
  } else if (isPlainObject(method)) {
    mergeInterceptorHook(globalInterceptors, method);
  }
}

function removeInterceptor(method, option) {
  if (typeof method === 'string') {
    if (isPlainObject(option)) {
      removeInterceptorHook(scopedInterceptors[method], option);
    } else {
      delete scopedInterceptors[method];
    }
  } else if (isPlainObject(method)) {
    removeInterceptorHook(globalInterceptors, method);
  }
}

function wrapperHook(hook) {
  return function (data) {
    return hook(data) || data;
  };
}

function isPromise(obj) {
  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
}

function queue(hooks, data) {
  var promise = false;
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    if (promise) {
      promise = Promise.then(wrapperHook(hook));
    } else {
      var res = hook(data);
      if (isPromise(res)) {
        promise = Promise.resolve(res);
      }
      if (res === false) {
        return {
          then: function then() {} };

      }
    }
  }
  return promise || {
    then: function then(callback) {
      return callback(data);
    } };

}

function wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  ['success', 'fail', 'complete'].forEach(function (name) {
    if (Array.isArray(interceptor[name])) {
      var oldCallback = options[name];
      options[name] = function callbackInterceptor(res) {
        queue(interceptor[name], res).then(function (res) {
          /* eslint-disable no-mixed-operators */
          return isFn(oldCallback) && oldCallback(res) || res;
        });
      };
    }
  });
  return options;
}

function wrapperReturnValue(method, returnValue) {
  var returnValueHooks = [];
  if (Array.isArray(globalInterceptors.returnValue)) {
    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));
  }
  var interceptor = scopedInterceptors[method];
  if (interceptor && Array.isArray(interceptor.returnValue)) {
    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));
  }
  returnValueHooks.forEach(function (hook) {
    returnValue = hook(returnValue) || returnValue;
  });
  return returnValue;
}

function getApiInterceptorHooks(method) {
  var interceptor = Object.create(null);
  Object.keys(globalInterceptors).forEach(function (hook) {
    if (hook !== 'returnValue') {
      interceptor[hook] = globalInterceptors[hook].slice();
    }
  });
  var scopedInterceptor = scopedInterceptors[method];
  if (scopedInterceptor) {
    Object.keys(scopedInterceptor).forEach(function (hook) {
      if (hook !== 'returnValue') {
        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);
      }
    });
  }
  return interceptor;
}

function invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}
  var interceptor = getApiInterceptorHooks(method);
  if (interceptor && Object.keys(interceptor).length) {
    if (Array.isArray(interceptor.invoke)) {
      var res = queue(interceptor.invoke, options);
      return res.then(function (options) {
        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));
      });
    } else {
      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));
    }
  }
  return api.apply(void 0, [options].concat(params));
}

var promiseInterceptor = {
  returnValue: function returnValue(res) {
    if (!isPromise(res)) {
      return res;
    }
    return res.then(function (res) {
      return res[1];
    }).catch(function (res) {
      return res[0];
    });
  } };


var SYNC_API_RE =
/^\$|sendNativeEvent|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;

var CONTEXT_API_RE = /^create|Manager$/;

// Context例外情况
var CONTEXT_API_RE_EXC = ['createBLEConnection'];

// 同步例外情况
var ASYNC_API = ['createBLEConnection'];

var CALLBACK_API_RE = /^on|^off/;

function isContextApi(name) {
  return CONTEXT_API_RE.test(name) && CONTEXT_API_RE_EXC.indexOf(name) === -1;
}
function isSyncApi(name) {
  return SYNC_API_RE.test(name) && ASYNC_API.indexOf(name) === -1;
}

function isCallbackApi(name) {
  return CALLBACK_API_RE.test(name) && name !== 'onPush';
}

function handlePromise(promise) {
  return promise.then(function (data) {
    return [null, data];
  }).
  catch(function (err) {return [err];});
}

function shouldPromise(name) {
  if (
  isContextApi(name) ||
  isSyncApi(name) ||
  isCallbackApi(name))
  {
    return false;
  }
  return true;
}

/* eslint-disable no-extend-native */
if (!Promise.prototype.finally) {
  Promise.prototype.finally = function (callback) {
    var promise = this.constructor;
    return this.then(
    function (value) {return promise.resolve(callback()).then(function () {return value;});},
    function (reason) {return promise.resolve(callback()).then(function () {
        throw reason;
      });});

  };
}

function promisify(name, api) {
  if (!shouldPromise(name)) {
    return api;
  }
  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}
    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {
      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));
    }
    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {
      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {
        success: resolve,
        fail: reject })].concat(
      params));
    })));
  };
}

var EPS = 1e-4;
var BASE_DEVICE_WIDTH = 750;
var isIOS = false;
var deviceWidth = 0;
var deviceDPR = 0;

function checkDeviceWidth() {var _swan$getSystemInfoSy =




  swan.getSystemInfoSync(),platform = _swan$getSystemInfoSy.platform,pixelRatio = _swan$getSystemInfoSy.pixelRatio,windowWidth = _swan$getSystemInfoSy.windowWidth; // uni=>swan runtime 编译目标是 uni 对象，内部不允许直接使用 uni

  deviceWidth = windowWidth;
  deviceDPR = pixelRatio;
  isIOS = platform === 'ios';
}

function upx2px(number, newDeviceWidth) {
  if (deviceWidth === 0) {
    checkDeviceWidth();
  }

  number = Number(number);
  if (number === 0) {
    return 0;
  }
  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);
  if (result < 0) {
    result = -result;
  }
  result = Math.floor(result + EPS);
  if (result === 0) {
    if (deviceDPR === 1 || !isIOS) {
      return 1;
    } else {
      return 0.5;
    }
  }
  return number < 0 ? -result : result;
}

var interceptors = {
  promiseInterceptor: promiseInterceptor };


var baseApi = /*#__PURE__*/Object.freeze({
  __proto__: null,
  upx2px: upx2px,
  addInterceptor: addInterceptor,
  removeInterceptor: removeInterceptor,
  interceptors: interceptors });


var previewImage = {
  args: function args(fromArgs) {
    var currentIndex = parseInt(fromArgs.current);
    if (isNaN(currentIndex)) {
      return;
    }
    var urls = fromArgs.urls;
    if (!Array.isArray(urls)) {
      return;
    }
    var len = urls.length;
    if (!len) {
      return;
    }
    if (currentIndex < 0) {
      currentIndex = 0;
    } else if (currentIndex >= len) {
      currentIndex = len - 1;
    }
    if (currentIndex > 0) {
      fromArgs.current = urls[currentIndex];
      fromArgs.urls = urls.filter(
      function (item, index) {return index < currentIndex ? item !== urls[currentIndex] : true;});

    } else {
      fromArgs.current = urls[0];
    }
    return {
      indicator: false,
      loop: false };

  } };


// 不支持的 API 列表
var todos = [
  // 'hideKeyboard',
  // 'onGyroscopeChange',
  // 'startGyroscope',
  // 'stopGyroscope',
  // 'openBluetoothAdapter',
  // 'startBluetoothDevicesDiscovery',
  // 'onBluetoothDeviceFound',
  // 'stopBluetoothDevicesDiscovery',
  // 'onBluetoothAdapterStateChange',
  // 'getConnectedBluetoothDevices',
  // 'getBluetoothDevices',
  // 'getBluetoothAdapterState',
  // 'closeBluetoothAdapter',
  // 'writeBLECharacteristicValue',
  // 'readBLECharacteristicValue',
  // 'onBLEConnectionStateChange',
  // 'onBLECharacteristicValueChange',
  // 'notifyBLECharacteristicValueChange',
  // 'getBLEDeviceServices',
  // 'getBLEDeviceCharacteristics',
  // 'createBLEConnection',
  // 'closeBLEConnection',
  // 'onBeaconServiceChange',
  // 'onBeaconUpdate',
  // 'getBeacons',
  // 'startBeaconDiscovery',
  // 'stopBeaconDiscovery',
  // 'hideShareMenu',
  // 'onWindowResize',
  // 'offWindowResize',
  // 'vibrate'
];

// 存在兼容性的 API 列表
var canIUses = [];

function createTodoMethod(contextName, methodName) {
  return function unsupported() {
    console.error("\u767E\u5EA6\u5C0F\u7A0B\u5E8F ".concat(contextName, "\u6682\u4E0D\u652F\u6301").concat(methodName));
  };
}

function _handleEnvInfo(result) {
  result.miniProgram = {
    appId: result.appKey };

  result.plugin = {
    version: result.sdkVersion };

}

// 需要做转换的 API 列表
var protocols = {
  request: {
    args: function args(fromArgs) {
      // TODO
      // data 不支持 ArrayBuffer
      // method 不支持 TRACE, CONNECT
      return {
        method: 'method',
        dataType: function dataType(type) {
          return {
            name: 'dataType',
            value: type === 'json' ? type : 'string' };

        } };

    } },

  connectSocket: {
    args: {
      method: false } },


  previewImage: previewImage,
  getRecorderManager: {
    returnValue: function returnValue(fromRet) {
      fromRet.onFrameRecorded = createTodoMethod('RecorderManager', 'onFrameRecorded');
    } },

  getBackgroundAudioManager: {
    returnValue: function returnValue(fromRet) {
      fromRet.onPrev = createTodoMethod('BackgroundAudioManager', 'onPrev');
      fromRet.onNext = createTodoMethod('BackgroundAudioManager', 'onNext');
    } },

  scanCode: {
    args: {
      onlyFromCamera: false,
      scanType: false } },


  navigateToMiniProgram: {
    name: 'navigateToSmartProgram',
    args: {
      appId: 'appKey',
      envVersion: false } },


  navigateBackMiniProgram: {
    name: 'navigateBackSmartProgram' },

  showShareMenu: {
    name: 'openShare' },

  getAccountInfoSync: {
    name: 'getEnvInfoSync',
    returnValue: _handleEnvInfo } };



var CALLBACKS = ['success', 'fail', 'cancel', 'complete'];

function processCallback(methodName, method, returnValue) {
  return function (res) {
    return method(processReturnValue(methodName, res, returnValue));
  };
}

function processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析
    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值
    if (isFn(argsOption)) {
      argsOption = argsOption(fromArgs, toArgs) || {};
    }
    for (var key in fromArgs) {
      if (hasOwn(argsOption, key)) {
        var keyOption = argsOption[key];
        if (isFn(keyOption)) {
          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);
        }
        if (!keyOption) {// 不支持的参数
          console.warn("\u767E\u5EA6\u5C0F\u7A0B\u5E8F ".concat(methodName, "\u6682\u4E0D\u652F\u6301").concat(key));
        } else if (isStr(keyOption)) {// 重写参数 key
          toArgs[keyOption] = fromArgs[key];
        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value
          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;
        }
      } else if (CALLBACKS.indexOf(key) !== -1) {
        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);
      } else {
        if (!keepFromArgs) {
          toArgs[key] = fromArgs[key];
        }
      }
    }
    return toArgs;
  } else if (isFn(fromArgs)) {
    fromArgs = processCallback(methodName, fromArgs, returnValue);
  }
  return fromArgs;
}

function processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (isFn(protocols.returnValue)) {// 处理通用 returnValue
    res = protocols.returnValue(methodName, res);
  }
  return processArgs(methodName, res, returnValue, {}, keepReturnValue);
}

function wrapper(methodName, method) {
  if (hasOwn(protocols, methodName)) {
    var protocol = protocols[methodName];
    if (!protocol) {// 暂不支持的 api
      return function () {
        console.error("\u767E\u5EA6\u5C0F\u7A0B\u5E8F \u6682\u4E0D\u652F\u6301".concat(methodName));
      };
    }
    return function (arg1, arg2) {// 目前 api 最多两个参数
      var options = protocol;
      if (isFn(protocol)) {
        options = protocol(arg1);
      }

      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);

      var args = [arg1];
      if (typeof arg2 !== 'undefined') {
        args.push(arg2);
      }
      var returnValue = swan[options.name || methodName].apply(swan, args);
      if (isSyncApi(methodName)) {// 同步 api
        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));
      }
      return returnValue;
    };
  }
  return method;
}

var todoApis = Object.create(null);

var TODOS = [
'onTabBarMidButtonTap',
'subscribePush',
'unsubscribePush',
'onPush',
'offPush',
'share'];


function createTodoApi(name) {
  return function todoApi(_ref)


  {var fail = _ref.fail,complete = _ref.complete;
    var res = {
      errMsg: "".concat(name, ":fail:\u6682\u4E0D\u652F\u6301 ").concat(name, " \u65B9\u6CD5") };

    isFn(fail) && fail(res);
    isFn(complete) && complete(res);
  };
}

TODOS.forEach(function (name) {
  todoApis[name] = createTodoApi(name);
});

var providers = {
  oauth: ['baidu'],
  share: ['baidu'],
  payment: ['baidu'],
  push: ['baidu'] };


function getProvider(_ref2)




{var service = _ref2.service,success = _ref2.success,fail = _ref2.fail,complete = _ref2.complete;
  var res = false;
  if (providers[service]) {
    res = {
      errMsg: 'getProvider:ok',
      service: service,
      provider: providers[service] };

    isFn(success) && success(res);
  } else {
    res = {
      errMsg: 'getProvider:fail:服务[' + service + ']不存在' };

    isFn(fail) && fail(res);
  }
  isFn(complete) && complete(res);
}

var extraApi = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getProvider: getProvider });


var getEmitter = function () {
  if (typeof getUniEmitter === 'function') {
    /* eslint-disable no-undef */
    return getUniEmitter;
  }
  var Emitter;
  return function getUniEmitter() {
    if (!Emitter) {
      Emitter = new _vue.default();
    }
    return Emitter;
  };
}();

function apply(ctx, method, args) {
  return ctx[method].apply(ctx, args);
}

function $on() {
  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));
}
function $off() {
  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));
}
function $once() {
  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));
}
function $emit() {
  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));
}

var eventApi = /*#__PURE__*/Object.freeze({
  __proto__: null,
  $on: $on,
  $off: $off,
  $once: $once,
  $emit: $emit });


function requestPayment(params) {
  var parseError = false;
  if (typeof params.orderInfo === 'string') {
    try {
      params.orderInfo = JSON.parse(params.orderInfo);
    } catch (e) {
      parseError = true;
    }
  }
  if (parseError) {
    params.fail && params.fail({
      errMsg: 'requestPayment:fail: 参数 orderInfo 数据结构不正确，参考：https://uniapp.dcloud.io/api/plugins/payment?id=orderinfo' });

  } else {
    swan.requestPolymerPayment(params);
  }
}

var api = /*#__PURE__*/Object.freeze({
  __proto__: null,
  requestPayment: requestPayment });


var MPPage = Page;
var MPComponent = Component;

var customizeRE = /:/g;

var customize = cached(function (str) {
  return camelize(str.replace(customizeRE, '-'));
});

function initTriggerEvent(mpInstance) {
  var oldTriggerEvent = mpInstance.triggerEvent;
  mpInstance.triggerEvent = function (event) {for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {args[_key3 - 1] = arguments[_key3];}
    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));
  };
}

function initHook(name, options) {
  var oldHook = options[name];
  if (!oldHook) {
    options[name] = function () {
      initTriggerEvent(this);
    };
  } else {
    options[name] = function () {
      initTriggerEvent(this);for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}
      return oldHook.apply(this, args);
    };
  }
}

Page = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  initHook('onLoad', options);
  return MPPage(options);
};

Component = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  initHook('created', options);
  return MPComponent(options);
};

var PAGE_EVENT_HOOKS = [
'onPullDownRefresh',
'onReachBottom',
'onShareAppMessage',
'onPageScroll',
'onResize',
'onTabItemTap'];


function initMocks(vm, mocks) {
  var mpInstance = vm.$mp[vm.mpType];
  mocks.forEach(function (mock) {
    if (hasOwn(mpInstance, mock)) {
      vm[mock] = mpInstance[mock];
    }
  });
}

function hasHook(hook, vueOptions) {
  if (!vueOptions) {
    return true;
  }

  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {
    return true;
  }

  vueOptions = vueOptions.default || vueOptions;

  if (isFn(vueOptions)) {
    if (isFn(vueOptions.extendOptions[hook])) {
      return true;
    }
    if (vueOptions.super &&
    vueOptions.super.options &&
    Array.isArray(vueOptions.super.options[hook])) {
      return true;
    }
    return false;
  }

  if (isFn(vueOptions[hook])) {
    return true;
  }
  var mixins = vueOptions.mixins;
  if (Array.isArray(mixins)) {
    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});
  }
}

function initHooks(mpOptions, hooks, vueOptions) {
  hooks.forEach(function (hook) {
    if (hasHook(hook, vueOptions)) {
      mpOptions[hook] = function (args) {
        return this.$vm && this.$vm.__call_hook(hook, args);
      };
    }
  });
}

function initVueComponent(Vue, vueOptions) {
  vueOptions = vueOptions.default || vueOptions;
  var VueComponent;
  if (isFn(vueOptions)) {
    VueComponent = vueOptions;
    vueOptions = VueComponent.extendOptions;
  } else {
    VueComponent = Vue.extend(vueOptions);
  }
  return [VueComponent, vueOptions];
}

function initSlots(vm, vueSlots) {
  if (Array.isArray(vueSlots) && vueSlots.length) {
    var $slots = Object.create(null);
    vueSlots.forEach(function (slotName) {
      $slots[slotName] = true;
    });
    vm.$scopedSlots = vm.$slots = $slots;
  }
}

function initVueIds(vueIds, mpInstance) {
  vueIds = (vueIds || '').split(',');
  var len = vueIds.length;

  if (len === 1) {
    mpInstance._$vueId = vueIds[0];
  } else if (len === 2) {
    mpInstance._$vueId = vueIds[0];
    mpInstance._$vuePid = vueIds[1];
  }
}

function initData(vueOptions, context) {
  var data = vueOptions.data || {};
  var methods = vueOptions.methods || {};

  if (typeof data === 'function') {
    try {
      data = data.call(context); // 支持 Vue.prototype 上挂的数据
    } catch (e) {
      if (Object({"NODE_ENV":"development","VUE_APP_PLATFORM":"mp-baidu","BASE_URL":"/"}).VUE_APP_DEBUG) {
        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);
      }
    }
  } else {
    try {
      // 对 data 格式化
      data = JSON.parse(JSON.stringify(data));
    } catch (e) {}
  }

  if (!isPlainObject(data)) {
    data = {};
  }

  Object.keys(methods).forEach(function (methodName) {
    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {
      data[methodName] = methods[methodName];
    }
  });

  return data;
}

var PROP_TYPES = [String, Number, Boolean, Object, Array, null];

function createObserver(name) {
  return function observer(newVal, oldVal) {
    if (this.$vm) {
      this.$vm[name] = newVal; // 为了触发其他非 render watcher
    }
  };
}

function initBehaviors(vueOptions, initBehavior) {
  var vueBehaviors = vueOptions.behaviors;
  var vueExtends = vueOptions.extends;
  var vueMixins = vueOptions.mixins;

  var vueProps = vueOptions.props;

  if (!vueProps) {
    vueOptions.props = vueProps = [];
  }

  var behaviors = [];
  if (Array.isArray(vueBehaviors)) {
    vueBehaviors.forEach(function (behavior) {
      behaviors.push(behavior.replace('uni://', "swan".concat("://")));
      if (behavior === 'uni://form-field') {
        if (Array.isArray(vueProps)) {
          vueProps.push('name');
          vueProps.push('value');
        } else {
          vueProps.name = {
            type: String,
            default: '' };

          vueProps.value = {
            type: [String, Number, Boolean, Array, Object, Date],
            default: '' };

        }
      }
    });
  }
  if (isPlainObject(vueExtends) && vueExtends.props) {
    behaviors.push(
    initBehavior({
      properties: initProperties(vueExtends.props, true) }));


  }
  if (Array.isArray(vueMixins)) {
    vueMixins.forEach(function (vueMixin) {
      if (isPlainObject(vueMixin) && vueMixin.props) {
        behaviors.push(
        initBehavior({
          properties: initProperties(vueMixin.props, true) }));


      }
    });
  }
  return behaviors;
}

function parsePropType(key, type, defaultValue, file) {
  // [String]=>String
  if (Array.isArray(type) && type.length === 1) {
    return type[0];
  }
  {
    if (
    defaultValue === false &&
    Array.isArray(type) &&
    type.length === 2 &&
    type.indexOf(String) !== -1 &&
    type.indexOf(Boolean) !== -1)
    {// [String,Boolean]=>Boolean
      if (file) {
        console.warn("props.".concat(
        key, ".type should use Boolean instead of [String,Boolean] at ").concat(file));

      }
      return Boolean;
    }
  }
  return type;
}

function initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var properties = {};
  if (!isBehavior) {
    properties.vueId = {
      type: String,
      value: '' };

    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots
      type: null,
      value: [],
      observer: function observer(newVal, oldVal) {
        var $slots = Object.create(null);
        newVal.forEach(function (slotName) {
          $slots[slotName] = true;
        });
        this.setData({
          $slots: $slots });

      } };

  }
  if (Array.isArray(props)) {// ['title']
    props.forEach(function (key) {
      properties[key] = {
        type: null,
        observer: createObserver(key) };

    });
  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}
    Object.keys(props).forEach(function (key) {
      var opts = props[key];
      if (isPlainObject(opts)) {// title:{type:String,default:''}
        var value = opts.default;
        if (isFn(value)) {
          value = value();
        }

        opts.type = parsePropType(key, opts.type, value, file);

        properties[key] = {
          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,
          value: value,
          observer: createObserver(key) };

      } else {// content:String
        var type = parsePropType(key, opts, null, file);
        properties[key] = {
          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,
          observer: createObserver(key) };

      }
    });
  }
  return properties;
}

function wrapper$1(event) {
  // TODO 又得兼容 mpvue 的 mp 对象
  try {
    event.mp = JSON.parse(JSON.stringify(event));
  } catch (e) {}

  event.stopPropagation = noop;
  event.preventDefault = noop;

  event.target = event.target || {};

  if (!hasOwn(event, 'detail')) {
    event.detail = {};
  }

  if (hasOwn(event, 'markerId')) {
    event.detail = typeof event.detail === 'object' ? event.detail : {};
    event.detail.markerId = event.markerId;
  }

  {// mp-baidu，checked=>value
    if (
    isPlainObject(event.detail) &&
    hasOwn(event.detail, 'checked') &&
    !hasOwn(event.detail, 'value'))
    {
      event.detail.value = event.detail.checked;
    }
  }

  if (isPlainObject(event.detail)) {
    event.target = Object.assign({}, event.target, event.detail);
  }

  return event;
}

function getExtraValue(vm, dataPathsArray) {
  var context = vm;
  dataPathsArray.forEach(function (dataPathArray) {
    var dataPath = dataPathArray[0];
    var value = dataPathArray[2];
    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']
      var propPath = dataPathArray[1];
      var valuePath = dataPathArray[3];

      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;

      if (Number.isInteger(vFor)) {
        context = value;
      } else if (!propPath) {
        context = vFor[value];
      } else {
        if (Array.isArray(vFor)) {
          context = vFor.find(function (vForItem) {
            return vm.__get_value(propPath, vForItem) === value;
          });
        } else if (isPlainObject(vFor)) {
          context = Object.keys(vFor).find(function (vForKey) {
            return vm.__get_value(propPath, vFor[vForKey]) === value;
          });
        } else {
          console.error('v-for 暂不支持循环数据：', vFor);
        }
      }

      if (valuePath) {
        context = vm.__get_value(valuePath, context);
      }
    }
  });
  return context;
}

function processEventExtra(vm, extra, event) {
  var extraObj = {};

  if (Array.isArray(extra) && extra.length) {
    /**
                                              *[
                                              *    ['data.items', 'data.id', item.data.id],
                                              *    ['metas', 'id', meta.id]
                                              *],
                                              *[
                                              *    ['data.items', 'data.id', item.data.id],
                                              *    ['metas', 'id', meta.id]
                                              *],
                                              *'test'
                                              */
    extra.forEach(function (dataPath, index) {
      if (typeof dataPath === 'string') {
        if (!dataPath) {// model,prop.sync
          extraObj['$' + index] = vm;
        } else {
          if (dataPath === '$event') {// $event
            extraObj['$' + index] = event;
          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value
            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);
          } else {
            extraObj['$' + index] = vm.__get_value(dataPath);
          }
        }
      } else {
        extraObj['$' + index] = getExtraValue(vm, dataPath);
      }
    });
  }

  return extraObj;
}

function getObjByArray(arr) {
  var obj = {};
  for (var i = 1; i < arr.length; i++) {
    var element = arr[i];
    obj[element[0]] = element[1];
  }
  return obj;
}

function processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;
  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象
  if (isCustom) {// 自定义事件
    isCustomMPEvent = event.currentTarget &&
    event.currentTarget.dataset &&
    event.currentTarget.dataset.comType === 'wx';
    if (!args.length) {// 无参数，直接传入 event 或 detail 数组
      if (isCustomMPEvent) {
        return [event];
      }
      return event.detail.__args__ || event.detail;
    }
  }

  var extraObj = processEventExtra(vm, extra, event);

  var ret = [];
  args.forEach(function (arg) {
    if (arg === '$event') {
      if (methodName === '__set_model' && !isCustom) {// input v-model value
        ret.push(event.target.value);
      } else {
        if (isCustom && !isCustomMPEvent) {
          ret.push(event.detail.__args__[0]);
        } else {// wxcomponent 组件或内置组件
          ret.push(event);
        }
      }
    } else {
      if (Array.isArray(arg) && arg[0] === 'o') {
        ret.push(getObjByArray(arg));
      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {
        ret.push(extraObj[arg]);
      } else {
        ret.push(arg);
      }
    }
  });

  return ret;
}

var ONCE = '~';
var CUSTOM = '^';

function isMatchEventType(eventType, optType) {
  return eventType === optType ||

  optType === 'regionchange' && (

  eventType === 'begin' ||
  eventType === 'end');


}

function handleEvent(event) {var _this = this;
  event = wrapper$1(event);

  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]
  var dataset = (event.currentTarget || event.target).dataset;
  if (!dataset) {
    return console.warn('事件信息不存在');
  }
  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰
  if (!eventOpts) {
    return console.warn('事件信息不存在');
  }

  // [['handle',[1,2,a]],['handle1',[1,2,a]]]
  var eventType = event.type;

  var ret = [];

  eventOpts.forEach(function (eventOpt) {
    var type = eventOpt[0];
    var eventsArray = eventOpt[1];

    var isCustom = type.charAt(0) === CUSTOM;
    type = isCustom ? type.slice(1) : type;
    var isOnce = type.charAt(0) === ONCE;
    type = isOnce ? type.slice(1) : type;

    if (eventsArray && isMatchEventType(eventType, type)) {
      eventsArray.forEach(function (eventArray) {
        var methodName = eventArray[0];
        if (methodName) {
          var handlerCtx = _this.$vm;
          if (
          handlerCtx.$options.generic &&
          handlerCtx.$parent &&
          handlerCtx.$parent.$parent)
          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots
            handlerCtx = handlerCtx.$parent.$parent;
          }
          if (methodName === '$emit') {
            handlerCtx.$emit.apply(handlerCtx,
            processEventArgs(
            _this.$vm,
            event,
            eventArray[1],
            eventArray[2],
            isCustom,
            methodName));

            return;
          }
          var handler = handlerCtx[methodName];
          if (!isFn(handler)) {
            throw new Error(" _vm.".concat(methodName, " is not a function"));
          }
          if (isOnce) {
            if (handler.once) {
              return;
            }
            handler.once = true;
          }
          ret.push(handler.apply(handlerCtx, processEventArgs(
          _this.$vm,
          event,
          eventArray[1],
          eventArray[2],
          isCustom,
          methodName)));

        }
      });
    }
  });

  if (
  eventType === 'input' &&
  ret.length === 1 &&
  typeof ret[0] !== 'undefined')
  {
    return ret[0];
  }
}

var hooks = [
'onShow',
'onHide',
'onError',
'onPageNotFound'];


function parseBaseApp(vm, _ref3)


{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;
  if (vm.$options.store) {
    _vue.default.prototype.$store = vm.$options.store;
  }

  _vue.default.prototype.mpHost = "mp-baidu";

  _vue.default.mixin({
    beforeCreate: function beforeCreate() {
      if (!this.$options.mpType) {
        return;
      }

      this.mpType = this.$options.mpType;

      this.$mp = _defineProperty({
        data: {} },
      this.mpType, this.$options.mpInstance);


      this.$scope = this.$options.mpInstance;

      delete this.$options.mpType;
      delete this.$options.mpInstance;

      if (this.mpType !== 'app') {
        initRefs(this);
        initMocks(this, mocks);
      }
    } });


  var appOptions = {
    onLaunch: function onLaunch(args) {
      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前
        return;
      }

      this.$vm = vm;

      this.$vm.$mp = {
        app: this };


      this.$vm.$scope = this;
      // vm 上也挂载 globalData
      this.$vm.globalData = this.globalData;

      this.$vm._isMounted = true;
      this.$vm.__call_hook('mounted', args);

      this.$vm.__call_hook('onLaunch', args);
    } };


  // 兼容旧版本 globalData
  appOptions.globalData = vm.$options.globalData || {};
  // 将 methods 中的方法挂在 getApp() 中
  var methods = vm.$options.methods;
  if (methods) {
    Object.keys(methods).forEach(function (name) {
      appOptions[name] = methods[name];
    });
  }

  initHooks(appOptions, hooks);

  return appOptions;
}

function findVmByVueId(vm, vuePid) {
  var $children = vm.$children;
  // 优先查找直属(反向查找:https://github.com/dcloudio/uni-app/issues/1200)
  for (var i = $children.length - 1; i >= 0; i--) {
    var childVm = $children[i];
    if (childVm.$scope._$vueId === vuePid) {
      return childVm;
    }
  }
  // 反向递归查找
  var parentVm;
  for (var _i = $children.length - 1; _i >= 0; _i--) {
    parentVm = findVmByVueId($children[_i], vuePid);
    if (parentVm) {
      return parentVm;
    }
  }
}

function initBehavior(options) {
  return Behavior(options);
}

function initRefs(vm) {
  var mpInstance = vm.$scope;
  Object.defineProperty(vm, '$refs', {
    get: function get() {
      var $refs = {};
      var components = mpInstance.selectAllComponents('.vue-ref');
      components.forEach(function (component) {
        var ref = component.dataset.ref;
        $refs[ref] = component.$vm || component;
      });
      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');
      forComponents.forEach(function (component) {
        var ref = component.dataset.ref;
        if (!$refs[ref]) {
          $refs[ref] = [];
        }
        $refs[ref].push(component.$vm || component);
      });
      return $refs;
    } });

}

function handleLink(event) {var _ref4 =



  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)

  var parentVm;

  if (vuePid) {
    parentVm = findVmByVueId(this.$vm, vuePid);
  }

  if (!parentVm) {
    parentVm = this.$vm;
  }

  vueOptions.parent = parentVm;
}

var mocks = ['nodeId', 'componentName'];

function isPage() {
  return !this.ownerId;
}

function initRelation(detail) {
  this.dispatch('__l', detail);
}

function parseApp(vm) {
  // 百度 onShow 竟然会在 onLaunch 之前
  var appOptions = parseBaseApp(vm, {
    mocks: mocks,
    initRefs: initRefs });

  appOptions.onShow = function onShow(args) {
    if (!this.$vm) {
      this.onLaunch(args);
    }
    this.$vm.__call_hook('onShow', args);
  };
  return appOptions;
}

function createApp(vm) {
  App(parseApp(vm));
  return vm;
}

function parseBaseComponent(vueComponentOptions)


{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =
  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];

  var options = _objectSpread({
    multipleSlots: true,
    addGlobalClass: true },
  vueOptions.options || {});


  var componentOptions = {
    options: options,
    data: initData(vueOptions, _vue.default.prototype),
    behaviors: initBehaviors(vueOptions, initBehavior),
    properties: initProperties(vueOptions.props, false, vueOptions.__file),
    lifetimes: {
      attached: function attached() {
        var properties = this.properties;

        var options = {
          mpType: isPage.call(this) ? 'page' : 'component',
          mpInstance: this,
          propsData: properties };


        initVueIds(properties.vueId, this);

        // 处理父子关系
        initRelation.call(this, {
          vuePid: this._$vuePid,
          vueOptions: options });


        // 初始化 vue 实例
        this.$vm = new VueComponent(options);

        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）
        initSlots(this.$vm, properties.vueSlots);

        // 触发首次 setData
        this.$vm.$mount();
      },
      ready: function ready() {
        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发
        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800
        if (this.$vm) {
          this.$vm._isMounted = true;
          this.$vm.__call_hook('mounted');
          this.$vm.__call_hook('onReady');
        }
      },
      detached: function detached() {
        this.$vm && this.$vm.$destroy();
      } },

    pageLifetimes: {
      show: function show(args) {
        this.$vm && this.$vm.__call_hook('onPageShow', args);
      },
      hide: function hide() {
        this.$vm && this.$vm.__call_hook('onPageHide');
      },
      resize: function resize(size) {
        this.$vm && this.$vm.__call_hook('onPageResize', size);
      } },

    methods: {
      __l: handleLink,
      __e: handleEvent } };



  if (Array.isArray(vueOptions.wxsCallMethods)) {
    vueOptions.wxsCallMethods.forEach(function (callMethod) {
      componentOptions.methods[callMethod] = function (args) {
        return this.$vm[callMethod](args);
      };
    });
  }

  if (isPage) {
    return componentOptions;
  }
  return [componentOptions, VueComponent];
}

var newLifecycle = swan.canIUse('lifecycle-2-0');

function parseComponent(vueOptions) {
  var componentOptions = parseBaseComponent(vueOptions, {
    isPage: isPage,
    initRelation: initRelation });


  // 关于百度小程序生命周期的说明(组件作为页面时):
  // lifetimes:attached --> methods:onShow --> methods:onLoad --> methods:onReady
  // 这里在强制将onShow挪到onLoad之后触发,另外一处修改在page-parser.js
  var oldAttached = componentOptions.lifetimes.attached;
  componentOptions.lifetimes.attached = function attached() {
    oldAttached.call(this);
    if (isPage.call(this)) {// 百度 onLoad 在 attached 之前触发
      // 百度 当组件作为页面时 pageinstancce 不是原来组件的 instance
      this.pageinstance.$vm = this.$vm;
      if (hasOwn(this.pageinstance, '_$args')) {
        this.$vm.$mp.query = this.pageinstance._$args;
        this.$vm.__call_hook('onLoad', this.pageinstance._$args);
        this.$vm.__call_hook('onShow');
        delete this.pageinstance._$args;
      }
    } else {
      // 百度小程序组件不触发methods内的onReady
      if (this.$vm) {
        this.$vm._isMounted = true;
        this.$vm.__call_hook('mounted');
      }
    }
  };

  if (newLifecycle) {
    delete componentOptions.lifetimes.ready;
    componentOptions.methods.onReady = function () {
      if (this.$vm) {
        this.$vm._isMounted = true;
        this.$vm.__call_hook('mounted');
        this.$vm.__call_hook('onReady');
      }
    };
  }

  componentOptions.messages = {
    __l: componentOptions.methods.__l };

  delete componentOptions.methods.__l;

  return componentOptions;
}

var hooks$1 = [
'onShow',
'onHide',
'onUnload'];


hooks$1.push.apply(hooks$1, PAGE_EVENT_HOOKS);

function parseBasePage(vuePageOptions, _ref6)


{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;
  var pageOptions = parseComponent(vuePageOptions);

  initHooks(pageOptions.methods, hooks$1, vuePageOptions);

  pageOptions.methods.onLoad = function (args) {
    this.$vm.$mp.query = args; // 兼容 mpvue
    this.$vm.__call_hook('onLoad', args);
  };

  return pageOptions;
}

function detached($vm) {
  $vm.$children.forEach(function (childVm) {
    childVm.$scope.detached();
  });
  $vm.$scope.detached();
}

function onPageUnload($vm) {
  $vm.$destroy();
  $vm.$children.forEach(function (childVm) {
    detached(childVm);
  });
}

function parsePage(vuePageOptions) {
  var pageOptions = parseBasePage(vuePageOptions, {
    isPage: isPage,
    initRelation: initRelation });


  // 纠正百度小程序生命周期methods:onShow在methods:onLoad之前触发的问题
  pageOptions.methods.onShow = function onShow() {
    if (this.$vm && this.$vm.$mp.query) {
      this.$vm.__call_hook('onShow');
    }
  };

  pageOptions.methods.onLoad = function onLoad(args) {
    // 百度 onLoad 在 attached 之前触发，先存储 args, 在 attached 里边触发 onLoad
    if (this.$vm) {
      this.$vm.$mp.query = args;
      this.$vm.__call_hook('onLoad', args);
      this.$vm.__call_hook('onShow');
    } else {
      this.pageinstance._$args = args;
    }
  };

  pageOptions.methods.onUnload = function onUnload() {
    this.$vm.__call_hook('onUnload');
    onPageUnload(this.$vm);
  };

  return pageOptions;
}

function createPage(vuePageOptions) {
  {
    return Component(parsePage(vuePageOptions));
  }
}

function createComponent(vueOptions) {
  {
    return Component(parseComponent(vueOptions));
  }
}

todos.forEach(function (todoApi) {
  protocols[todoApi] = false;
});

canIUses.forEach(function (canIUseApi) {
  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :
  canIUseApi;
  if (!swan.canIUse(apiName)) {
    protocols[canIUseApi] = false;
  }
});

var uni = {};

if (typeof Proxy !== 'undefined' && "mp-baidu" !== 'app-plus') {
  uni = new Proxy({}, {
    get: function get(target, name) {
      if (target[name]) {
        return target[name];
      }
      if (baseApi[name]) {
        return baseApi[name];
      }
      if (api[name]) {
        return promisify(name, api[name]);
      }
      {
        if (extraApi[name]) {
          return promisify(name, extraApi[name]);
        }
        if (todoApis[name]) {
          return promisify(name, todoApis[name]);
        }
      }
      if (eventApi[name]) {
        return eventApi[name];
      }
      if (!hasOwn(swan, name) && !hasOwn(protocols, name)) {
        return;
      }
      return promisify(name, wrapper(name, swan[name]));
    },
    set: function set(target, name, value) {
      target[name] = value;
      return true;
    } });

} else {
  Object.keys(baseApi).forEach(function (name) {
    uni[name] = baseApi[name];
  });

  {
    Object.keys(todoApis).forEach(function (name) {
      uni[name] = promisify(name, todoApis[name]);
    });
    Object.keys(extraApi).forEach(function (name) {
      uni[name] = promisify(name, todoApis[name]);
    });
  }

  Object.keys(eventApi).forEach(function (name) {
    uni[name] = eventApi[name];
  });

  Object.keys(api).forEach(function (name) {
    uni[name] = promisify(name, api[name]);
  });

  Object.keys(swan).forEach(function (name) {
    if (hasOwn(swan, name) || hasOwn(protocols, name)) {
      uni[name] = promisify(name, wrapper(name, swan[name]));
    }
  });
}

swan.createApp = createApp;
swan.createPage = createPage;
swan.createComponent = createComponent;

var uni$1 = uni;var _default =

uni$1;exports.default = _default;

/***/ }),

/***/ 14:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode, /* vue-cli only */
  components, // fixed by xxxxxx auto components
  renderjs // fixed by xxxxxx renderjs
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // fixed by xxxxxx auto components
  if (components) {
    if (!options.components) {
      options.components = {}
    }
    var hasOwn = Object.prototype.hasOwnProperty
    for (var name in components) {
      if (hasOwn.call(components, name) && !hasOwn.call(options.components, name)) {
        options.components[name] = components[name]
      }
    }
  }
  // fixed by xxxxxx renderjs
  if (renderjs) {
    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {
      this[renderjs.__module] = this
    });
    (options.mixins || (options.mixins = [])).push(renderjs)
  }

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 15:
/*!*******************************************!*\
  !*** D:/work/test/ygctour/store/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 2));
var _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 16));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

_vue.default.use(_vuex.default);

var store = new _vuex.default.Store({
  state: {
    /**
            * 是否需要强制登录
            */
    forcedLogin: true,
    hasLogin: false,
    userName: "",
    phone: "" },

  mutations: {
    login: function login(state, phone) {
      state.phone = phone;
      state.hasLogin = true;
    },
    logout: function logout(state) {
      state.phone = "";
      state.hasLogin = false;
    } } });var _default =



store;exports.default = _default;

/***/ }),

/***/ 154:
/*!********************************************************************!*\
  !*** D:/work/test/ygctour/components/mescroll-uni/mescroll-uni.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, "__esModule", { value: true });exports.default = MeScroll; /* mescroll
                                                                                                        * version 1.2.5
                                                                                                        * 2020-03-15 wenju
                                                                                                        * http://www.mescroll.com
                                                                                                        */

function MeScroll(options, isScrollBody) {
  var me = this;
  me.version = '1.2.5'; // mescroll版本号
  me.options = options || {}; // 配置
  me.isScrollBody = isScrollBody || false; // 滚动区域是否为原生页面滚动; 默认为scroll-view

  me.isDownScrolling = false; // 是否在执行下拉刷新的回调
  me.isUpScrolling = false; // 是否在执行上拉加载的回调
  var hasDownCallback = me.options.down && me.options.down.callback; // 是否配置了down的callback

  // 初始化下拉刷新
  me.initDownScroll();
  // 初始化上拉加载,则初始化
  me.initUpScroll();

  // 自动加载
  setTimeout(function () {// 待主线程执行完毕再执行,避免new MeScroll未初始化,在回调获取不到mescroll的实例
    // 自动触发下拉刷新 (只有配置了down的callback才自动触发下拉刷新)
    if (me.optDown.use && me.optDown.auto && hasDownCallback) {
      if (me.optDown.autoShowLoading) {
        me.triggerDownScroll(); // 显示下拉进度,执行下拉回调
      } else {
        me.optDown.callback && me.optDown.callback(me); // 不显示下拉进度,直接执行下拉回调
      }
    }
    // 自动触发上拉加载
    setTimeout(function () {// 延时确保先执行down的callback,再执行up的callback,因为部分小程序emit是异步,会导致isUpAutoLoad判断有误
      me.optUp.use && me.optUp.auto && !me.isUpAutoLoad && me.triggerUpScroll();
    }, 100);
  }, 30); // 需让me.optDown.inited和me.optUp.inited先执行
}

/* 配置参数:下拉刷新 */
MeScroll.prototype.extendDownScroll = function (optDown) {
  // 下拉刷新的配置
  MeScroll.extend(optDown, {
    use: true, // 是否启用下拉刷新; 默认true
    auto: true, // 是否在初始化完毕之后自动执行下拉刷新的回调; 默认true
    native: false, // 是否使用系统自带的下拉刷新; 默认false; 仅mescroll-body生效 (值为true时,还需在pages配置enablePullDownRefresh:true;详请参考mescroll-native的案例)
    autoShowLoading: false, // 如果设置auto=true(在初始化完毕之后自动执行下拉刷新的回调),那么是否显示下拉刷新的进度; 默认false
    isLock: false, // 是否锁定下拉刷新,默认false;
    offset: 80, // 在列表顶部,下拉大于80px,松手即可触发下拉刷新的回调
    startTop: 100, // scroll-view滚动到顶部时,此时的scroll-top不一定为0, 此值用于控制最大的误差
    fps: 80, // 下拉节流 (值越大每秒刷新频率越高)
    inOffsetRate: 1, // 在列表顶部,下拉的距离小于offset时,改变下拉区域高度比例;值小于1且越接近0,高度变化越小,表现为越往下越难拉
    outOffsetRate: 0.2, // 在列表顶部,下拉的距离大于offset时,改变下拉区域高度比例;值小于1且越接近0,高度变化越小,表现为越往下越难拉
    bottomOffset: 20, // 当手指touchmove位置在距离body底部20px范围内的时候结束上拉刷新,避免Webview嵌套导致touchend事件不执行
    minAngle: 45, // 向下滑动最少偏移的角度,取值区间  [0,90];默认45度,即向下滑动的角度大于45度则触发下拉;而小于45度,将不触发下拉,避免与左右滑动的轮播等组件冲突;
    textInOffset: '下拉刷新', // 下拉的距离在offset范围内的提示文本
    textOutOffset: '释放更新', // 下拉的距离大于offset范围的提示文本
    textLoading: '加载中 ...', // 加载中的提示文本
    bgColor: "transparent", // 背景颜色 (建议在pages.json中再设置一下backgroundColorTop)
    textColor: "gray", // 文本颜色 (当bgColor配置了颜色,而textColor未配置时,则textColor会默认为白色)
    inited: null, // 下拉刷新初始化完毕的回调
    inOffset: null, // 下拉的距离进入offset范围内那一刻的回调
    outOffset: null, // 下拉的距离大于offset那一刻的回调
    onMoving: null, // 下拉过程中的回调,滑动过程一直在执行; rate下拉区域当前高度与指定距离的比值(inOffset: rate<1; outOffset: rate>=1); downHight当前下拉区域的高度
    beforeLoading: null, // 准备触发下拉刷新的回调: 如果return true,将不触发showLoading和callback回调; 常用来完全自定义下拉刷新, 参考案例【淘宝 v6.8.0】
    showLoading: null, // 显示下拉刷新进度的回调
    afterLoading: null, // 准备结束下拉的回调. 返回结束下拉的延时执行时间,默认0ms; 常用于结束下拉之前再显示另外一小段动画,才去隐藏下拉刷新的场景, 参考案例【dotJump】
    endDownScroll: null, // 结束下拉刷新的回调
    callback: function callback(mescroll) {
      // 下拉刷新的回调;默认重置上拉加载列表为第一页
      mescroll.resetUpScroll();
    } });

};

/* 配置参数:上拉加载 */
MeScroll.prototype.extendUpScroll = function (optUp) {
  // 上拉加载的配置
  MeScroll.extend(optUp, {
    use: true, // 是否启用上拉加载; 默认true
    auto: true, // 是否在初始化完毕之后自动执行上拉加载的回调; 默认true
    isLock: false, // 是否锁定上拉加载,默认false;
    isBoth: true, // 上拉加载时,如果滑动到列表顶部是否可以同时触发下拉刷新;默认true,两者可同时触发;
    isBounce: false, // 默认禁止橡皮筋的回弹效果, 必读事项: http://www.mescroll.com/qa.html?v=190725#q25
    callback: null, // 上拉加载的回调;function(page,mescroll){ }
    page: {
      num: 0, // 当前页码,默认0,回调之前会加1,即callback(page)会从1开始
      size: 10, // 每页数据的数量
      time: null // 加载第一页数据服务器返回的时间; 防止用户翻页时,后台新增了数据从而导致下一页数据重复;
    },
    noMoreSize: 5, // 如果列表已无数据,可设置列表的总数量要大于等于5条才显示无更多数据;避免列表数据过少(比如只有一条数据),显示无更多数据会不好看
    offset: 80, // 距底部多远时,触发upCallback
    textLoading: '加载中 ...', // 加载中的提示文本
    textNoMore: '没有更多了', // 没有更多数据的提示文本
    bgColor: "transparent", // 背景颜色 (建议在pages.json中再设置一下backgroundColorBottom)
    textColor: "gray", // 文本颜色 (当bgColor配置了颜色,而textColor未配置时,则textColor会默认为白色)
    inited: null, // 初始化完毕的回调
    showLoading: null, // 显示加载中的回调
    showNoMore: null, // 显示无更多数据的回调
    hideUpScroll: null, // 隐藏上拉加载的回调
    errDistance: 60, // endErr的时候需往上滑动一段距离,使其往下滑动时再次触发onReachBottom,仅mescroll-body生效
    toTop: {
      // 回到顶部按钮,需配置src才显示
      src: null, // 图片路径,默认null (绝对路径或网络图)
      offset: 1000, // 列表滚动多少距离才显示回到顶部按钮,默认1000
      duration: 300, // 回到顶部的动画时长,默认300ms (当值为0或300则使用系统自带回到顶部,更流畅; 其他值则通过step模拟,部分机型可能不够流畅,所以非特殊情况不建议修改此项)
      btnClick: null, // 点击按钮的回调
      onShow: null, // 是否显示的回调
      zIndex: 9990, // fixed定位z-index值
      left: null, // 到左边的距离, 默认null. 此项有值时,right不生效. (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
      right: 20, // 到右边的距离, 默认20 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
      bottom: 120, // 到底部的距离, 默认120 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
      safearea: false, // bottom的偏移量是否加上底部安全区的距离, 默认false, 需要适配iPhoneX时使用 (具体的界面如果不配置此项,则取本vue的safearea值)
      width: 72, // 回到顶部图标的宽度, 默认72 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
      radius: "50%" // 圆角, 默认"50%" (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
    },
    empty: {
      use: true, // 是否显示空布局
      icon: null, // 图标路径
      tip: '~ 暂无相关数据 ~', // 提示
      btnText: '', // 按钮
      btnClick: null, // 点击按钮的回调
      onShow: null, // 是否显示的回调
      fixed: false, // 是否使用fixed定位,默认false; 配置fixed为true,以下的top和zIndex才生效 (transform会使fixed失效,最终会降级为absolute)
      top: "100rpx", // fixed定位的top值 (完整的单位值,如 "10%"; "100rpx")
      zIndex: 99 // fixed定位z-index值
    },
    onScroll: false // 是否监听滚动事件
  });
};

/* 配置参数 */
MeScroll.extend = function (userOption, defaultOption) {
  if (!userOption) return defaultOption;
  for (var key in defaultOption) {
    if (userOption[key] == null) {
      var def = defaultOption[key];
      if (def != null && typeof def === 'object') {
        userOption[key] = MeScroll.extend({}, def); // 深度匹配
      } else {
        userOption[key] = def;
      }
    } else if (typeof userOption[key] === 'object') {
      MeScroll.extend(userOption[key], defaultOption[key]); // 深度匹配
    }
  }
  return userOption;
};

/* 简单判断是否配置了颜色 (非透明,非白色) */
MeScroll.prototype.hasColor = function (color) {
  if (!color) return false;
  var c = color.toLowerCase();
  return c != "#fff" && c != "#ffffff" && c != "transparent" && c != "white";
};

/* -------初始化下拉刷新------- */
MeScroll.prototype.initDownScroll = function () {
  var me = this;
  // 配置参数
  me.optDown = me.options.down || {};
  if (!me.optDown.textColor && me.hasColor(me.optDown.bgColor)) me.optDown.textColor = "#fff"; // 当bgColor有值且textColor未设置,则textColor默认白色
  me.extendDownScroll(me.optDown);

  // 如果是mescroll-body且配置了native,则禁止自定义的下拉刷新
  if (me.isScrollBody && me.optDown.native) {
    me.optDown.use = false;
  } else {
    me.optDown.native = false; // 仅mescroll-body支持,mescroll-uni不支持
  }

  me.downHight = 0; // 下拉区域的高度

  // 在页面中加入下拉布局
  if (me.optDown.use && me.optDown.inited) {
    // 初始化完毕的回调
    setTimeout(function () {// 待主线程执行完毕再执行,避免new MeScroll未初始化,在回调获取不到mescroll的实例
      me.optDown.inited(me);
    }, 0);
  }
};

/* 列表touchstart事件 */
MeScroll.prototype.touchstartEvent = function (e) {
  if (!this.optDown.use) return;

  this.startPoint = this.getPoint(e); // 记录起点
  this.startTop = this.getScrollTop(); // 记录此时的滚动条位置
  this.lastPoint = this.startPoint; // 重置上次move的点
  this.maxTouchmoveY = this.getBodyHeight() - this.optDown.bottomOffset; // 手指触摸的最大范围(写在touchstart避免body获取高度为0的情况)
  this.inTouchend = false; // 标记不是touchend
};

/* 列表touchmove事件 */
MeScroll.prototype.touchmoveEvent = function (e) {




  if (!this.optDown.use) return;
  if (!this.startPoint) return;
  var me = this;

  // 节流
  var t = new Date().getTime();
  if (me.moveTime && t - me.moveTime < me.moveTimeDiff) {// 小于节流时间,则不处理
    return;
  } else {
    me.moveTime = t;
    if (!me.moveTimeDiff) me.moveTimeDiff = 1000 / me.optDown.fps;
  }

  var scrollTop = me.getScrollTop(); // 当前滚动条的距离
  var curPoint = me.getPoint(e); // 当前点

  var moveY = curPoint.y - me.startPoint.y; // 和起点比,移动的距离,大于0向下拉,小于0向上拉

  // 向下拉 && 在顶部
  // mescroll-body,直接判定在顶部即可
  // scroll-view在滚动时不会触发touchmove,当触顶/底/左/右时,才会触发touchmove
  // scroll-view滚动到顶部时,scrollTop不一定为0; 在iOS的APP中scrollTop可能为负数,不一定和startTop相等
  if (moveY > 0 && (
  me.isScrollBody && scrollTop <= 0 ||
  !me.isScrollBody && (scrollTop <= 0 || scrollTop <= me.optDown.startTop && scrollTop === me.startTop)))
  {
    // 可下拉的条件
    if (!me.inTouchend && !me.isDownScrolling && !me.optDown.isLock && (!me.isUpScrolling || me.isUpScrolling &&
    me.optUp.isBoth)) {

      // 下拉的角度是否在配置的范围内
      var angle = me.getAngle(me.lastPoint, curPoint); // 两点之间的角度,区间 [0,90]
      if (angle < me.optDown.minAngle) return; // 如果小于配置的角度,则不往下执行下拉刷新

      // 如果手指的位置超过配置的距离,则提前结束下拉,避免Webview嵌套导致touchend无法触发
      if (me.maxTouchmoveY > 0 && curPoint.y >= me.maxTouchmoveY) {
        me.inTouchend = true; // 标记执行touchend
        me.touchendEvent(); // 提前触发touchend
        return;
      }




      me.preventDefault(e); // 阻止默认事件

      var diff = curPoint.y - me.lastPoint.y; // 和上次比,移动的距离 (大于0向下,小于0向上)

      // 下拉距离  < 指定距离
      if (me.downHight < me.optDown.offset) {
        if (me.movetype !== 1) {
          me.movetype = 1; // 加入标记,保证只执行一次
          me.optDown.inOffset && me.optDown.inOffset(me); // 进入指定距离范围内那一刻的回调,只执行一次
          me.isMoveDown = true; // 标记下拉区域高度改变,在touchend重置回来
        }
        me.downHight += diff * me.optDown.inOffsetRate; // 越往下,高度变化越小

        // 指定距离  <= 下拉距离
      } else {
        if (me.movetype !== 2) {
          me.movetype = 2; // 加入标记,保证只执行一次
          me.optDown.outOffset && me.optDown.outOffset(me); // 下拉超过指定距离那一刻的回调,只执行一次
          me.isMoveDown = true; // 标记下拉区域高度改变,在touchend重置回来
        }
        if (diff > 0) {// 向下拉
          me.downHight += Math.round(diff * me.optDown.outOffsetRate); // 越往下,高度变化越小
        } else {// 向上收
          me.downHight += diff; // 向上收回高度,则向上滑多少收多少高度
        }
      }

      var rate = me.downHight / me.optDown.offset; // 下拉区域当前高度与指定距离的比值
      me.optDown.onMoving && me.optDown.onMoving(me, rate, me.downHight); // 下拉过程中的回调,一直在执行
    }
  }

  me.lastPoint = curPoint; // 记录本次移动的点
};

/* 列表touchend事件 */
MeScroll.prototype.touchendEvent = function (e) {
  if (!this.optDown.use) return;
  // 如果下拉区域高度已改变,则需重置回来
  if (this.isMoveDown) {
    if (this.downHight >= this.optDown.offset) {
      // 符合触发刷新的条件
      this.triggerDownScroll();
    } else {
      // 不符合的话 则重置
      this.downHight = 0;
      this.optDown.endDownScroll && this.optDown.endDownScroll(this);
    }
    this.movetype = 0;
    this.isMoveDown = false;
  } else if (!this.isScrollBody && this.getScrollTop() === this.startTop) {// scroll-view到顶/左/右/底的滑动事件
    var isScrollUp = this.getPoint(e).y - this.startPoint.y < 0; // 和起点比,移动的距离,大于0向下拉,小于0向上拉
    // 上滑
    if (isScrollUp) {
      // 需检查滑动的角度
      var angle = this.getAngle(this.getPoint(e), this.startPoint); // 两点之间的角度,区间 [0,90]
      if (angle > 80) {
        // 检查并触发上拉
        this.triggerUpScroll(true);
      }
    }
  }
};

/* 根据点击滑动事件获取第一个手指的坐标 */
MeScroll.prototype.getPoint = function (e) {
  if (!e) {
    return {
      x: 0,
      y: 0 };

  }
  if (e.touches && e.touches[0]) {
    return {
      x: e.touches[0].pageX,
      y: e.touches[0].pageY };

  } else if (e.changedTouches && e.changedTouches[0]) {
    return {
      x: e.changedTouches[0].pageX,
      y: e.changedTouches[0].pageY };

  } else {
    return {
      x: e.clientX,
      y: e.clientY };

  }
};

/* 计算两点之间的角度: 区间 [0,90]*/
MeScroll.prototype.getAngle = function (p1, p2) {
  var x = Math.abs(p1.x - p2.x);
  var y = Math.abs(p1.y - p2.y);
  var z = Math.sqrt(x * x + y * y);
  var angle = 0;
  if (z !== 0) {
    angle = Math.asin(y / z) / Math.PI * 180;
  }
  return angle;
};

/* 触发下拉刷新 */
MeScroll.prototype.triggerDownScroll = function () {
  if (this.optDown.beforeLoading && this.optDown.beforeLoading(this)) {
    //return true则处于完全自定义状态
  } else {
    this.showDownScroll(); // 下拉刷新中...
    this.optDown.callback && this.optDown.callback(this); // 执行回调,联网加载数据
  }
};

/* 显示下拉进度布局 */
MeScroll.prototype.showDownScroll = function () {
  this.isDownScrolling = true; // 标记下拉中
  if (this.optDown.native) {
    uni.startPullDownRefresh(); // 系统自带的下拉刷新
    this.optDown.showLoading && this.optDown.showLoading(this, 0); // 仍触发showLoading,因为上拉加载用到
  } else {
    this.downHight = this.optDown.offset; // 更新下拉区域高度
    this.optDown.showLoading && this.optDown.showLoading(this, this.downHight); // 下拉刷新中...
  }
};

/* 显示系统自带的下拉刷新时需要处理的业务 */
MeScroll.prototype.onPullDownRefresh = function () {
  this.isDownScrolling = true; // 标记下拉中
  this.optDown.showLoading && this.optDown.showLoading(this, 0); // 仍触发showLoading,因为上拉加载用到
  this.optDown.callback && this.optDown.callback(this); // 执行回调,联网加载数据
};

/* 结束下拉刷新 */
MeScroll.prototype.endDownScroll = function () {
  if (this.optDown.native) {// 结束原生下拉刷新
    this.isDownScrolling = false;
    this.optDown.endDownScroll && this.optDown.endDownScroll(this);
    uni.stopPullDownRefresh();
    return;
  }
  var me = this;
  // 结束下拉刷新的方法
  var endScroll = function endScroll() {
    me.downHight = 0;
    me.isDownScrolling = false;
    me.optDown.endDownScroll && me.optDown.endDownScroll(me);
    !me.isScrollBody && me.setScrollHeight(0); // scroll-view重置滚动区域,使数据不满屏时仍可检查触发翻页
  };
  // 结束下拉刷新时的回调
  var delay = 0;
  if (me.optDown.afterLoading) delay = me.optDown.afterLoading(me); // 结束下拉刷新的延时,单位ms
  if (typeof delay === 'number' && delay > 0) {
    setTimeout(endScroll, delay);
  } else {
    endScroll();
  }
};

/* 锁定下拉刷新:isLock=ture,null锁定;isLock=false解锁 */
MeScroll.prototype.lockDownScroll = function (isLock) {
  if (isLock == null) isLock = true;
  this.optDown.isLock = isLock;
};

/* 锁定上拉加载:isLock=ture,null锁定;isLock=false解锁 */
MeScroll.prototype.lockUpScroll = function (isLock) {
  if (isLock == null) isLock = true;
  this.optUp.isLock = isLock;
};

/* -------初始化上拉加载------- */
MeScroll.prototype.initUpScroll = function () {
  var me = this;
  // 配置参数
  me.optUp = me.options.up || {
    use: false };

  if (!me.optUp.textColor && me.hasColor(me.optUp.bgColor)) me.optUp.textColor = "#fff"; // 当bgColor有值且textColor未设置,则textColor默认白色
  me.extendUpScroll(me.optUp);

  if (!me.optUp.isBounce) me.setBounce(false); // 不允许bounce时,需禁止window的touchmove事件

  if (me.optUp.use === false) return; // 配置不使用上拉加载时,则不初始化上拉布局
  me.optUp.hasNext = true; // 如果使用上拉,则默认有下一页
  me.startNum = me.optUp.page.num + 1; // 记录page开始的页码

  // 初始化完毕的回调
  if (me.optUp.inited) {
    setTimeout(function () {// 待主线程执行完毕再执行,避免new MeScroll未初始化,在回调获取不到mescroll的实例
      me.optUp.inited(me);
    }, 0);
  }
};

/*滚动到底部的事件 (仅mescroll-body生效)*/
MeScroll.prototype.onReachBottom = function () {
  if (this.isScrollBody && !this.isUpScrolling) {// 只能支持下拉刷新的时候同时可以触发上拉加载,否则滚动到底部就需要上滑一点才能触发onReachBottom
    if (!this.optUp.isLock && this.optUp.hasNext) {
      this.triggerUpScroll();
    }
  }
};

/*列表滚动事件 (仅mescroll-body生效)*/
MeScroll.prototype.onPageScroll = function (e) {
  if (!this.isScrollBody) return;

  // 更新滚动条的位置 (主要用于判断下拉刷新时,滚动条是否在顶部)
  this.setScrollTop(e.scrollTop);

  // 顶部按钮的显示隐藏
  if (e.scrollTop >= this.optUp.toTop.offset) {
    this.showTopBtn();
  } else {
    this.hideTopBtn();
  }
};

/*列表滚动事件*/
MeScroll.prototype.scroll = function (e, onScroll) {
  // 更新滚动条的位置
  this.setScrollTop(e.scrollTop);
  // 更新滚动内容高度
  this.setScrollHeight(e.scrollHeight);

  // 向上滑还是向下滑动
  if (this.preScrollY == null) this.preScrollY = 0;
  this.isScrollUp = e.scrollTop - this.preScrollY > 0;
  this.preScrollY = e.scrollTop;

  // 上滑 && 检查并触发上拉
  this.isScrollUp && this.triggerUpScroll(true);

  // 顶部按钮的显示隐藏
  if (e.scrollTop >= this.optUp.toTop.offset) {
    this.showTopBtn();
  } else {
    this.hideTopBtn();
  }

  // 滑动监听
  this.optUp.onScroll && onScroll && onScroll();
};

/* 触发上拉加载 */
MeScroll.prototype.triggerUpScroll = function (isCheck) {
  if (!this.isUpScrolling && this.optUp.use && this.optUp.callback) {
    // 是否校验在底部; 默认不校验
    if (isCheck === true) {
      var canUp = false;
      // 还有下一页 && 没有锁定 && 不在下拉中
      if (this.optUp.hasNext && !this.optUp.isLock && !this.isDownScrolling) {
        if (this.getScrollBottom() <= this.optUp.offset) {// 到底部
          canUp = true; // 标记可上拉
        }
      }
      if (canUp === false) return;
    }
    this.showUpScroll(); // 上拉加载中...
    this.optUp.page.num++; // 预先加一页,如果失败则减回
    this.isUpAutoLoad = true; // 标记上拉已经自动执行过,避免初始化时多次触发上拉回调
    this.num = this.optUp.page.num; // 把最新的页数赋值在mescroll上,避免对page的影响
    this.size = this.optUp.page.size; // 把最新的页码赋值在mescroll上,避免对page的影响
    this.time = this.optUp.page.time; // 把最新的页码赋值在mescroll上,避免对page的影响
    this.optUp.callback(this); // 执行回调,联网加载数据
  }
};

/* 显示上拉加载中 */
MeScroll.prototype.showUpScroll = function () {
  this.isUpScrolling = true; // 标记上拉加载中
  this.optUp.showLoading && this.optUp.showLoading(this); // 回调
};

/* 显示上拉无更多数据 */
MeScroll.prototype.showNoMore = function () {

  this.optUp.hasNext = false; // 标记无更多数据
  this.optUp.showNoMore && this.optUp.showNoMore(this); // 回调
};
/* 显示加载失败 */
MeScroll.prototype.showErr = function () {
  this.options.showErr && this.options.showErr(this); // 回调
};
/* 隐藏上拉区域**/
MeScroll.prototype.hideUpScroll = function () {
  this.optUp.hideUpScroll && this.optUp.hideUpScroll(this); // 回调
};

/* 结束上拉加载 */
MeScroll.prototype.endUpScroll = function (isShowNoMore) {
  if (isShowNoMore != null) {// isShowNoMore=null,不处理下拉状态,下拉刷新的时候调用
    if (isShowNoMore) {
      this.showNoMore(); // isShowNoMore=true,显示无更多数据
    } else {
      this.hideUpScroll(); // isShowNoMore=false,隐藏上拉加载
    }
  }
  this.isUpScrolling = false; // 标记结束上拉加载
};

/* 重置上拉加载列表为第一页
    *isShowLoading 是否显示进度布局;
    * 1.默认null,不传参,则显示上拉加载的进度布局
    * 2.传参true, 则显示下拉刷新的进度布局
    * 3.传参false,则不显示上拉和下拉的进度 (常用于静默更新列表数据)
    */
MeScroll.prototype.resetUpScroll = function (isShowLoading) {
  if (this.optUp && this.optUp.use) {
    var page = this.optUp.page;
    this.prePageNum = page.num; // 缓存重置前的页码,加载失败可退回
    this.prePageTime = page.time; // 缓存重置前的时间,加载失败可退回
    page.num = this.startNum; // 重置为第一页
    page.time = null; // 重置时间为空
    if (!this.isDownScrolling && isShowLoading !== false) {// 如果不是下拉刷新触发的resetUpScroll并且不配置列表静默更新,则显示进度;
      if (isShowLoading == null) {
        this.removeEmpty(); // 移除空布局
        this.showUpScroll(); // 不传参,默认显示上拉加载的进度布局
      } else {
        this.showDownScroll(); // 传true,显示下拉刷新的进度布局,不清空列表
      }
    }
    this.isUpAutoLoad = true; // 标记上拉已经自动执行过,避免初始化时多次触发上拉回调
    this.num = page.num; // 把最新的页数赋值在mescroll上,避免对page的影响
    this.size = page.size; // 把最新的页码赋值在mescroll上,避免对page的影响
    this.time = page.time; // 把最新的页码赋值在mescroll上,避免对page的影响
    this.optUp.callback && this.optUp.callback(this); // 执行上拉回调
  }
};

/* 设置page.num的值 */
MeScroll.prototype.setPageNum = function (num) {
  this.optUp.page.num = num - 1;
};

/* 设置page.size的值 */
MeScroll.prototype.setPageSize = function (size) {
  this.optUp.page.size = size;
};

/* 联网回调成功,结束下拉刷新和上拉加载
    * dataSize: 当前页的数据量(必传)
    * totalPage: 总页数(必传)
    * systime: 服务器时间 (可空)
    */
MeScroll.prototype.endByPage = function (dataSize, totalPage, systime) {
  var hasNext;
  if (this.optUp.use && totalPage != null) hasNext = this.optUp.page.num < totalPage; // 是否还有下一页
  this.endSuccess(dataSize, hasNext, systime);
};

/* 联网回调成功,结束下拉刷新和上拉加载
    * dataSize: 当前页的数据量(必传)
    * totalSize: 列表所有数据总数量(必传)
    * systime: 服务器时间 (可空)
    */
MeScroll.prototype.endBySize = function (dataSize, totalSize, systime) {
  var hasNext;
  if (this.optUp.use && totalSize != null) {
    var loadSize = (this.optUp.page.num - 1) * this.optUp.page.size + dataSize; // 已加载的数据总数
    hasNext = loadSize < totalSize; // 是否还有下一页
  }
  this.endSuccess(dataSize, hasNext, systime);
};

/* 联网回调成功,结束下拉刷新和上拉加载
    * dataSize: 当前页的数据个数(不是所有页的数据总和),用于上拉加载判断是否还有下一页.如果不传,则会判断还有下一页
    * hasNext: 是否还有下一页,布尔类型;用来解决这个小问题:比如列表共有20条数据,每页加载10条,共2页.如果只根据dataSize判断,则需翻到第三页才会知道无更多数据,如果传了hasNext,则翻到第二页即可显示无更多数据.
    * systime: 服务器时间(可空);用来解决这个小问题:当准备翻下一页时,数据库新增了几条记录,此时翻下一页,前面的几条数据会和上一页的重复;这里传入了systime,那么upCallback的page.time就会有值,把page.time传给服务器,让后台过滤新加入的那几条记录
    */
MeScroll.prototype.endSuccess = function (dataSize, hasNext, systime) {
  var me = this;
  // 结束上拉加载
  if (me.optUp.use) {
    var isShowNoMore; // 是否已无更多数据
    if (dataSize != null) {
      var pageNum = me.optUp.page.num; // 当前页码
      var pageSize = me.optUp.page.size; // 每页长度
      // 如果是第一页
      if (pageNum === 1) {
        if (systime) me.optUp.page.time = systime; // 设置加载列表数据第一页的时间
      }
      if (dataSize < pageSize || hasNext === false) {
        // 返回的数据不满一页时,则说明已无更多数据
        me.optUp.hasNext = false;
        if (dataSize === 0 && pageNum === 1) {
          // 如果第一页无任何数据且配置了空布局
          isShowNoMore = false;
          me.showEmpty();
        } else {
          // 总列表数少于配置的数量,则不显示无更多数据
          var allDataSize = (pageNum - 1) * pageSize + dataSize;
          if (allDataSize < me.optUp.noMoreSize) {
            isShowNoMore = false;
          } else {
            isShowNoMore = true;
          }
          me.removeEmpty(); // 移除空布局
        }
      } else {
        // 还有下一页
        isShowNoMore = false;
        me.optUp.hasNext = true;
        me.removeEmpty(); // 移除空布局
      }
    }

    // 隐藏上拉
    me.endUpScroll(isShowNoMore);
  }
  // 结束下拉刷新
  if (me.isDownScrolling) {
    this.optUp.page.num = 1;
    me.endDownScroll();
  };
};

/* 回调失败,结束下拉刷新和上拉加载 */
MeScroll.prototype.endErr = function (errDistance) {
  // 结束下拉,回调失败重置回原来的页码和时间
  if (this.isDownScrolling) {
    var page = this.optUp.page;
    if (page && this.prePageNum) {
      page.num = this.prePageNum;
      page.time = this.prePageTime;
    }
    this.endDownScroll();
    this.showErr();
  }
  // 结束上拉,回调失败重置回原来的页码
  if (this.isUpScrolling) {
    this.optUp.page.num--;
    this.endUpScroll(false);
    this.showErr();
    // 如果是mescroll-body,则需往回滚一定距离
    if (this.isScrollBody && errDistance !== 0) {// 不处理0
      if (!errDistance) errDistance = this.optUp.errDistance; // 不传,则取默认
      this.scrollTo(this.getScrollTop() - errDistance, 0); // 往上回滚的距离
    }
  }
};

/* 显示空布局 */
MeScroll.prototype.showEmpty = function () {
  this.optUp.empty.use && this.optUp.empty.onShow && this.optUp.empty.onShow(true);
};

/* 移除空布局 */
MeScroll.prototype.removeEmpty = function () {
  this.optUp.empty.use && this.optUp.empty.onShow && this.optUp.empty.onShow(false);
};

/* 显示回到顶部的按钮 */
MeScroll.prototype.showTopBtn = function () {
  if (!this.topBtnShow) {
    this.topBtnShow = true;
    this.optUp.toTop.onShow && this.optUp.toTop.onShow(true);
  }
};

/* 隐藏回到顶部的按钮 */
MeScroll.prototype.hideTopBtn = function () {
  if (this.topBtnShow) {
    this.topBtnShow = false;
    this.optUp.toTop.onShow && this.optUp.toTop.onShow(false);
  }
};

/* 获取滚动条的位置 */
MeScroll.prototype.getScrollTop = function () {
  return this.scrollTop || 0;
};

/* 记录滚动条的位置 */
MeScroll.prototype.setScrollTop = function (y) {
  this.scrollTop = y;
};

/* 滚动到指定位置 */
MeScroll.prototype.scrollTo = function (y, t) {
  this.myScrollTo && this.myScrollTo(y, t); // scrollview需自定义回到顶部方法
};

/* 自定义scrollTo */
MeScroll.prototype.resetScrollTo = function (myScrollTo) {
  this.myScrollTo = myScrollTo;
};

/* 滚动条到底部的距离 */
MeScroll.prototype.getScrollBottom = function () {
  return this.getScrollHeight() - this.getClientHeight() - this.getScrollTop();
};

/* 计步器
    star: 开始值
    end: 结束值
    callback(step,timer): 回调step值,计步器timer,可自行通过window.clearInterval(timer)结束计步器;
    t: 计步时长,传0则直接回调end值;不传则默认300ms
    rate: 周期;不传则默认30ms计步一次
    * */
MeScroll.prototype.getStep = function (star, end, callback, t, rate) {
  var diff = end - star; // 差值
  if (t === 0 || diff === 0) {
    callback && callback(end);
    return;
  }
  t = t || 300; // 时长 300ms
  rate = rate || 30; // 周期 30ms
  var count = t / rate; // 次数
  var step = diff / count; // 步长
  var i = 0; // 计数
  var timer = setInterval(function () {
    if (i < count - 1) {
      star += step;
      callback && callback(star, timer);
      i++;
    } else {
      callback && callback(end, timer); // 最后一次直接设置end,避免计算误差
      clearInterval(timer);
    }
  }, rate);
};

/* 滚动容器的高度 */
MeScroll.prototype.getClientHeight = function (isReal) {
  var h = this.clientHeight || 0;
  if (h === 0 && isReal !== true) {// 未获取到容器的高度,可临时取body的高度 (可能会有误差)
    h = this.getBodyHeight();
  }
  return h;
};
MeScroll.prototype.setClientHeight = function (h) {
  this.clientHeight = h;
};

/* 滚动内容的高度 */
MeScroll.prototype.getScrollHeight = function () {
  return this.scrollHeight || 0;
};
MeScroll.prototype.setScrollHeight = function (h) {
  this.scrollHeight = h;
};

/* body的高度 */
MeScroll.prototype.getBodyHeight = function () {
  return this.bodyHeight || 0;
};
MeScroll.prototype.setBodyHeight = function (h) {
  this.bodyHeight = h;
};

/* 阻止浏览器默认滚动事件 */
MeScroll.prototype.preventDefault = function (e) {
  // 小程序不支持e.preventDefault
  // app的bounce只能通过配置pages.json的style.app-plus.bounce为"none"来禁止
  // cancelable:是否可以被禁用; defaultPrevented:是否已经被禁用
  if (e && e.cancelable && !e.defaultPrevented) e.preventDefault();
};

/* 是否允许下拉回弹(橡皮筋效果); true或null为允许; false禁止bounce */
MeScroll.prototype.setBounce = function (isBounce) {




































































};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-baidu/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 155:
/*!***************************************************************************!*\
  !*** D:/work/test/ygctour/components/mescroll-uni/mescroll-uni-option.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; // 全局配置
// mescroll-body 和 mescroll-uni 通用
var GlobalOption = {
  down: {
    // 其他down的配置参数也可以写,这里只展示了常用的配置:
    textInOffset: '下拉刷新', // 下拉的距离在offset范围内的提示文本
    textOutOffset: '释放更新', // 下拉的距离大于offset范围的提示文本
    textLoading: '加载中 ...', // 加载中的提示文本
    bgColor: '#F8F8F8',
    textColor: '#909399',
    offset: 80, // 在列表顶部,下拉大于80px,松手即可触发下拉刷新的回调
    native: false // 是否使用系统自带的下拉刷新; 默认false; 仅在mescroll-body生效 (值为true时,还需在pages配置enablePullDownRefresh:true;详请参考mescroll-native的案例)
  },
  up: {
    // 其他up的配置参数也可以写,这里只展示了常用的配置:
    textLoading: '加载中 ...', // 加载中的提示文本
    textNoMore: '没有更多了', // 没有更多数据的提示文本
    textErr: "加载失败",
    offset: 80, // 距底部多远时,触发upCallback
    isBounce: false, // 默认禁止橡皮筋的回弹效果, 必读事项: http://www.mescroll.com/qa.html?v=190725#q25
    toTop: {
      // 回到顶部按钮,需配置src才显示
      src: "http://www.mescroll.com/img/mescroll-totop.png?v=1", // 图片路径 (建议放入static目录, 如 /static/img/mescroll-totop.png )
      offset: 1000, // 列表滚动多少距离才显示回到顶部按钮,默认1000px
      right: 20, // 到右边的距离, 默认20 (支持"20rpx", "20px", "20%"格式的值, 纯数字则默认单位rpx)
      bottom: 120, // 到底部的距离, 默认120 (支持"20rpx", "20px", "20%"格式的值, 纯数字则默认单位rpx)
      width: 72 // 回到顶部图标的宽度, 默认72 (支持"20rpx", "20px", "20%"格式的值, 纯数字则默认单位rpx)
    },
    empty: {
      use: true, // 是否显示空布局
      icon: "http://www.mescroll.com/img/mescroll-empty.png?v=1", // 图标路径 (建议放入static目录, 如 /static/img/mescroll-empty.png )
      tip: '~ 暂无相关数据 ~' // 提示
    } } };var _default =



GlobalOption;exports.default = _default;

/***/ }),

/***/ 16:
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Store", function() { return Store; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "install", function() { return install; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapState", function() { return mapState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapMutations", function() { return mapMutations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapGetters", function() { return mapGetters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapActions", function() { return mapActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNamespacedHelpers", function() { return createNamespacedHelpers; });
/**
 * vuex v3.0.1
 * (c) 2017 Evan You
 * @license MIT
 */
var applyMixin = function (Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({ beforeCreate: vuexInit });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;
    Vue.prototype._init = function (options) {
      if ( options === void 0 ) options = {};

      options.init = options.init
        ? [vuexInit].concat(options.init)
        : vuexInit;
      _init.call(this, options);
    };
  }

  /**
   * Vuex init hook, injected into each instances init hooks list.
   */

  function vuexInit () {
    var options = this.$options;
    // store injection
    if (options.store) {
      this.$store = typeof options.store === 'function'
        ? options.store()
        : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
};

var devtoolHook =
  typeof window !== 'undefined' &&
  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin (store) {
  if (!devtoolHook) { return }

  store._devtoolHook = devtoolHook;

  devtoolHook.emit('vuex:init', store);

  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });

  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  });
}

/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */
/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * @param {*} obj
 * @param {Array<Object>} cache
 * @return {*}
 */


/**
 * forEach for object
 */
function forEachValue (obj, fn) {
  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });
}

function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

function isPromise (val) {
  return val && typeof val.then === 'function'
}

function assert (condition, msg) {
  if (!condition) { throw new Error(("[vuex] " + msg)) }
}

var Module = function Module (rawModule, runtime) {
  this.runtime = runtime;
  this._children = Object.create(null);
  this._rawModule = rawModule;
  var rawState = rawModule.state;
  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors$1 = { namespaced: { configurable: true } };

prototypeAccessors$1.namespaced.get = function () {
  return !!this._rawModule.namespaced
};

Module.prototype.addChild = function addChild (key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild (key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild (key) {
  return this._children[key]
};

Module.prototype.update = function update (rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;
  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }
  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }
  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild (fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter (fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction (fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation (fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties( Module.prototype, prototypeAccessors$1 );

var ModuleCollection = function ModuleCollection (rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get (path) {
  return path.reduce(function (module, key) {
    return module.getChild(key)
  }, this.root)
};

ModuleCollection.prototype.getNamespace = function getNamespace (path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '')
  }, '')
};

ModuleCollection.prototype.update = function update$1 (rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register (path, rawModule, runtime) {
    var this$1 = this;
    if ( runtime === void 0 ) runtime = true;

  if (true) {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);
  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  }

  // register nested modules
  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];
  if (!parent.getChild(key).runtime) { return }

  parent.removeChild(key);
};

function update (path, targetModule, newModule) {
  if (true) {
    assertRawModule(path, newModule);
  }

  // update target module
  targetModule.update(newModule);

  // update nested modules
  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if (true) {
          console.warn(
            "[vuex] trying to add a new module '" + key + "' on hot reloading, " +
            'manual reload is needed'
          );
        }
        return
      }
      update(
        path.concat(key),
        targetModule.getChild(key),
        newModule.modules[key]
      );
    }
  }
}

var functionAssert = {
  assert: function (value) { return typeof value === 'function'; },
  expected: 'function'
};

var objectAssert = {
  assert: function (value) { return typeof value === 'function' ||
    (typeof value === 'object' && typeof value.handler === 'function'); },
  expected: 'function or object with "handler" function'
};

var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule (path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) { return }

    var assertOptions = assertTypes[key];

    forEachValue(rawModule[key], function (value, type) {
      assert(
        assertOptions.assert(value),
        makeAssertionMessage(path, key, type, value, assertOptions.expected)
      );
    });
  });
}

function makeAssertionMessage (path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
  if (path.length > 0) {
    buf += " in module \"" + (path.join('.')) + "\"";
  }
  buf += " is " + (JSON.stringify(value)) + ".";
  return buf
}

var Vue; // bind on install

var Store = function Store (options) {
  var this$1 = this;
  if ( options === void 0 ) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731
  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if (true) {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "Store must be called with the new operator.");
  }

  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];
  var strict = options.strict; if ( strict === void 0 ) strict = false;

  var state = options.state; if ( state === void 0 ) state = {};
  if (typeof state === 'function') {
    state = state() || {};
  }

  // store internal state
  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue();

  // bind commit and dispatch to self
  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;
  this.dispatch = function boundDispatch (type, payload) {
    return dispatch.call(store, type, payload)
  };
  this.commit = function boundCommit (type, payload, options) {
    return commit.call(store, type, payload, options)
  };

  // strict mode
  this.strict = strict;

  // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters
  installModule(this, state, [], this._modules.root);

  // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)
  resetStoreVM(this, state);

  // apply plugins
  plugins.forEach(function (plugin) { return plugin(this$1); });

  if (Vue.config.devtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors = { state: { configurable: true } };

prototypeAccessors.state.get = function () {
  return this._vm._data.$$state
};

prototypeAccessors.state.set = function (v) {
  if (true) {
    assert(false, "Use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit (_type, _payload, _options) {
    var this$1 = this;

  // check object-style commit
  var ref = unifyObjectStyle(_type, _payload, _options);
    var type = ref.type;
    var payload = ref.payload;
    var options = ref.options;

  var mutation = { type: type, payload: payload };
  var entry = this._mutations[type];
  if (!entry) {
    if (true) {
      console.error(("[vuex] unknown mutation type: " + type));
    }
    return
  }
  this._withCommit(function () {
    entry.forEach(function commitIterator (handler) {
      handler(payload);
    });
  });
  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });

  if (
     true &&
    options && options.silent
  ) {
    console.warn(
      "[vuex] mutation type: " + type + ". Silent option has been removed. " +
      'Use the filter functionality in the vue-devtools'
    );
  }
};

Store.prototype.dispatch = function dispatch (_type, _payload) {
    var this$1 = this;

  // check object-style dispatch
  var ref = unifyObjectStyle(_type, _payload);
    var type = ref.type;
    var payload = ref.payload;

  var action = { type: type, payload: payload };
  var entry = this._actions[type];
  if (!entry) {
    if (true) {
      console.error(("[vuex] unknown action type: " + type));
    }
    return
  }

  this._actionSubscribers.forEach(function (sub) { return sub(action, this$1.state); });

  return entry.length > 1
    ? Promise.all(entry.map(function (handler) { return handler(payload); }))
    : entry[0](payload)
};

Store.prototype.subscribe = function subscribe (fn) {
  return genericSubscribe(fn, this._subscribers)
};

Store.prototype.subscribeAction = function subscribeAction (fn) {
  return genericSubscribe(fn, this._actionSubscribers)
};

Store.prototype.watch = function watch (getter, cb, options) {
    var this$1 = this;

  if (true) {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }
  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)
};

Store.prototype.replaceState = function replaceState (state) {
    var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule (path, rawModule, options) {
    if ( options === void 0 ) options = {};

  if (typeof path === 'string') { path = [path]; }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);
  installModule(this, this.state, path, this._modules.get(path), options.preserveState);
  // reset store to update getters...
  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule (path) {
    var this$1 = this;

  if (typeof path === 'string') { path = [path]; }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);
  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });
  resetStore(this);
};

Store.prototype.hotUpdate = function hotUpdate (newOptions) {
  this._modules.update(newOptions);
  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit (fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties( Store.prototype, prototypeAccessors );

function genericSubscribe (fn, subs) {
  if (subs.indexOf(fn) < 0) {
    subs.push(fn);
  }
  return function () {
    var i = subs.indexOf(fn);
    if (i > -1) {
      subs.splice(i, 1);
    }
  }
}

function resetStore (store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state;
  // init all modules
  installModule(store, state, [], store._modules.root, true);
  // reset vm
  resetStoreVM(store, state, hot);
}

function resetStoreVM (store, state, hot) {
  var oldVm = store._vm;

  // bind store public getters
  store.getters = {};
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    computed[key] = function () { return fn(store); };
    Object.defineProperty(store.getters, key, {
      get: function () { return store._vm[key]; },
      enumerable: true // for local getters
    });
  });

  // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent;

  // enable strict mode for new vm
  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }
    Vue.nextTick(function () { return oldVm.$destroy(); });
  }
}

function installModule (store, rootState, path, module, hot) {
  var isRoot = !path.length;
  var namespace = store._modules.getNamespace(path);

  // register in namespace map
  if (module.namespaced) {
    store._modulesNamespaceMap[namespace] = module;
  }

  // set state
  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];
    store._withCommit(function () {
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);

  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });

  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });

  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });

  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}

/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */
function makeLocalContext (store, namespace, path) {
  var noNamespace = namespace === '';

  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if ( true && !store._actions[type]) {
          console.error(("[vuex] unknown local action type: " + (args.type) + ", global type: " + type));
          return
        }
      }

      return store.dispatch(type, payload)
    },

    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if ( true && !store._mutations[type]) {
          console.error(("[vuex] unknown local mutation type: " + (args.type) + ", global type: " + type));
          return
        }
      }

      store.commit(type, payload, options);
    }
  };

  // getters and state object must be gotten lazily
  // because they will be changed by vm update
  Object.defineProperties(local, {
    getters: {
      get: noNamespace
        ? function () { return store.getters; }
        : function () { return makeLocalGetters(store, namespace); }
    },
    state: {
      get: function () { return getNestedState(store.state, path); }
    }
  });

  return local
}

function makeLocalGetters (store, namespace) {
  var gettersProxy = {};

  var splitPos = namespace.length;
  Object.keys(store.getters).forEach(function (type) {
    // skip if the target getter is not match this namespace
    if (type.slice(0, splitPos) !== namespace) { return }

    // extract local getter type
    var localType = type.slice(splitPos);

    // Add a port to the getters proxy.
    // Define as getter property because
    // we do not want to evaluate the getters in this time.
    Object.defineProperty(gettersProxy, localType, {
      get: function () { return store.getters[type]; },
      enumerable: true
    });
  });

  return gettersProxy
}

function registerMutation (store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler (payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction (store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler (payload, cb) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload, cb);
    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }
    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);
        throw err
      })
    } else {
      return res
    }
  });
}

function registerGetter (store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if (true) {
      console.error(("[vuex] duplicate getter key: " + type));
    }
    return
  }
  store._wrappedGetters[type] = function wrappedGetter (store) {
    return rawGetter(
      local.state, // local state
      local.getters, // local getters
      store.state, // root state
      store.getters // root getters
    )
  };
}

function enableStrictMode (store) {
  store._vm.$watch(function () { return this._data.$$state }, function () {
    if (true) {
      assert(store._committing, "Do not mutate vuex store state outside mutation handlers.");
    }
  }, { deep: true, sync: true });
}

function getNestedState (state, path) {
  return path.length
    ? path.reduce(function (state, key) { return state[key]; }, state)
    : state
}

function unifyObjectStyle (type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if (true) {
    assert(typeof type === 'string', ("Expects string as the type, but found " + (typeof type) + "."));
  }

  return { type: type, payload: payload, options: options }
}

function install (_Vue) {
  if (Vue && _Vue === Vue) {
    if (true) {
      console.error(
        '[vuex] already installed. Vue.use(Vuex) should be called only once.'
      );
    }
    return
  }
  Vue = _Vue;
  applyMixin(Vue);
}

var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState () {
      var state = this.$store.state;
      var getters = this.$store.getters;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);
        if (!module) {
          return
        }
        state = module.context.state;
        getters = module.context.getters;
      }
      return typeof val === 'function'
        ? val.call(this, state, getters)
        : state[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      var commit = this.$store.commit;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
        if (!module) {
          return
        }
        commit = module.context.commit;
      }
      return typeof val === 'function'
        ? val.apply(this, [commit].concat(args))
        : commit.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    val = namespace + val;
    res[key] = function mappedGetter () {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return
      }
      if ( true && !(val in this.$store.getters)) {
        console.error(("[vuex] unknown getter: " + val));
        return
      }
      return this.$store.getters[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      var dispatch = this.$store.dispatch;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
        if (!module) {
          return
        }
        dispatch = module.context.dispatch;
      }
      return typeof val === 'function'
        ? val.apply(this, [dispatch].concat(args))
        : dispatch.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

var createNamespacedHelpers = function (namespace) { return ({
  mapState: mapState.bind(null, namespace),
  mapGetters: mapGetters.bind(null, namespace),
  mapMutations: mapMutations.bind(null, namespace),
  mapActions: mapActions.bind(null, namespace)
}); };

function normalizeMap (map) {
  return Array.isArray(map)
    ? map.map(function (key) { return ({ key: key, val: key }); })
    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })
}

function normalizeNamespace (fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }
    return fn(namespace, map)
  }
}

function getModuleByNamespace (store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];
  if ( true && !module) {
    console.error(("[vuex] module namespace not found in " + helper + "(): " + namespace));
  }
  return module
}

var index_esm = {
  Store: Store,
  install: install,
  version: '3.0.1',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers
};


/* harmony default export */ __webpack_exports__["default"] = (index_esm);


/***/ }),

/***/ 17:
/*!**********************************************!*\
  !*** D:/work/test/ygctour/uview-ui/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;
var _mixin = _interopRequireDefault(__webpack_require__(/*! ./libs/mixin/mixin.js */ 18));



var _request = _interopRequireDefault(__webpack_require__(/*! ./libs/request */ 19));




















var _queryParams = _interopRequireDefault(__webpack_require__(/*! ./libs/function/queryParams.js */ 23));

var _route = _interopRequireDefault(__webpack_require__(/*! ./libs/function/route.js */ 24));

var _timeFormat = _interopRequireDefault(__webpack_require__(/*! ./libs/function/timeFormat.js */ 25));

var _timeFrom = _interopRequireDefault(__webpack_require__(/*! ./libs/function/timeFrom.js */ 26));

var _colorGradient = _interopRequireDefault(__webpack_require__(/*! ./libs/function/colorGradient.js */ 27));

var _guid = _interopRequireDefault(__webpack_require__(/*! ./libs/function/guid.js */ 28));

var _color = _interopRequireDefault(__webpack_require__(/*! ./libs/function/color.js */ 29));

var _type2icon = _interopRequireDefault(__webpack_require__(/*! ./libs/function/type2icon.js */ 30));

var _randomArray = _interopRequireDefault(__webpack_require__(/*! ./libs/function/randomArray.js */ 31));

var _deepClone = _interopRequireDefault(__webpack_require__(/*! ./libs/function/deepClone.js */ 21));

var _deepMerge = _interopRequireDefault(__webpack_require__(/*! ./libs/function/deepMerge.js */ 20));

var _addUnit = _interopRequireDefault(__webpack_require__(/*! ./libs/function/addUnit.js */ 32));


var _test = _interopRequireDefault(__webpack_require__(/*! ./libs/function/test.js */ 22));

var _random = _interopRequireDefault(__webpack_require__(/*! ./libs/function/random.js */ 33));

var _trim = _interopRequireDefault(__webpack_require__(/*! ./libs/function/trim.js */ 34));

var _toast = _interopRequireDefault(__webpack_require__(/*! ./libs/function/toast.js */ 35));

var _getParent = _interopRequireDefault(__webpack_require__(/*! ./libs/function/getParent.js */ 36));

var _$parent = _interopRequireDefault(__webpack_require__(/*! ./libs/function/$parent.js */ 37));



var _config = _interopRequireDefault(__webpack_require__(/*! ./libs/config/config.js */ 38));

var _zIndex = _interopRequireDefault(__webpack_require__(/*! ./libs/config/zIndex.js */ 39));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // 引入全局mixin
// 引入关于是否mixin集成小程序分享的配置
// import wxshare from './libs/mixin/mpShare.js'
// 全局挂载引入http相关请求拦截插件
function wranning(str) {// 开发环境进行信息输出,主要是一些报错信息
  // 这个环境的来由是在程序编写时候,点击hx编辑器运行调试代码的时候,详见:
  // 	https://uniapp.dcloud.io/frame?id=%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83%e5%92%8c%e7%94%9f%e4%ba%a7%e7%8e%af%e5%a2%83
  if (true) {console.warn(str);}} // 尝试判断在根目录的/store中是否有$u.mixin.js，此文件uView默认为需要挂在到全局的vuex的state变量
// HX2.6.11版本,放到try中,控制台依然会警告,暂时不用此方式，
// let vuexStore = {};
// try {
// 	vuexStore = require("@/store/$u.mixin.js");
// } catch (e) {
// 	//TODO handle the exception
// }
// post类型对象参数转为get类型url参数
var $u = { queryParams: _queryParams.default, route: _route.default, timeFormat: _timeFormat.default, date: _timeFormat.default, // 另名date
  timeFrom: _timeFrom.default, colorGradient: _colorGradient.default.colorGradient, guid: _guid.default, color: _color.default, type2icon: _type2icon.default, randomArray: _randomArray.default, wranning: wranning, get: _request.default.get, post: _request.default.post, put: _request.default.put, 'delete': _request.default.delete,
  hexToRgb: _colorGradient.default.hexToRgb,
  rgbToHex: _colorGradient.default.rgbToHex,
  test: _test.default,
  random: _random.default,
  deepClone: _deepClone.default,
  deepMerge: _deepMerge.default,
  getParent: _getParent.default,
  $parent: _$parent.default,
  addUnit: _addUnit.default,
  trim: _trim.default,
  type: ['primary', 'success', 'error', 'warning', 'info'],
  http: _request.default,
  toast: _toast.default,
  config: _config.default, // uView配置信息相关，比如版本号
  zIndex: _zIndex.default };


var install = function install(Vue) {
  Vue.mixin(_mixin.default);
  if (Vue.prototype.openShare) {
    Vue.mixin(mpShare);
  }
  // Vue.mixin(vuexStore);
  // 时间格式化，同时两个名称，date和timeFormat
  Vue.filter('timeFormat', function (timestamp, format) {
    return (0, _timeFormat.default)(timestamp, format);
  });
  Vue.filter('date', function (timestamp, format) {
    return (0, _timeFormat.default)(timestamp, format);
  });
  // 将多久以前的方法，注入到全局过滤器
  Vue.filter('timeFrom', function (timestamp, format) {
    return (0, _timeFrom.default)(timestamp, format);
  });
  Vue.prototype.$u = $u;
};var _default =

{
  install: install };exports.default = _default;

/***/ }),

/***/ 18:
/*!*********************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/mixin/mixin.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(uni) {module.exports = {
  data: function data() {
    return {};
  },
  onLoad: function onLoad() {
    // getRect挂载到$u上，因为这方法需要使用in(this)，所以无法把它独立成一个单独的文件导出
    this.$u.getRect = this.$uGetRect;
  },
  methods: {
    // 查询节点信息
    // 目前此方法在支付宝小程序中无法获取组件跟接点的尺寸，为支付宝的bug(2020-07-21)
    // 解决办法为在组件根部再套一个没有任何作用的view元素
    $uGetRect: function $uGetRect(selector, all) {var _this = this;
      return new Promise(function (resolve) {
        uni.createSelectorQuery().
        in(_this)[all ? 'selectAll' : 'select'](selector).
        boundingClientRect(function (rect) {
          if (all && Array.isArray(rect) && rect.length) {
            resolve(rect);
          }
          if (!all && rect) {
            resolve(rect);
          }
        }).
        exec();
      });
    } },

  onReachBottom: function onReachBottom() {
    uni.$emit('uOnReachBottom');
  } };
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-baidu/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 184:
/*!*******************************************************!*\
  !*** D:/work/test/ygctour/components/content/data.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _default = [{
  "name": "冰希黎一日情人金字塔香水3件套女士持久淡香大牌正品",
  "img": "http://qn.kemean.cn/upload/202004/15/5c9a58ea389148f782f684c0d93134e1?imageView2/0/w/800",
  "priceShop": "¥1.0",
  "priceDiscount": "¥0.1",
  "numSales": 4,
  "ptPrice": null,
  "shopName": "AD品牌旗舰店",
  "objId": 1509 },
{
  "name": "秭归九月红早红橙5斤/10斤中果装橙子",
  "img": "http://qn.kemean.cn/upload/201912/27/7e8dfcfdc8bd45b484502f9c6ed25220?imageView2/0/w/800",
  "priceShop": "¥69.0",
  "priceDiscount": "¥23.0",
  "numSales": 273,
  "ptPrice": null,
  "shopName": "商家云旗舰店",
  "objId": 748 },
{
  "name": "三只松鼠坚果大礼包礼盒大吉大利套餐1266g",
  "img": "http://qn.kemean.cn/upload/201912/06/48c3c8b3b6924b8bbb112888edd4747a?imageView2/0/w/800",
  "priceShop": "¥158.0",
  "priceDiscount": "¥82.0",
  "numSales": 419,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1102 },
{
  "name": "康怡乐（koyle） 涮烤一体锅麦饭石电烧烤炉家用无烟电烤盘不粘烤肉涮烤火锅鸳鸯火锅YH-KY15 涮烤一体锅（大号圆款）",
  "img": "http://qn.kemean.cn/upload/201912/10/dca8997195ba49d3b79cbfeb627d0bec?imageView2/0/w/800",
  "priceShop": "¥998.0",
  "priceDiscount": "¥499.0",
  "numSales": 326,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1170 },
{
  "name": "西域美农古澈玉葡萄干500g 新疆吐鲁番提子",
  "img": "http://qn.kemean.cn/upload/201911/09/56a1740ddcbd4c3a9b94f9c04d48b353?imageView2/0/w/800",
  "priceShop": "¥30.9",
  "priceDiscount": "¥18.9",
  "numSales": 312,
  "ptPrice": null,
  "shopName": "西域美农旗舰店",
  "objId": 646 },
{
  "name": "三只松鼠坚果大礼包礼盒万事亨通套餐1588g",
  "img": "http://qn.kemean.cn/upload/201912/06/5cf59abc872643a4bb2a26a062a83bf6?imageView2/0/w/800",
  "priceShop": "¥268.0",
  "priceDiscount": "¥162.0",
  "numSales": 309,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1104 },
{
  "name": "费列罗榛果威化巧克力钻石装16粒",
  "img": "http://qn.kemean.cn/upload/201912/18/646638e423d34144b74a0d333832fed6?imageView2/0/w/800",
  "priceShop": "¥68.0",
  "priceDiscount": "¥58.8",
  "numSales": 308,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1363 },
{
  "name": "泉氏净水器家用厨房卫生间水龙头过滤器自来水滤水器前置净化水机",
  "img": "http://qn.kemean.cn/upload/201911/06/8ca473e5fc6645a0b88987a6a1015bfb?imageView2/0/w/800",
  "priceShop": "¥220.0",
  "priceDiscount": "¥55.0",
  "numSales": 308,
  "ptPrice": "¥44.0",
  "shopName": "深圳市泉氏清科技有限公司",
  "objId": 180 },
{
  "name": "欧锐铂（ORVIBO） 和美e家涮烤一体电火锅",
  "img": "http://qn.kemean.cn/upload/201912/10/2e2eb512e5914b38a5433946f1a2c935?imageView2/0/w/800",
  "priceShop": "¥1219.0",
  "priceDiscount": "¥608.0",
  "numSales": 275,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1166 },
{
  "name": "苏泊尔 （SUPOR）温馨之家 三件套T1360T",
  "img": "http://qn.kemean.cn/upload/201911/12/2675d3619e944830ba88f65f71f1d621?imageView2/0/w/800",
  "priceShop": "¥399.0",
  "priceDiscount": "¥169.0",
  "numSales": 213,
  "ptPrice": null,
  "shopName": "苏泊尔专卖店",
  "objId": 732 },
{
  "name": "西域美农山药脆片50g*3袋薄片脆薯片好吃的吃货休闲零食小吃",
  "img": "http://qn.kemean.cn/upload/201911/09/ce79652bc5f740398ff2ab4698c47683?imageView2/0/w/800",
  "priceShop": "¥46.9",
  "priceDiscount": "¥20.9",
  "numSales": 208,
  "ptPrice": null,
  "shopName": "西域美农旗舰店",
  "objId": 647 },
{
  "name": "【香港直邮】格丽松Guerisson奇迹马油面霜70g",
  "img": "http://qn.kemean.cn/upload/201911/07/b1d49ff7502c40b8b25423983657601f?imageView2/0/w/800",
  "priceShop": "¥128.0",
  "priceDiscount": "¥79.0",
  "numSales": 207,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 284 },
{
  "name": "蕉下小黑伞250线系列 折叠晴雨伞女防紫外线太阳遮阳伞",
  "img": "http://qn.kemean.cn/upload/201911/28/1d8dc888d9274382a5b83c50ce4718d1?imageView2/0/w/800",
  "priceShop": "¥299.0",
  "priceDiscount": "¥169.0",
  "numSales": 207,
  "ptPrice": null,
  "shopName": "索芙特专卖店",
  "objId": 747 },
{
  "name": "【西域美农红枣核桃派300g】新疆特产手工零食红枣核桃糕",
  "img": "http://qn.kemean.cn/upload/201911/09/2b1029ad48634c0ea6b763feecead123?imageView2/0/w/800",
  "priceShop": "¥54.0",
  "priceDiscount": "¥29.9",
  "numSales": 206,
  "ptPrice": null,
  "shopName": "西域美农旗舰店",
  "objId": 645 },
{
  "name": "优妮马油洗发水去屑止痒修护柔顺清爽男女通用茶麸留香亮黑净屑洗发乳",
  "img": "http://qn.kemean.cn/upload/201911/20/b475daf488d949a2884f20142e3e7440?imageView2/0/w/800",
  "priceShop": "¥39.0",
  "priceDiscount": "¥29.0",
  "numSales": 191,
  "ptPrice": null,
  "shopName": "广州聚惠商贸有限公司",
  "objId": 819 },
{
  "name": "德泽 记忆棉套装组合（腰枕+U型枕）",
  "img": "http://qn.kemean.cn/upload/201912/13/61b22d96ad9f4cf98266a24ab9b6accc?imageView2/0/w/800",
  "priceShop": "¥358.0",
  "priceDiscount": "¥286.0",
  "numSales": 190,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1247 },
{
  "name": "【香港直邮】Dior迪奥口红烈焰蓝金唇膏口红 888#哑光",
  "img": "http://qn.kemean.cn/upload/201911/07/ef3fdbdd84e840ea90feb286273785e7?imageView2/0/w/800",
  "priceShop": "¥358.0",
  "priceDiscount": "¥235.0",
  "numSales": 183,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 307 },
{
  "name": "广发草原手撕风干牛肉原味",
  "img": "http://qn.kemean.cn/upload/201912/18/0d71f5b807f943f5b277c0075d4e9c00?imageView2/0/w/800",
  "priceShop": "¥49.0",
  "priceDiscount": "¥46.8",
  "numSales": 182,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1354 },
{
  "name": "康派2020新款真皮女包时尚简约欧美外贸单肩斜跨包（加大版）",
  "img": "http://qn.kemean.cn/upload/201911/20/0bcd06f79978486da2ae78e0cf301667?imageView2/0/w/800",
  "priceShop": "¥169.0",
  "priceDiscount": "¥69.0",
  "numSales": 164,
  "ptPrice": null,
  "shopName": "康派皮具旗舰店",
  "objId": 802 },
{
  "name": "索芙特真萃养颜橄榄油160ml护肤护发卸妆油",
  "img": "http://qn.kemean.cn/upload/201911/28/563c4c78563d43cc9be022fc61f1772d?imageView2/0/w/800",
  "priceShop": "¥39.0",
  "priceDiscount": "¥19.9",
  "numSales": 158,
  "ptPrice": null,
  "shopName": "索芙特专卖店",
  "objId": 655 },
{
  "name": "康派工厂直销时尚真皮女士单肩包刺绣风格斜挎包",
  "img": "http://qn.kemean.cn/upload/201911/20/970ec654fb844be2bb4c47dc98e55268?imageView2/0/w/800",
  "priceShop": "¥499.0",
  "priceDiscount": "¥209.0",
  "numSales": 136,
  "ptPrice": null,
  "shopName": "康派皮具旗舰店",
  "objId": 808 },
{
  "name": "苏泊尔 （SUPOR）炫彩不粘 煎锅PJ24M6",
  "img": "http://qn.kemean.cn/upload/201911/12/151f3e0ad4c344a2af2077b02a4b95a7?imageView2/0/w/800",
  "priceShop": "¥299.0",
  "priceDiscount": "¥129.0",
  "numSales": 128,
  "ptPrice": null,
  "shopName": "苏泊尔专卖店",
  "objId": 730 },
{
  "name": "优妮 马油护发素发膜男女通用飘逸补水发膜（免蒸）400ml",
  "img": "http://qn.kemean.cn/upload/201911/20/b5a2aeddf46a46339eaa450a228bd8de?imageView2/0/w/800",
  "priceShop": "¥89.0",
  "priceDiscount": "¥68.0",
  "numSales": 82,
  "ptPrice": null,
  "shopName": "广州聚惠商贸有限公司",
  "objId": 816 },
{
  "name": "麦饭石煎锅多功能不粘平底锅三合一早餐锅",
  "img": "http://qn.kemean.cn/upload/201912/23/eceef738dc2c49d6887adc5e8a99aa4f?imageView2/0/w/800",
  "priceShop": "¥488.0",
  "priceDiscount": "¥168.0",
  "numSales": 76,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1383 },
{
  "name": "迪迪尼卡麦饭石奶锅蒸锅不粘锅20CM奶锅",
  "img": "http://qn.kemean.cn/upload/201912/23/d644a681cd9447cca22aa9adeeb7b969?imageView2/0/w/800",
  "priceShop": "¥488.0",
  "priceDiscount": "¥188.0",
  "numSales": 69,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1385 },
{
  "name": "张小盒时尚行李箱纯铝合金框潮流拉杆箱男女万向轮登机箱",
  "img": "http://qn.kemean.cn/upload/201912/08/9e588a3ab6424c42ab42b2ad9cbfa79b?imageView2/0/w/800",
  "priceShop": "¥1500.0",
  "priceDiscount": "¥789.0",
  "numSales": 39,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1125 },
{
  "name": "双面煎锅不粘锅早餐平底锅小熊双面煎锅",
  "img": "http://qn.kemean.cn/upload/201912/23/53d049f894504399aaef75b5f50dcc21?imageView2/0/w/800",
  "priceShop": "¥368.0",
  "priceDiscount": "¥168.0",
  "numSales": 32,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1384 },
{
  "name": "迪迪尼卡麦饭石不粘锅平底炒锅三代32CM炒锅",
  "img": "http://qn.kemean.cn/upload/201912/23/6880d0000838435197670195aa78516b?imageView2/0/w/800",
  "priceShop": "¥378.0",
  "priceDiscount": "¥198.0",
  "numSales": 14,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1381 },
{
  "name": "迪迪尼卡麦饭石汤锅不粘锅电磁炉燃气蒸锅家用小炖锅24CM汤锅",
  "img": "http://qn.kemean.cn/upload/201912/23/9995d08a5b94436493ab98214d06c322?imageView2/0/w/800",
  "priceShop": "¥498.0",
  "priceDiscount": "¥198.0",
  "numSales": 8,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1382 },
{
  "name": "新鲜山西红富士苹果当季水果整箱包邮",
  "img": "http://qn.kemean.cn/upload/201911/07/b345f622de504a2ba9c8bc872d5e9841?imageView2/0/w/800",
  "priceShop": "¥59.9",
  "priceDiscount": "¥24.8",
  "numSales": 7,
  "ptPrice": null,
  "shopName": "运城市博雨电子商务有限公司",
  "objId": 334 },
{
  "name": "阿道夫人参自然洗发水（祛屑止痒）500g02218",
  "img": "http://qn.kemean.cn/upload/201911/07/3b4ca910a5004b02829c3bbed514027a?imageView2/0/w/800",
  "priceShop": "¥88.0",
  "priceDiscount": "¥68.0",
  "numSales": 7,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 213 },
{
  "name": "秭归中华红橙血橙子",
  "img": "http://qn.kemean.cn/upload/202003/12/e8521e91ef6c44c08f19043c0f3c0425?imageView2/0/w/800",
  "priceShop": "¥49.0",
  "priceDiscount": "¥39.0",
  "numSales": 6,
  "ptPrice": null,
  "shopName": "商家云旗舰店",
  "objId": 1453 },
{
  "name": "苏泊尔（SUPOR）不锈钢厨房刀具套装菜刀水果刀果蔬刀果皮刀厨房多用剪刀TK1718T",
  "img": "http://qn.kemean.cn/upload/201911/11/5b456a1ad892462296f9b694e2423a0a?imageView2/0/w/800",
  "priceShop": "¥399.0",
  "priceDiscount": "¥189.0",
  "numSales": 5,
  "ptPrice": null,
  "shopName": "苏泊尔专卖店",
  "objId": 696 },
{
  "name": "【香港直邮】LANEIGE兰芝水衡护肤水乳套装 补水保湿水衡滋养（清爽型）",
  "img": "http://qn.kemean.cn/upload/201911/07/c3f9a916193c47198d9b78eec60e742a?imageView2/0/w/800",
  "priceShop": "¥358.0",
  "priceDiscount": "¥268.0",
  "numSales": 3,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 218 },
{
  "name": "康玶时光",
  "img": "http://qn.kemean.cn/upload/201911/13/619f1c0814eb41caa97963c35d44a9b8?imageView2/0/w/800",
  "priceShop": "¥30.0",
  "priceDiscount": "¥15.0",
  "numSales": 3,
  "ptPrice": null,
  "shopName": "四海盛宴",
  "objId": 740 },
{
  "name": "【年终大促】樱花薰衣草/法国香水洗衣液2L持久留香01310",
  "img": "http://qn.kemean.cn/upload/201911/07/ebf975e7edb740169f687852185947bc?imageView2/0/w/800",
  "priceShop": "¥49.9",
  "priceDiscount": "¥29.9",
  "numSales": 2,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 342 },
{
  "name": "西域美农红枣小魅枣500g*2阿克苏魅枣若羌灰枣红枣",
  "img": "http://qn.kemean.cn/upload/201911/09/5b1258b8019142e994f2e87be5210b11?imageView2/0/w/800",
  "priceShop": "¥49.0",
  "priceDiscount": "¥20.9",
  "numSales": 2,
  "ptPrice": null,
  "shopName": "西域美农旗舰店",
  "objId": 642 },
{
  "name": "【香港直邮】BYPHASSE蓓昂斯卸妆水温和清洁500ml",
  "img": "http://qn.kemean.cn/upload/201911/07/81fd39255c4341f89036a29837da626b?imageView2/0/w/800",
  "priceShop": "¥118.0",
  "priceDiscount": "¥59.0",
  "numSales": 1,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 277 },
{
  "name": "【双11大促】百雀羚 三生花控油清肌净肤泥膜50g（深层清洁 净肤面膜）120157",
  "img": "http://qn.kemean.cn/upload/201911/07/6c4eeb6e49d6465da160bded3c8a8f35?imageView2/0/w/800",
  "priceShop": "¥168.0",
  "priceDiscount": "¥68.0",
  "numSales": 1,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 292 },
{
  "name": "泉氏净水器家用10寸透明前置过滤器通用PPF棉滤芯自来水净水机过滤器",
  "img": "http://qn.kemean.cn/upload/201911/07/5b1493019fad4f86bfaa29be9c4ba26e?imageView2/0/w/800",
  "priceShop": "¥188.0",
  "priceDiscount": "¥66.8",
  "numSales": 1,
  "ptPrice": "¥40.08",
  "shopName": "深圳市泉氏清科技有限公司",
  "objId": 185 },
{
  "name": "（NLMI）那拉米/泰国皇家天然乳胶枕头宝宝儿童动物薄睡枕/卡通矮抱枕低靠枕/ （猴）63*35*5cm",
  "img": "http://qn.kemean.cn/upload/201911/07/831d070d906e430ba05d0b63655aefb6?imageView2/0/w/800",
  "priceShop": "¥399.0",
  "priceDiscount": "¥339.0",
  "numSales": 1,
  "ptPrice": "¥203.4",
  "shopName": "森尼健康家纺专营店",
  "objId": 187 },
{
  "name": "西域美农树上黄葡萄干250g*2 新疆特",
  "img": "http://qn.kemean.cn/upload/201911/08/1270453fb57f4dbaaceacc3a5c9d17ad?imageView2/0/w/800",
  "priceShop": "¥39.9",
  "priceDiscount": "¥18.9",
  "numSales": 1,
  "ptPrice": null,
  "shopName": "西域美农旗舰店",
  "objId": 454 },
{
  "name": "原创设计北欧后现代简约客厅/餐厅吊灯",
  "img": "http://qn.kemean.cn/upload/201911/28/d5cb3b069ca545b8b313d6385728efe8?imageView2/0/w/800",
  "priceShop": "¥635.0",
  "priceDiscount": "¥345.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1024 },
{
  "name": "德泽 全棉印花被 纯棉被子 单被 空调被 夏被150*200CM",
  "img": "http://qn.kemean.cn/upload/201912/14/e762dff2615d4d7595b9815f038f8dce?imageView2/0/w/800",
  "priceShop": "¥628.0",
  "priceDiscount": "¥598.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1280 },
{
  "name": "德泽 全棉印花被 纯棉被子 单被 空调被 夏被150*200CM",
  "img": "http://qn.kemean.cn/upload/201912/14/e762dff2615d4d7595b9815f038f8dce?imageView2/0/w/800",
  "priceShop": "¥628.0",
  "priceDiscount": "¥598.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1281 },
{
  "name": "原创设计北欧后现代简约客厅/餐厅吊灯",
  "img": "http://qn.kemean.cn/upload/201911/28/f113a0d0100d49da9da2d76695755b1d?imageView2/0/w/800",
  "priceShop": "¥600.0",
  "priceDiscount": "¥325.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1026 },
{
  "name": "德泽 臻品暖绒棉花被 被子 单被 空调被 夏被 200*230CM",
  "img": "http://qn.kemean.cn/upload/201912/14/8d4a858a2c2c4e0fa7ed328e8156eced?imageView2/0/w/800",
  "priceShop": "¥629.0",
  "priceDiscount": "¥499.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1282 },
{
  "name": "德泽 活性贡棉四件套 幸福叶羽 被套床单枕套 床单230*240cm 被套200*230cm 适用于1.5M/1.8M床",
  "img": "http://qn.kemean.cn/upload/201912/14/c224da9028d24c16b3c11cd5e7e3c2e1?imageView2/0/w/800",
  "priceShop": "¥998.0",
  "priceDiscount": "¥798.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1283 },
{
  "name": "德泽 爱丁堡至尊鹅绒被 被子棉被冬被被芯鹅绒 200*230cm/2500克",
  "img": "http://qn.kemean.cn/upload/201912/14/5e58478813e84cfe866bf9cb2dad92d3?imageView2/0/w/800",
  "priceShop": "¥1288.0",
  "priceDiscount": "¥999.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1284 },
{
  "name": "【香港直邮】Dr.Jart+蒂佳婷银管BB霜40ml",
  "img": "http://qn.kemean.cn/upload/201911/07/b6dda1efed864c4c8c716becae97988e?imageView2/0/w/800",
  "priceShop": "¥198.0",
  "priceDiscount": "¥105.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 261 },
{
  "name": "德泽 金典纯羊毛被 被子被芯冬被 200*230cm/2000g",
  "img": "http://qn.kemean.cn/upload/201912/14/92aba9d139bf48668e37c32a5ef0a103?imageView2/0/w/800",
  "priceShop": "¥1199.0",
  "priceDiscount": "¥969.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1285 },
{
  "name": "原创设计北欧后现代简约客厅/楼梯吊灯",
  "img": "http://qn.kemean.cn/upload/201911/28/cd105fc4ed0a4501b8ddcc82bc9c0975?imageView2/0/w/800",
  "priceShop": "¥1110.0",
  "priceDiscount": "¥605.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1030 },
{
  "name": "德泽 臻品暖绒棉花被（秋冬款）棉被被子被芯 200*230cm/2000g",
  "img": "http://qn.kemean.cn/upload/201912/14/78e02c5f443541fcada9b967aa2b2fa4?imageView2/0/w/800",
  "priceShop": "¥1266.0",
  "priceDiscount": "¥999.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1286 },
{
  "name": "原创北欧后现代简约马卡龙卧室/客厅吊灯",
  "img": "http://qn.kemean.cn/upload/201911/28/a3e61a85db3a440b9e757b5a4667b931?imageView2/0/w/800",
  "priceShop": "¥1245.0",
  "priceDiscount": "¥675.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1031 },
{
  "name": "德泽 纯棉活性印花四件套 缤纷花语 枕套被套床单 适用于1.8M床 床单：230*250cm 被套：200*230cm",
  "img": "http://qn.kemean.cn/upload/201912/14/5b7aa13d165247a58778b890fc3caadf?imageView2/0/w/800",
  "priceShop": "¥1199.0",
  "priceDiscount": "¥400.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1287 },
{
  "name": "【香港直邮】Dr.Jart+/蒂佳婷V7素颜霜裸妆遮瑕保湿50ml",
  "img": "http://qn.kemean.cn/upload/201911/07/d6664dd8baf445bcb038fa702250e3db?imageView2/0/w/800",
  "priceShop": "¥228.0",
  "priceDiscount": "¥158.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 264 },
{
  "name": "原创北欧后现代简约马卡龙卧室/客厅吊灯",
  "img": "http://qn.kemean.cn/upload/201911/29/93222dbb1765421db84f537395867349?imageView2/0/w/800",
  "priceShop": "¥1746.0",
  "priceDiscount": "¥945.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1032 },
{
  "name": "德泽 全棉磨毛加厚四件套 唐之韵 全棉四件套枕套被套床单 适用于1.8M床（床单：250*250cm 被套：200*230cm）",
  "img": "http://qn.kemean.cn/upload/201912/14/70201e386a964687b1ad3662a6b5150a?imageView2/0/w/800",
  "priceShop": "¥1990.0",
  "priceDiscount": "¥1599.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1288 },
{
  "name": "/葆缇嘉 防脱发精华导入液 60ML",
  "img": "http://qn.kemean.cn/upload/201911/19/778c762f2e844ae6bc04b0097747aa57?imageView2/0/w/800",
  "priceShop": "¥368.0",
  "priceDiscount": "¥312.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "bottgadilungavita海外旗舰店",
  "objId": 777 },
{
  "name": "原创北欧后现代简约马卡龙卧室/客厅吊灯",
  "img": "http://qn.kemean.cn/upload/201911/29/830a8bac476847b88b355bb2da4e82f6?imageView2/0/w/800",
  "priceShop": "¥2214.0",
  "priceDiscount": "¥1199.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1033 },
{
  "name": "德泽 全棉贡缎提花手工蚕丝被 被芯被子冬被200x230cm 1800克",
  "img": "http://qn.kemean.cn/upload/201912/14/aea91b7b8ad24b38882b8b1627b37e61?imageView2/0/w/800",
  "priceShop": "¥3880.0",
  "priceDiscount": "¥2800.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1289 },
{
  "name": "【香港直邮】Dr.Jart+蒂佳婷蓝色药丸面膜5片/盒",
  "img": "http://qn.kemean.cn/upload/201911/07/6ef1d1e0c87f45f0a3854239a1ce4b87?imageView2/0/w/800",
  "priceShop": "¥128.0",
  "priceDiscount": "¥59.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 266 },
{
  "name": "无印良品 纯色系全棉色织水洗棉四件套 WYLP-CSQMSZ",
  "img": "http://qn.kemean.cn/upload/201912/14/d853d39ef9954f35b0fecbde76843c31?imageView2/0/w/800",
  "priceShop": "¥898.0",
  "priceDiscount": "¥434.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1290 },
{
  "name": "紫色3支套刷",
  "img": "http://qn.kemean.cn/upload/201912/14/cf7b7170f566420b83a663c00051f6b0?imageView2/0/w/800",
  "priceShop": "¥59.0",
  "priceDiscount": "¥37.5",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1291 },
{
  "name": "葆缇嘉 强效防脱安瓶 10ML*10 ",
  "img": "http://qn.kemean.cn/upload/201911/19/1abeac734a90484c9afd7a6e65621fbe?imageView2/0/w/800",
  "priceShop": "¥428.0",
  "priceDiscount": "¥360.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "bottgadilungavita海外旗舰店",
  "objId": 780 },
{
  "name": "6支小妖精套刷",
  "img": "http://qn.kemean.cn/upload/201912/14/2ade3ac065d64057a5004bb6d1c8d2cd?imageView2/0/w/800",
  "priceShop": "¥299.0",
  "priceDiscount": "¥168.1",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1292 },
{
  "name": "【香港直邮】Dr.Jart+蒂佳婷绿色药丸面膜5片/盒",
  "img": "http://qn.kemean.cn/upload/201911/07/2ddffea99b9f45c48c7ddd46bc91bc5b?imageView2/0/w/800",
  "priceShop": "¥128.0",
  "priceDiscount": "¥59.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 269 },
{
  "name": "葆缇嘉 生发膳食补充胶囊 30粒/盒 ",
  "img": "http://qn.kemean.cn/upload/201911/19/3476dd73d0864e07a9f804e49599ff59?imageView2/0/w/800",
  "priceShop": "¥280.0",
  "priceDiscount": "¥250.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "bottgadilungavita海外旗舰店",
  "objId": 781 },
{
  "name": "白色双头套刷",
  "img": "http://qn.kemean.cn/upload/201912/14/e917ed4b9f5741ebb371c93b9efc18b5?imageView2/0/w/800",
  "priceShop": "¥98.0",
  "priceDiscount": "¥50.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1293 },
{
  "name": "葆缇嘉黄金系列手部护理",
  "img": "http://qn.kemean.cn/upload/201911/19/f4bbf462eb7a40b2a53b40dfb2d9176b?imageView2/0/w/800",
  "priceShop": "¥220.0",
  "priceDiscount": "¥150.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "bottgadilungavita海外旗舰店",
  "objId": 782 },
{
  "name": "7支套刷 肤色",
  "img": "http://qn.kemean.cn/upload/201912/14/e33963cdd7234f638868cdbf50f452e1?imageView2/0/w/800",
  "priceShop": "¥46.0",
  "priceDiscount": "¥28.8",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1294 },
{
  "name": "【香港直邮】Banila CO芭妮兰卸妆膏脸部温和清洁卸妆100ml",
  "img": "http://qn.kemean.cn/upload/201911/07/bc208e430e7843c882d5fbdebc70ac94?imageView2/0/w/800",
  "priceShop": "¥158.0",
  "priceDiscount": "¥89.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 271 },
{
  "name": "葆缇嘉黄金系列活性珍珠精华",
  "img": "http://qn.kemean.cn/upload/201911/19/afb7c348d80840b1ac40dce081ed071c?imageView2/0/w/800",
  "priceShop": "¥600.0",
  "priceDiscount": "¥508.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "bottgadilungavita海外旗舰店",
  "objId": 783 },
{
  "name": "砰然心动",
  "img": "http://qn.kemean.cn/upload/201912/14/6453ef97480e450391c123bd9991ef71?imageView2/0/w/800",
  "priceShop": "¥299.0",
  "priceDiscount": "¥186.3",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1295 },
{
  "name": "百雀羚草本系列水嫩倍现臻美套装12527新旧款随机发货",
  "img": "http://qn.kemean.cn/upload/201911/07/9da12843d7b34a6ca6ccfbd79f502b08?imageView2/0/w/800",
  "priceShop": "¥268.0",
  "priceDiscount": "¥228.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 272 },
{
  "name": "葆缇嘉黄金系列抗衰老保湿面膜",
  "img": "http://qn.kemean.cn/upload/201911/19/9599bdbd94c84d2d97c53647071debb1?imageView2/0/w/800",
  "priceShop": "¥218.0",
  "priceDiscount": "¥180.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "bottgadilungavita海外旗舰店",
  "objId": 784 },
{
  "name": "七彩套刷",
  "img": "http://qn.kemean.cn/upload/201912/14/0ce24e07845045cda4933dd63e9d470c?imageView2/0/w/800",
  "priceShop": "¥118.0",
  "priceDiscount": "¥70.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1296 },
{
  "name": "【香港直邮】Banila CO芭妮兰zero卸妆膏脸部眼唇温和清洁卸妆180ml",
  "img": "http://qn.kemean.cn/upload/201911/07/9eab399c0613421b9b183e429952d3ac?imageView2/0/w/800",
  "priceShop": "¥198.0",
  "priceDiscount": "¥139.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 273 },
{
  "name": "闪亮系列6支套刷&专业刷包",
  "img": "http://qn.kemean.cn/upload/201912/14/88ef29dbc59b45d9920d931c40d7c675?imageView2/0/w/800",
  "priceShop": "¥149.0",
  "priceDiscount": "¥93.1",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1297 },
{
  "name": "葆缇嘉黄金系列干细胞新生面霜",
  "img": "http://qn.kemean.cn/upload/201911/19/b1c0d5d7e4074ef988481c8bea16a3b8?imageView2/0/w/800",
  "priceShop": "¥499.0",
  "priceDiscount": "¥465.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "bottgadilungavita海外旗舰店",
  "objId": 786 },
{
  "name": "樱花系列9支套刷&专业刷包",
  "img": "http://qn.kemean.cn/upload/201912/14/681623089258415b83bce43370d0440b?imageView2/0/w/800",
  "priceShop": "¥198.0",
  "priceDiscount": "¥123.8",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1298 },
{
  "name": "曼佗油茶籽油725ML花海版",
  "img": "http://qn.kemean.cn/upload/201911/19/3da0febba0a44b0894ca118173f28443?imageView2/0/w/800",
  "priceShop": "¥150.0",
  "priceDiscount": "¥110.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "曼佗茶油品牌店",
  "objId": 787 },
{
  "name": "红粉系列9支套刷&专业刷包",
  "img": "http://qn.kemean.cn/upload/201912/14/216aa0b2bbb94634a0e145f582ddc725?imageView2/0/w/800",
  "priceShop": "¥228.0",
  "priceDiscount": "¥142.5",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1299 },
{
  "name": "百雀羚草本精萃惊喜套装12541新旧款随机发货",
  "img": "http://qn.kemean.cn/upload/201911/07/c1a5db1ff4474f1bbda5b308dc403620?imageView2/0/w/800",
  "priceShop": "¥168.0",
  "priceDiscount": "¥138.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 276 },
{
  "name": "曼佗油茶籽油725MLx2",
  "img": "http://qn.kemean.cn/upload/201911/19/1f15a2e3a21f4bd88683255de6399b49?imageView2/0/w/800",
  "priceShop": "¥250.0",
  "priceDiscount": "¥230.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "曼佗茶油品牌店",
  "objId": 788 },
{
  "name": "SY大号腮红刷",
  "img": "http://qn.kemean.cn/upload/201912/14/90624e995c6343b492eb30d4232290ec?imageView2/0/w/800",
  "priceShop": "¥128.0",
  "priceDiscount": "¥80.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1300 },
{
  "name": "曼佗油茶籽油725MLx3",
  "img": "http://qn.kemean.cn/upload/201911/19/6a7f252e2e584629b5b472bb2d032e7d?imageView2/0/w/800",
  "priceShop": "¥350.0",
  "priceDiscount": "¥320.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "曼佗茶油品牌店",
  "objId": 789 },
{
  "name": "SY大号粉扑刷",
  "img": "http://qn.kemean.cn/upload/201912/14/839a30daafeb401eb0f8c5fa90e4c30f?imageView2/0/w/800",
  "priceShop": "¥168.0",
  "priceDiscount": "¥105.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1301 },
{
  "name": "激情系列10支",
  "img": "http://qn.kemean.cn/upload/201912/14/629b3218986d4fb1a0591408110b7dee?imageView2/0/w/800",
  "priceShop": "¥229.0",
  "priceDiscount": "¥142.5",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1302 },
{
  "name": "激情系列7支套刷&专业刷包",
  "img": "http://qn.kemean.cn/upload/201912/14/080c803013734907918ae3875a190709?imageView2/0/w/800",
  "priceShop": "¥168.0",
  "priceDiscount": "¥105.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1303 },
{
  "name": "曼佗油茶籽油2L单瓶装",
  "img": "http://qn.kemean.cn/upload/201911/19/fd8a322318754944a25636dd11446661?imageView2/0/w/800",
  "priceShop": "¥250.0",
  "priceDiscount": "¥220.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "曼佗茶油品牌店",
  "objId": 792 },
{
  "name": "SY大号轮廓刷",
  "img": "http://qn.kemean.cn/upload/201912/14/50d85b65f91d497da05a4ca05f8c7fba?imageView2/0/w/800",
  "priceShop": "¥168.0",
  "priceDiscount": "¥105.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1304 },
{
  "name": "曼佗神露食用植物调和油5L",
  "img": "http://qn.kemean.cn/upload/201911/19/cb58c5d4ed18413886204f4189729d14?imageView2/0/w/800",
  "priceShop": "¥150.0",
  "priceDiscount": "¥120.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "曼佗茶油品牌店",
  "objId": 793 },
{
  "name": "SY粉底刷",
  "img": "http://qn.kemean.cn/upload/201912/14/3baf905153734454b6ca67fe22d0cc81?imageView2/0/w/800",
  "priceShop": "¥128.0",
  "priceDiscount": "¥80.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1305 },
{
  "name": "曼佗神露食用植物调和油2L",
  "img": "http://qn.kemean.cn/upload/201911/19/ec47dc4803f14d73b97f8bb560452fa7?imageView2/0/w/800",
  "priceShop": "¥90.0",
  "priceDiscount": "¥65.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "曼佗茶油品牌店",
  "objId": 794 },
{
  "name": "SY3D立体眉刷",
  "img": "http://qn.kemean.cn/upload/201912/14/4b03907e6f04419e8bb2314f5499ee0e?imageView2/0/w/800",
  "priceShop": "¥78.0",
  "priceDiscount": "¥48.8",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1306 },
{
  "name": "百雀羚水能量焕耀套装12954新旧款随机发货",
  "img": "http://qn.kemean.cn/upload/201911/07/0ce535c737b043cb9da3df08385043a0?imageView2/0/w/800",
  "priceShop": "¥538.0",
  "priceDiscount": "¥488.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 283 },
{
  "name": "曼佗神露食用植物调和油1.8L",
  "img": "http://qn.kemean.cn/upload/201911/19/238292ec305a45c2ad0f849dfaaadab9?imageView2/0/w/800",
  "priceShop": "¥85.0",
  "priceDiscount": "¥60.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "曼佗茶油品牌店",
  "objId": 795 },
{
  "name": "SY眼影刷",
  "img": "http://qn.kemean.cn/upload/201912/14/331002436ef94c5d81dd0314aa852913?imageView2/0/w/800",
  "priceShop": "¥68.0",
  "priceDiscount": "¥42.5",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1307 },
{
  "name": "曼佗神露食用植物调和油1.5Lx2",
  "img": "http://qn.kemean.cn/upload/201911/19/58bc3aadc8f8481bb4eff0d040c712db?imageView2/0/w/800",
  "priceShop": "¥120.0",
  "priceDiscount": "¥100.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "曼佗茶油品牌店",
  "objId": 796 },
{
  "name": "SY唇刷",
  "img": "http://qn.kemean.cn/upload/201912/14/e524046adf8947d48ac1dd94a58afe24?imageView2/0/w/800",
  "priceShop": "¥68.0",
  "priceDiscount": "¥42.5",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1308 },
{
  "name": "康派网红爆款女包欧美时尚斜跨包",
  "img": "http://qn.kemean.cn/upload/201911/19/5e857702a22a430c8834b85f4b358fd2?imageView2/0/w/800",
  "priceShop": "¥229.0",
  "priceDiscount": "¥59.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "康派皮具旗舰店",
  "objId": 797 },
{
  "name": "5支化妆刷",
  "img": "http://qn.kemean.cn/upload/201912/14/1526fd4ddd8448a99024d9d6357507fd?imageView2/0/w/800",
  "priceShop": "¥39.0",
  "priceDiscount": "¥23.8",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1309 },
{
  "name": "百雀羚焕采莹润亮肤面膜22ml*5片X3盒 20607",
  "img": "http://qn.kemean.cn/upload/201911/07/94c3e04a171f48959679aacca4a37aea?imageView2/0/w/800",
  "priceShop": "¥264.0",
  "priceDiscount": "¥188.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 286 },
{
  "name": "曼佗山茶籽沐浴套装450MLx2",
  "img": "http://qn.kemean.cn/upload/201911/19/14479805889e48a39bcfeb7022f85771?imageView2/0/w/800",
  "priceShop": "¥90.0",
  "priceDiscount": "¥75.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "曼佗茶油品牌店",
  "objId": 798 },
{
  "name": "女神双头套刷",
  "img": "http://qn.kemean.cn/upload/201912/14/0807c3059e0e4615a8514c0409cd929e?imageView2/0/w/800",
  "priceShop": "¥98.0",
  "priceDiscount": "¥50.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1310 },
{
  "name": "【香港直邮】SNP海洋燕窝水库保湿补水面膜11片/盒",
  "img": "http://qn.kemean.cn/upload/201911/07/dbd70b310a0e40f6a675184e3fa50a41?imageView2/0/w/800",
  "priceShop": "¥128.0",
  "priceDiscount": "¥75.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 287 },
{
  "name": "曼佗山茶籽沐浴套装750MLx2",
  "img": "http://qn.kemean.cn/upload/201911/19/50e100ac011c43ec8c767ac33ce40204?imageView2/0/w/800",
  "priceShop": "¥110.0",
  "priceDiscount": "¥85.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "曼佗茶油品牌店",
  "objId": 799 },
{
  "name": "多功能化妆刷",
  "img": "http://qn.kemean.cn/upload/201912/14/8974487c9a8f420b8aa9be2b70b8b1ee?imageView2/0/w/800",
  "priceShop": "¥189.0",
  "priceDiscount": "¥142.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1311 },
{
  "name": "【香港直邮】SHANGPREE香蒲丽绿公主眼膜贴祛淡化细纹黑眼圈60片/盒",
  "img": "http://qn.kemean.cn/upload/201911/07/78cf48795cc74f8f87be71efea07d20d?imageView2/0/w/800",
  "priceShop": "¥198.0",
  "priceDiscount": "¥108.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 288 },
{
  "name": "电动洗刷器",
  "img": "http://qn.kemean.cn/upload/201912/14/dc9a949eeb1d40c0ab81a1e0e9e7fab8?imageView2/0/w/800",
  "priceShop": "¥99.0",
  "priceDiscount": "¥75.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1312 },
{
  "name": "【香港直邮】SHANGPREE香蒲丽红参果修复眼膜贴淡化黑眼圈细皱纹60片/盒",
  "img": "http://qn.kemean.cn/upload/201911/07/64d8cf8f43314e4081a3efec98a24e67?imageView2/0/w/800",
  "priceShop": "¥198.0",
  "priceDiscount": "¥108.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 289 },
{
  "name": "康派2020新款真皮女包时尚简约欧美外贸单肩斜跨包（标准版）",
  "img": "http://qn.kemean.cn/upload/201911/20/f9c021bd4a084ee79519be65ed2e59f6?imageView2/0/w/800",
  "priceShop": "¥159.0",
  "priceDiscount": "¥59.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "康派皮具旗舰店",
  "objId": 801 },
{
  "name": "歪头洁面仪",
  "img": "http://qn.kemean.cn/upload/201912/14/626b0406c322474e967aaf4ec80b26f0?imageView2/0/w/800",
  "priceShop": "¥199.0",
  "priceDiscount": "¥103.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1313 },
{
  "name": "【香港直邮】Embryolisse保湿妆前乳隔离霜75ml",
  "img": "http://qn.kemean.cn/upload/201911/07/62e701937f544c60bdbfa91bff9ccbd8?imageView2/0/w/800",
  "priceShop": "¥198.0",
  "priceDiscount": "¥128.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 290 },
{
  "name": "圆贝洁面仪/4个色（红/粉/蓝/绿）",
  "img": "http://qn.kemean.cn/upload/201912/14/7c2ced4f143b400ba95562000a8b8e5d?imageView2/0/w/800",
  "priceShop": "¥299.0",
  "priceDiscount": "¥87.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1314 },
{
  "name": "【双11特促】百雀羚至臻皙白亮采眼部精华液20g118581",
  "img": "http://qn.kemean.cn/upload/201911/07/70bba58321214c3c8ec7f353da35a2ae?imageView2/0/w/800",
  "priceShop": "¥238.0",
  "priceDiscount": "¥88.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 291 },
{
  "name": "康派爆款热线小CK同款女式单肩包时尚PU斜挎包",
  "img": "http://qn.kemean.cn/upload/201911/20/e812b6672d5e4ab2abbb8011f1c4c8a6?imageView2/0/w/800",
  "priceShop": "¥399.0",
  "priceDiscount": "¥119.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "康派皮具旗舰店",
  "objId": 803 },
{
  "name": "眼部去皱美眼仪",
  "img": "http://qn.kemean.cn/upload/201912/14/3f84310be21a4da4a68b556050262a6f?imageView2/0/w/800",
  "priceShop": "¥88.0",
  "priceDiscount": "¥40.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1315 },
{
  "name": "康派时尚亮片女式小方包韩版PU斜挎包",
  "img": "http://qn.kemean.cn/upload/201911/20/689e9a82558e4639975c74e987881b9b?imageView2/0/w/800",
  "priceShop": "¥199.0",
  "priceDiscount": "¥69.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "康派皮具旗舰店",
  "objId": 804 },
{
  "name": "滚轮瘦脸仪",
  "img": "http://qn.kemean.cn/upload/201912/14/573af8aaaf744b9a8c111616059ceff4?imageView2/0/w/800",
  "priceShop": "¥88.0",
  "priceDiscount": "¥49.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1316 },
{
  "name": "百雀羚草本系列水能量焕彩洁容膏80g12756",
  "img": "http://qn.kemean.cn/upload/201911/07/c3be584f270a45caa023b1728b22c0cb?imageView2/0/w/800",
  "priceShop": "¥118.0",
  "priceDiscount": "¥98.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 293 },
{
  "name": "康派热销小CK同款时尚亮片女包五金流苏装饰女式斜挎包",
  "img": "http://qn.kemean.cn/upload/201911/20/0cd41dc4aabf4a2eafa30aa19999648e?imageView2/0/w/800",
  "priceShop": "¥399.0",
  "priceDiscount": "¥89.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "康派皮具旗舰店",
  "objId": 805 },
{
  "name": "荷叶黄金美容棒",
  "img": "http://qn.kemean.cn/upload/201912/14/c17f610aee0f4b43a421f8b7bd30d02b?imageView2/0/w/800",
  "priceShop": "¥88.0",
  "priceDiscount": "¥0.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1317 },
{
  "name": "百雀羚草本系列水能量焕颜美容液90ml12794",
  "img": "http://qn.kemean.cn/upload/201911/07/0e97758b581642ad966f3d68dcb9d202?imageView2/0/w/800",
  "priceShop": "¥188.0",
  "priceDiscount": "¥168.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 294 },
{
  "name": "咪然 2019现磨鲜米 东北大米 珍珠粥米 黑龙江原产地饭香珍珠米5kg",
  "img": "http://qn.kemean.cn/upload/201912/14/ef812630a686486286009a7d0b589741?imageView2/0/w/800",
  "priceShop": "¥108.0",
  "priceDiscount": "¥77.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1318 },
{
  "name": "原创设计北欧后现代简约客厅/卧室吊灯",
  "img": "http://qn.kemean.cn/upload/201912/31/a87b7e0362cb4da090ed9e99509e5acd?imageView2/0/w/800",
  "priceShop": "¥720.0",
  "priceDiscount": "¥390.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1063 },
{
  "name": "咪然 稻花香香米五常大米 东北大米10斤 黑龙江原产地直供现磨新米 真空袋装5kg",
  "img": "http://qn.kemean.cn/upload/201912/14/3b16c032cb9e4d1a8be4b7c08abad6e0?imageView2/0/w/800",
  "priceShop": "¥135.0",
  "priceDiscount": "¥128.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1319 },
{
  "name": "咪然 东北直供长粒香米5斤 2019新上市现磨鲜米 东北大米 黑龙江大米2.5kg",
  "img": "http://qn.kemean.cn/upload/201912/14/05dfe010ad564ecabe410ad0e4cc4334?imageView2/0/w/800",
  "priceShop": "¥68.0",
  "priceDiscount": "¥59.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1320 },
{
  "name": "优妮护发喷雾修复干燥毛躁免洗柔顺顺滑精华素营养水保湿补水精油",
  "img": "http://qn.kemean.cn/upload/201911/20/800a2d0440f2470f99e81738e6f067bc?imageView2/0/w/800",
  "priceShop": "¥39.0",
  "priceDiscount": "¥29.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "广州聚惠商贸有限公司",
  "objId": 809 },
{
  "name": "原创设计北欧后现代简约客厅/卧室吊灯",
  "img": "http://qn.kemean.cn/upload/201912/31/8fa8353b56814d3e8c77bd1e751d8102?imageView2/0/w/800",
  "priceShop": "¥1020.0",
  "priceDiscount": "¥549.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1065 },
{
  "name": "咪然 东北直供现磨鲜米 长粒香米 东北大米 原粮地直供真空包装大米5KG",
  "img": "http://qn.kemean.cn/upload/201912/14/56bc654a255449d1b02287bd3989ab71?imageView2/0/w/800",
  "priceShop": "¥115.0",
  "priceDiscount": "¥97.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1321 },
{
  "name": "优妮啫喱水保湿定型发蜡男女士卷发定型保湿亮泽持久留香发胶",
  "img": "http://qn.kemean.cn/upload/201911/20/a275e311bbda400780268f3267512aaa?imageView2/0/w/800",
  "priceShop": "¥35.0",
  "priceDiscount": "¥28.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "广州聚惠商贸有限公司",
  "objId": 810 },
{
  "name": "咪然东北大米10斤正宗五常稻花香香米五常水稻研究所监制现磨新米原粮原产地直发5kg",
  "img": "http://qn.kemean.cn/upload/201912/14/3747ab8442d94a5aa2ccfbf28b769988?imageView2/0/w/800",
  "priceShop": "¥235.0",
  "priceDiscount": "¥224.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1322 },
{
  "name": "【香港直邮】Dior迪奥口红烈焰蓝金唇膏口红 999#哑光",
  "img": "http://qn.kemean.cn/upload/201911/07/8182a0e2c4a44bda89d2a74f978ad642?imageView2/0/w/800",
  "priceShop": "¥358.0",
  "priceDiscount": "¥235.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 299 },
{
  "name": "优妮马油倒膜膏正品修复干枯补水顺滑防毛躁柔顺头发发膜焗油膏",
  "img": "http://qn.kemean.cn/upload/201911/20/54296f3f3c06477cba2494583b42fcf7?imageView2/0/w/800",
  "priceShop": "¥119.0",
  "priceDiscount": "¥89.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "广州聚惠商贸有限公司",
  "objId": 811 },
{
  "name": "咪然 东北大米 正宗五常有机稻花香大米 五常水稻研究所监制现磨新米 原粮原产地袋装2.5kg",
  "img": "http://qn.kemean.cn/upload/201912/14/81137fb5e99c4772aa25200dce71d8fd?imageView2/0/w/800",
  "priceShop": "¥168.0",
  "priceDiscount": "¥161.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1323 },
{
  "name": "优妮马油茶麸护发素修复干枯烫染受损补水柔顺顺滑男女正品改善毛躁",
  "img": "http://qn.kemean.cn/upload/201911/20/f9934932a41243a09b17e1cfc20753a7?imageView2/0/w/800",
  "priceShop": "¥57.0",
  "priceDiscount": "¥49.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "广州聚惠商贸有限公司",
  "objId": 812 },
{
  "name": "咪然 富硒现磨鲜米 煮粥大米 黑龙江大米 东北原粮地直供真空包装1kg袋装",
  "img": "http://qn.kemean.cn/upload/201912/14/4bf9cccdb8784923905e5bcc9b016e14?imageView2/0/w/800",
  "priceShop": "¥43.0",
  "priceDiscount": "¥33.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1324 },
{
  "name": "【香港直邮】Dior迪奥口红烈焰蓝金唇膏口红 999#滋润 ",
  "img": "http://qn.kemean.cn/upload/201911/07/bdff93f4312d47c7819996a08143c29c?imageView2/0/w/800",
  "priceShop": "¥358.0",
  "priceDiscount": "¥235.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 301 },
{
  "name": "优妮无患子洗发水沐浴露套装控油清爽去屑柔顺持久留香保湿60ML*2-保质期2021年11月",
  "img": "http://qn.kemean.cn/upload/201911/20/9cf228ceb3624dc1b0af765db9c1bccc?imageView2/0/w/800",
  "priceShop": "¥29.0",
  "priceDiscount": "¥19.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "广州聚惠商贸有限公司",
  "objId": 813 },
{
  "name": "原创设计北欧后现代简约客厅/卧室吊灯",
  "img": "http://qn.kemean.cn/upload/201912/31/e9fe7ece23984d9d9491c0444a52be24?imageView2/0/w/800",
  "priceShop": "¥1115.0",
  "priceDiscount": "¥605.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1069 },
{
  "name": "咪然 富硒现磨鲜米 煮粥大米 黑龙江大米 东北原粮地直供真空包装5kg袋装",
  "img": "http://qn.kemean.cn/upload/201912/14/a60dc4f6af914dfb86d582a4e909495e?imageView2/0/w/800",
  "priceShop": "¥150.0",
  "priceDiscount": "¥121.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1325 },
{
  "name": "优妮马油洗发水护发洗护去屑止痒修护持久留香去油随机体验装10ML8",
  "img": "http://qn.kemean.cn/upload/201911/20/b0e917eff801456ca7e8bc51b5e2bdd3?imageView2/0/w/800",
  "priceShop": "¥19.9",
  "priceDiscount": "¥9.9",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "广州聚惠商贸有限公司",
  "objId": 814 },
{
  "name": "原创设计北欧后现代简约卧室/客厅家居吊灯",
  "img": "http://qn.kemean.cn/upload/201911/29/d39ac4daa8124ef4b246895f697af1bf?imageView2/0/w/800",
  "priceShop": "¥655.0",
  "priceDiscount": "¥655.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1070 },
{
  "name": "咪然 富硒现磨鲜米 煮粥大米 黑龙江大米 东北原粮地直供真空包装2.5kg袋装",
  "img": "http://qn.kemean.cn/upload/201912/14/1079660b35b54abfb0dbaf4a6c2049d8?imageView2/0/w/800",
  "priceShop": "¥78.0",
  "priceDiscount": "¥77.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1326 },
{
  "name": "索芙特汉方1kg留香补水保湿留香补水保湿",
  "img": "http://qn.kemean.cn/upload/201911/28/557f0b949fe1420fb75e3aada5e514a5?imageView2/0/w/800",
  "priceShop": "¥29.9",
  "priceDiscount": "¥19.9",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "索芙特专卖店",
  "objId": 303 },
{
  "name": "优妮马油丝滑水漾洗发乳 无患子洗发水修复受损 水润柔顺",
  "img": "http://qn.kemean.cn/upload/201911/20/75a6f8c2c5054c1b8fde4241ed4185f9?imageView2/0/w/800",
  "priceShop": "¥55.0",
  "priceDiscount": "¥49.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "广州聚惠商贸有限公司",
  "objId": 815 },
{
  "name": "原创设计北欧后现代简约卧室/客厅家居马卡龙吊灯",
  "img": "http://qn.kemean.cn/upload/201911/29/b13b2f380eaa4e0ba34da60f906bef9f?imageView2/0/w/800",
  "priceShop": "¥1476.0",
  "priceDiscount": "¥799.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1071 },
{
  "name": "咪然 东北直供现磨鲜米 长粒香米 东北大米 原粮地直供真空包装大米5KG",
  "img": "http://qn.kemean.cn/upload/201912/14/f88edf6570ca414c96f63f3e854a9272?imageView2/0/w/800",
  "priceShop": "¥118.0",
  "priceDiscount": "¥103.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1327 },
{
  "name": "【香港直邮】Dior迪奥口红烈焰蓝金唇膏口红 999#金属",
  "img": "http://qn.kemean.cn/upload/201911/07/9646ac480d3045f98e626117842e51ac?imageView2/0/w/800",
  "priceShop": "¥358.0",
  "priceDiscount": "¥235.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 304 },
{
  "name": "原创设计北欧后现代卧室/客厅马卡龙家居吊灯",
  "img": "http://qn.kemean.cn/upload/201911/29/3a03f91e6d1b45eba80810ee8efdc40e?imageView2/0/w/800",
  "priceShop": "¥1615.0",
  "priceDiscount": "¥875.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1072 },
{
  "name": "无印良品 条纹系全棉色织水洗棉四件套 WYLP-TWQMSZ",
  "img": "http://qn.kemean.cn/upload/201912/14/6da690f90b294702b3d6ed5bbc889570?imageView2/0/w/800",
  "priceShop": "¥898.0",
  "priceDiscount": "¥434.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "左立直营店",
  "objId": 1328 },
{
  "name": "迪菲娜蜗牛套盒680ml+380ml03483新旧款随机发货",
  "img": "http://qn.kemean.cn/upload/201911/07/a078866a13e14c6db70d189ad2afeea5?imageView2/0/w/800",
  "priceShop": "¥118.0",
  "priceDiscount": "¥98.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 305 },
{
  "name": "原创设计北欧后现代卧室/客厅马卡龙家居吊灯",
  "img": "http://qn.kemean.cn/upload/201911/29/aad5d482e7b7458b9b8da52829ad006c?imageView2/0/w/800",
  "priceShop": "¥1989.0",
  "priceDiscount": "¥1079.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1073 },
{
  "name": "迪菲娜洋甘菊精油滋养修护沐浴乳液900ml03285",
  "img": "http://qn.kemean.cn/upload/201911/07/c5e53ff52e0e4e9b9dcc1a2d16b6b8e5?imageView2/0/w/800",
  "priceShop": "¥88.0",
  "priceDiscount": "¥68.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 306 },
{
  "name": "马油生姜洗发水去屑止痒茶麸无患子洗发露持久留香女控油男士随机220",
  "img": "http://qn.kemean.cn/upload/201911/20/3ce796b83c5243f98c0a59bb045c6f8f?imageView2/0/w/800",
  "priceShop": "¥39.0",
  "priceDiscount": "¥29.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "广州聚惠商贸有限公司",
  "objId": 818 },
{
  "name": "原创设计北欧后现代卧室/客厅马卡龙家居吊灯",
  "img": "http://qn.kemean.cn/upload/201911/29/599b62f144a9448388c51c4228ef50e7?imageView2/0/w/800",
  "priceShop": "¥1368.0",
  "priceDiscount": "¥741.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1074 },
{
  "name": "原创设计北欧后现代简约餐厅/楼道/酒吧吊灯",
  "img": "http://qn.kemean.cn/upload/201912/14/a3b62c71f2a245d38072d2d350f669e4?imageView2/0/w/800",
  "priceShop": "¥1029.0",
  "priceDiscount": "¥635.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1330 },
{
  "name": "原创设计北欧后现代卧室/客厅马卡龙家居吊灯",
  "img": "http://qn.kemean.cn/upload/201911/29/374bfea0a52a4dd6946b99f390dc772d?imageView2/0/w/800",
  "priceShop": "¥1640.0",
  "priceDiscount": "¥888.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1075 },
{
  "name": "原创设计北欧后现代简约餐厅/楼道/酒吧吊灯",
  "img": "http://qn.kemean.cn/upload/201912/14/990aa3b40f424c18a05448fe1fdb310c?imageView2/0/w/800",
  "priceShop": "¥1827.0",
  "priceDiscount": "¥1129.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1331 },
{
  "name": "迪菲娜茶树原液头皮净爽去屑洗发露680ml003421",
  "img": "http://qn.kemean.cn/upload/201911/07/3ab2cfa3332148f18d423e3adf118458?imageView2/0/w/800",
  "priceShop": "¥88.0",
  "priceDiscount": "¥68.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 308 },
{
  "name": "优妮马油丝滑水漾洗发乳 无患子洗发水修复受损 ",
  "img": "http://qn.kemean.cn/upload/201911/20/646aac0720de429d96da28a422d1a55a?imageView2/0/w/800",
  "priceShop": "¥39.0",
  "priceDiscount": "¥29.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "广州聚惠商贸有限公司",
  "objId": 820 },
{
  "name": "原创设计北欧后现代卧室/客厅马卡龙家居吊灯",
  "img": "http://qn.kemean.cn/upload/201911/29/48bebf93b1ac40539f4bcf2c73e66a1a?imageView2/0/w/800",
  "priceShop": "¥1995.0",
  "priceDiscount": "¥1080.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1076 },
{
  "name": "原创设计北欧后现代卧室/客厅/餐厅家居吊灯",
  "img": "http://qn.kemean.cn/upload/201912/14/0eb633c5524f4fe8943e6afcda38895c?imageView2/0/w/800",
  "priceShop": "¥1215.0",
  "priceDiscount": "¥750.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1332 },
{
  "name": "【香港直邮】Dior迪奥口红烈焰蓝金唇膏口红 520#星星色",
  "img": "http://qn.kemean.cn/upload/201911/07/adc159b72f92431bb344c48543154dcc?imageView2/0/w/800",
  "priceShop": "¥358.0",
  "priceDiscount": "¥235.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 309 },
{
  "name": "优妮洗发水沐浴露套装正品家庭装补水柔顺滑",
  "img": "http://qn.kemean.cn/upload/201911/20/e868e209f67c42ab92b5f9e3b8e55fab?imageView2/0/w/800",
  "priceShop": "¥89.0",
  "priceDiscount": "¥68.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "广州聚惠商贸有限公司",
  "objId": 821 },
{
  "name": "原创设计北欧后现代卧室/客厅马卡龙家居吊灯",
  "img": "http://qn.kemean.cn/upload/201911/29/6fd9a4fc1a2d436d82c99e61d7de484d?imageView2/0/w/800",
  "priceShop": "¥2253.0",
  "priceDiscount": "¥1220.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1077 },
{
  "name": "相宜本草红景天焕亮明星挚爱礼盒13861新旧款随机发货",
  "img": "http://qn.kemean.cn/upload/201911/07/e12a306e1cd14a2cb24ce3584b82a3ed?imageView2/0/w/800",
  "priceShop": "¥386.0",
  "priceDiscount": "¥328.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 310 },
{
  "name": "中国风传统剪纸 梅/兰/竹/菊四件套",
  "img": "http://qn.kemean.cn/upload/201911/30/6790b1ceb607442bae03022059b3428b?imageView2/0/w/800",
  "priceShop": "¥2000.0",
  "priceDiscount": "¥2000.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "商家云旗舰店",
  "objId": 1078 },
{
  "name": "原创设计北欧后现代卧室/客厅/餐厅家居吊灯",
  "img": "http://qn.kemean.cn/upload/201912/14/e680c26069344f1da7374ad4ee4c7308?imageView2/0/w/800",
  "priceShop": "¥1569.0",
  "priceDiscount": "¥969.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1334 },
{
  "name": "【香港直邮】Dior迪奥魅惑釉唇膏漆光唇彩口红740#",
  "img": "http://qn.kemean.cn/upload/201911/07/2cfd79762e1d423489efb6c38a819935?imageView2/0/w/800",
  "priceShop": "¥358.0",
  "priceDiscount": "¥235.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 311 },
{
  "name": "原创设计北欧后现代简约卧室/床头/楼道壁灯",
  "img": "http://qn.kemean.cn/upload/201911/30/1e31bbee9a844ba890b96e77e4797fbb?imageView2/0/w/800",
  "priceShop": "¥245.0",
  "priceDiscount": "¥132.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1079 },
{
  "name": "索芙特香水沐浴露670g持久留香改善粗糙干燥",
  "img": "http://qn.kemean.cn/upload/201911/28/7603fac0b14c4dc99ca81f0685e78d8c?imageView2/0/w/800",
  "priceShop": "¥39.0",
  "priceDiscount": "¥26.9",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "索芙特专卖店",
  "objId": 312 },
{
  "name": "原创设计北欧后现代简约卧室/床头/楼道壁灯",
  "img": "http://qn.kemean.cn/upload/201911/30/73bc6c5ad16742cc9b9bc6782d696a1e?imageView2/0/w/800",
  "priceShop": "¥333.0",
  "priceDiscount": "¥179.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1080 },
{
  "name": "欧莱雅复颜抗皱紧致滋润眼霜15ml",
  "img": "http://qn.kemean.cn/upload/201912/16/91985ec7a9ba46c79057b204f4373e34?imageView2/0/w/800",
  "priceShop": "¥240.0",
  "priceDiscount": "¥179.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1336 },
{
  "name": "【香港直邮】Dior迪奥魅惑釉唇膏漆光唇彩口红744#",
  "img": "http://qn.kemean.cn/upload/201911/07/984e34c064484ff4ad5d84977094b512?imageView2/0/w/800",
  "priceShop": "¥358.0",
  "priceDiscount": "¥235.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 313 },
{
  "name": "原创设计北欧后现代简约卧室/床头/楼道壁灯",
  "img": "http://qn.kemean.cn/upload/201912/02/313dcba0bcb545159616093d1fe33568?imageView2/0/w/800",
  "priceShop": "¥475.0",
  "priceDiscount": "¥255.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1081 },
{
  "name": "欧莱雅复颜清乳柔肤水130ml",
  "img": "http://qn.kemean.cn/upload/201912/16/3b0cd2a5738f4986929a26adada02084?imageView2/0/w/800",
  "priceShop": "¥190.0",
  "priceDiscount": "¥169.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1337 },
{
  "name": "【香港直邮】Dior迪奥粉漾诱惑变色润唇膏口红001#粉色",
  "img": "http://qn.kemean.cn/upload/201911/07/e732e2e9b08a44c6ba2d826a69abcd78?imageView2/0/w/800",
  "priceShop": "¥298.0",
  "priceDiscount": "¥215.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 314 },
{
  "name": "原创设计北欧后现代简约卧室/床头/书房/客厅家居台灯",
  "img": "http://qn.kemean.cn/upload/201912/02/76a2505a5f784b799710644d4d8c6c86?imageView2/0/w/800",
  "priceShop": "¥309.0",
  "priceDiscount": "¥169.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1082 },
{
  "name": "欧莱雅清润葡萄籽保湿柔肤水130ml",
  "img": "http://qn.kemean.cn/upload/201912/16/07925ec78323490d802971828a0df666?imageView2/0/w/800",
  "priceShop": "¥155.0",
  "priceDiscount": "¥99.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1338 },
{
  "name": "【香港直邮】Dior迪奥粉漾诱惑变色润唇膏口红004#橘色",
  "img": "http://qn.kemean.cn/upload/201911/07/adf83e68c1d64aacb94c9ead6a3d9d8c?imageView2/0/w/800",
  "priceShop": "¥298.0",
  "priceDiscount": "¥215.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 315 },
{
  "name": "原创设计北欧后现代简约卧室/床头/书房/客厅家居台灯",
  "img": "http://qn.kemean.cn/upload/201912/02/4908be5dcd4646acb4655b3583767f4f?imageView2/0/w/800",
  "priceShop": "¥402.0",
  "priceDiscount": "¥219.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1083 },
{
  "name": "欧莱雅小黑瓶青春密码酵素精华肌底液30ml/50ml/70ml",
  "img": "http://qn.kemean.cn/upload/201912/16/f9de32afdd504a41bc8e2545efe0da44?imageView2/0/w/800",
  "priceShop": "¥280.0",
  "priceDiscount": "¥199.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1339 },
{
  "name": "相宜本草睡莲水灵肌沁润臻享礼盒13571新旧款随机发货",
  "img": "http://qn.kemean.cn/upload/201911/07/76b56c2e63e440b08189fb4ca2406db3?imageView2/0/w/800",
  "priceShop": "¥458.0",
  "priceDiscount": "¥428.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 316 },
{
  "name": "原创设计北欧后现代简约卧室/床头/书房/客厅家居台灯",
  "img": "http://qn.kemean.cn/upload/201912/02/ad7975f7692b4c6090e4ee31cf0434cb?imageView2/0/w/800",
  "priceShop": "¥285.0",
  "priceDiscount": "¥155.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1084 },
{
  "name": "欧莱雅小黑瓶青春密码酵素精华肌底液30ml/50ml/70ml",
  "img": "http://qn.kemean.cn/upload/201912/16/f9de32afdd504a41bc8e2545efe0da44?imageView2/0/w/800",
  "priceShop": "¥280.0",
  "priceDiscount": "¥199.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1340 },
{
  "name": "【香港直邮】YSL圣罗兰方管口红 1#正红色",
  "img": "http://qn.kemean.cn/upload/201911/07/75b6f1465e4a46e8a9ded38f7602dcb5?imageView2/0/w/800",
  "priceShop": "¥398.0",
  "priceDiscount": "¥229.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 317 },
{
  "name": "原创设计北欧后现代简约卧室/床头/楼道壁灯",
  "img": "http://qn.kemean.cn/upload/201912/02/1a99dee3d8854778ad484c3dc08e21c3?imageView2/0/w/800",
  "priceShop": "¥210.0",
  "priceDiscount": "¥115.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1085 },
{
  "name": "欧莱雅清润葡萄籽保湿乳液110ml",
  "img": "http://qn.kemean.cn/upload/201912/16/904788dc20234d11aec1d4e02724e477?imageView2/0/w/800",
  "priceShop": "¥169.0",
  "priceDiscount": "¥129.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1341 },
{
  "name": "相宜本草红景天焕亮精华液40g10396",
  "img": "http://qn.kemean.cn/upload/201911/07/00032dee7a734d8f97bcdf06d109d35f?imageView2/0/w/800",
  "priceShop": "¥238.0",
  "priceDiscount": "¥198.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 318 },
{
  "name": "原创设计北欧后现代简约卧室/床头/楼道壁灯",
  "img": "http://qn.kemean.cn/upload/201912/02/0d296f900f974d7f8147f6fdb9fd8368?imageView2/0/w/800",
  "priceShop": "¥339.0",
  "priceDiscount": "¥185.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1086 },
{
  "name": "【香港直邮】YSL圣罗兰方管口红 13#橘红色",
  "img": "http://qn.kemean.cn/upload/201911/07/11bd0775e75a4f1587602e7d33ded2fc?imageView2/0/w/800",
  "priceShop": "¥398.0",
  "priceDiscount": "¥229.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 319 },
{
  "name": "原创设计北欧后现代简约客厅/卧室/书房/阳台落地灯",
  "img": "http://qn.kemean.cn/upload/201912/02/0edf7250aecd4152bd2462604e20044b?imageView2/0/w/800",
  "priceShop": "¥719.0",
  "priceDiscount": "¥469.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1087 },
{
  "name": "欧莱雅清润葡萄籽保湿特润凝霜50ml",
  "img": "http://qn.kemean.cn/upload/201912/16/1b263aa4f63643fa9d7a61a7d00f9957?imageView2/0/w/800",
  "priceShop": "¥160.0",
  "priceDiscount": "¥129.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1343 },
{
  "name": "【香港直邮】YSL圣罗兰方管口红 17#西柚粉",
  "img": "http://qn.kemean.cn/upload/201911/07/5cc63b5622b54b0eb2d9b8526d50eecd?imageView2/0/w/800",
  "priceShop": "¥398.0",
  "priceDiscount": "¥229.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 320 },
{
  "name": "原创设计北欧后现代简约客厅/楼梯灯螺旋吊灯",
  "img": "http://qn.kemean.cn/upload/201912/02/d96689596701484787e7974096f60541?imageView2/0/w/800",
  "priceShop": "¥854.0",
  "priceDiscount": "¥459.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1088 },
{
  "name": "欧莱雅男士水能保湿强润霜50ml",
  "img": "http://qn.kemean.cn/upload/201912/16/62bdcd6a1560460788c2a7111b5d6549?imageView2/0/w/800",
  "priceShop": "¥79.0",
  "priceDiscount": "¥59.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1344 },
{
  "name": "【香港直邮】YSL圣罗兰方管口红 52#星星色",
  "img": "http://qn.kemean.cn/upload/201911/07/00a659269a72452d99228ce5a8528fdc?imageView2/0/w/800",
  "priceShop": "¥398.0",
  "priceDiscount": "¥229.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "帝耀美妆全球购",
  "objId": 321 },
{
  "name": "原创设计北欧后现代简约客厅/楼梯灯螺旋吊灯",
  "img": "http://qn.kemean.cn/upload/201912/02/285500eebd094aa9aa73cb16f3c88438?imageView2/0/w/800",
  "priceShop": "¥1290.0",
  "priceDiscount": "¥699.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1089 },
{
  "name": "欧莱雅复颜洁面乳125ml",
  "img": "http://qn.kemean.cn/upload/201912/16/eb78688166d44ab4aa5ec42ccce16c5c?imageView2/0/w/800",
  "priceShop": "¥129.0",
  "priceDiscount": "¥99.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1345 },
{
  "name": "相宜本草红景天幼白精华水120ml03442",
  "img": "http://qn.kemean.cn/upload/201911/07/1a3e9802b7644e79b629183a894d1b18?imageView2/0/w/800",
  "priceShop": "¥109.0",
  "priceDiscount": "¥88.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 322 },
{
  "name": "原创设计北欧后现代简约客厅/楼梯灯螺旋吊灯",
  "img": "http://qn.kemean.cn/upload/201912/02/e74757691c804b81aae3b206660139a8?imageView2/0/w/800",
  "priceShop": "¥2346.0",
  "priceDiscount": "¥1269.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1090 },
{
  "name": "欧莱雅清润葡萄籽水嫩洁面乳125ml",
  "img": "http://qn.kemean.cn/upload/201912/16/d2cead460a8847a3a9b63ac42757e37c?imageView2/0/w/800",
  "priceShop": "¥109.0",
  "priceDiscount": "¥78.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1346 },
{
  "name": "相宜本草红景天幼白精华乳120g03466",
  "img": "http://qn.kemean.cn/upload/201911/07/2402e48191214f13a3862694a2a676ed?imageView2/0/w/800",
  "priceShop": "¥119.0",
  "priceDiscount": "¥98.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 323 },
{
  "name": "原创设计北欧后现代简约餐厅书房吊灯",
  "img": "http://qn.kemean.cn/upload/201912/02/6f4ecc2640844b9ba3d75cd326713fd2?imageView2/0/w/800",
  "priceShop": "¥525.0",
  "priceDiscount": "¥284.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "和光时创旗舰店",
  "objId": 1091 },
{
  "name": "欧莱雅复颜紧致滋润晚霜50ml",
  "img": "http://qn.kemean.cn/upload/201912/16/8848d51d45fc479c98e85f471fc3a083?imageView2/0/w/800",
  "priceShop": "¥219.0",
  "priceDiscount": "¥169.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "九九自营店",
  "objId": 1347 },
{
  "name": "花迷.净颜睡莲净润卸妆水400ML （特供）90312",
  "img": "http://qn.kemean.cn/upload/201911/07/1b1cb9f784ba4faebff80b42849f7039?imageView2/0/w/800",
  "priceShop": "¥139.0",
  "priceDiscount": "¥88.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "美妆一号商城旗舰店",
  "objId": 324 },
{
  "name": "泉氏净水器水龙头过滤器家用厨房卫生间自来水滤水器前置净化水机",
  "img": "http://qn.kemean.cn/upload/201912/03/8223dd2c4f2c4297aca3b6716ea8d6fb?imageView2/0/w/800",
  "priceShop": "¥320.0",
  "priceDiscount": "¥108.0",
  "numSales": 0,
  "ptPrice": null,
  "shopName": "深圳市泉氏清科技有限公司",
  "objId": 1092 }];exports.default = _default;

/***/ }),

/***/ 185:
/*!***********************************************************************!*\
  !*** D:/work/test/ygctour/components/mescroll-uni/mescroll-mixins.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; // mescroll-body 和 mescroll-uni 通用

// import MescrollUni from "./mescroll-uni.vue";
// import MescrollBody from "./mescroll-body.vue";

var MescrollMixin = {
  // components: { // 非H5端无法通过mixin注册组件, 只能在main.js中注册全局组件或具体界面中注册
  // 	MescrollUni,
  // 	MescrollBody
  // },
  data: function data() {
    return {
      mescroll: null //mescroll实例对象
    };
  },
  // 注册系统自带的下拉刷新 (配置down.native为true时生效, 还需在pages配置enablePullDownRefresh:true;详请参考mescroll-native的案例)
  onPullDownRefresh: function onPullDownRefresh() {
    this.mescroll && this.mescroll.onPullDownRefresh();
  },
  // 注册列表滚动事件,用于判定在顶部可下拉刷新,在指定位置可显示隐藏回到顶部按钮 (此方法为页面生命周期,无法在子组件中触发, 仅在mescroll-body生效)
  onPageScroll: function onPageScroll(e) {
    this.mescroll && this.mescroll.onPageScroll(e);
  },
  // 注册滚动到底部的事件,用于上拉加载 (此方法为页面生命周期,无法在子组件中触发, 仅在mescroll-body生效)
  onReachBottom: function onReachBottom() {
    this.mescroll && this.mescroll.onReachBottom();
  },
  methods: {
    // mescroll组件初始化的回调,可获取到mescroll对象
    mescrollInit: function mescrollInit(mescroll) {
      this.mescroll = mescroll;
      this.mescrollInitByRef(); // 兼容字节跳动小程序
    },
    // 以ref的方式初始化mescroll对象 (兼容字节跳动小程序: http://www.mescroll.com/qa.html?v=20200107#q26)
    mescrollInitByRef: function mescrollInitByRef() {
      if (!this.mescroll || !this.mescroll.resetUpScroll) {
        var mescrollRef = this.$refs.mescrollRef;
        if (mescrollRef) this.mescroll = mescrollRef.mescroll;
      }
    },
    // 下拉刷新的回调
    downCallback: function downCallback() {
      // mixin默认resetUpScroll
      this.mescroll.resetUpScroll();
    },
    // 上拉加载的回调
    upCallback: function upCallback() {var _this = this;
      // mixin默认延时500自动结束加载
      setTimeout(function () {
        _this.mescroll.endErr();
      }, 500);
    } },

  mounted: function mounted() {
    this.mescrollInitByRef(); // 兼容字节跳动小程序, 避免未设置@init或@init此时未能取到ref的情况
  } };var _default =



MescrollMixin;exports.default = _default;

/***/ }),

/***/ 19:
/*!***********************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/request/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _deepMerge = _interopRequireDefault(__webpack_require__(/*! ../function/deepMerge */ 20));
var _test = _interopRequireDefault(__webpack_require__(/*! ../function/test */ 22));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var
Request = /*#__PURE__*/function () {_createClass(Request, [{ key: "setConfig",
    // 设置全局默认配置
    value: function setConfig(customConfig) {
      // 深度合并对象，否则会造成对象深层属性丢失
      this.config = (0, _deepMerge.default)(this.config, customConfig);
    }

    // 主要请求部分
  }, { key: "request", value: function request() {var _this = this;var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // 检查请求拦截
      if (this.interceptor.request && typeof this.interceptor.request === 'function') {
        var tmpConfig = {};
        var interceptorReuest = this.interceptor.request(options);
        if (interceptorReuest === false) {
          return false;
        }
        this.options = interceptorReuest;
      }

      options.dataType = options.dataType || this.config.dataType;
      options.responseType = options.responseType || this.config.responseType;
      options.url = options.url || '';
      options.params = options.params || {};
      options.header = Object.assign(this.config.header, options.header);
      options.method = options.method || this.config.method;

      return new Promise(function (resolve, reject) {
        options.complete = function (response) {
          // 请求返回后，隐藏loading(如果请求返回快的话，可能会没有loading)
          uni.hideLoading();
          // 清除定时器，如果请求回来了，就无需loading
          clearTimeout(_this.config.timer);
          _this.timer = null;
          // 判断用户对拦截返回数据的要求，如果originalData为true，返回所有的数据(response)到拦截器，否则只返回response.data
          if (_this.config.originalData) {
            // 判断是否存在拦截器
            if (_this.interceptor.response && typeof _this.interceptor.response === 'function') {
              var resInterceptors = _this.interceptor.response(response);
              // 如果拦截器不返回false，就将拦截器返回的内容给this.$u.post的then回调
              if (resInterceptors !== false) {
                resolve(resInterceptors);
              } else {
                // 如果拦截器返回false，意味着拦截器定义者认为返回有问题，直接接入catch回调
                reject(response);
              }
            } else {
              // 如果要求返回原始数据，就算没有拦截器，也返回最原始的数据
              resolve(response);
            }
          } else {
            if (response.statusCode == 200) {
              if (_this.interceptor.response && typeof _this.interceptor.response === 'function') {
                var _resInterceptors = _this.interceptor.response(response.data);
                if (_resInterceptors !== false) {
                  resolve(_resInterceptors);
                } else {
                  reject(response.data);
                }
              } else {
                // 如果不是返回原始数据(originalData=false)，且没有拦截器的情况下，返回纯数据给then回调
                resolve(response.data);
              }
            } else {
              // 不返回原始数据的情况下，服务器状态码不为200，modal弹框提示
              if (response.errMsg) {
                uni.showModal({
                  title: response.errMsg });

              }
              reject(response);
            }
          }
        };

        // 判断用户传递的URL是否/开头,如果不是,加上/，这里使用了uView的test.js验证库的url()方法
        options.url = _test.default.url(options.url) ? options.url : _this.config.baseUrl + (options.url.indexOf('/') == 0 ?
        options.url : '/' + options.url);

        // 是否显示loading
        // 加一个是否已有timer定时器的判断，否则有两个同时请求的时候，后者会清除前者的定时器id
        // 而没有清除前者的定时器，导致前者超时，一直显示loading
        if (_this.config.showLoading && !_this.config.timer) {
          _this.config.timer = setTimeout(function () {
            uni.showLoading({
              title: _this.config.loadingText,
              mask: _this.config.loadingMask });

            _this.config.timer = null;
          }, _this.config.loadingTime);
        }
        uni.request(options);
      });
    } }]);

  function Request() {var _this2 = this;_classCallCheck(this, Request);
    this.config = {
      baseUrl: '', // 请求的根域名
      // 默认的请求头
      header: {},
      method: 'POST',
      // 设置为json，返回后uni.request会对数据进行一次JSON.parse
      dataType: 'json',
      // 此参数无需处理，因为5+和支付宝小程序不支持，默认为text即可
      responseType: 'text',
      showLoading: true, // 是否显示请求中的loading
      loadingText: '请求中...',
      loadingTime: 800, // 在此时间内，请求还没回来的话，就显示加载中动画，单位ms
      timer: null, // 定时器
      originalData: false, // 是否在拦截器中返回服务端的原始数据，见文档说明
      loadingMask: true // 展示loading的时候，是否给一个透明的蒙层，防止触摸穿透
    };

    // 拦截器
    this.interceptor = {
      // 请求前的拦截
      request: null,
      // 请求后的拦截
      response: null };


    // get请求
    this.get = function (url) {var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var header = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return _this2.request({
        method: 'GET',
        url: url,
        header: header,
        data: data });

    };

    // post请求
    this.post = function (url) {var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var header = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return _this2.request({
        url: url,
        method: 'POST',
        header: header,
        data: data });

    };

    // put请求，不支持支付宝小程序(HX2.6.15)
    this.put = function (url) {var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var header = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return _this2.request({
        url: url,
        method: 'PUT',
        header: header,
        data: data });

    };

    // delete请求，不支持支付宝和头条小程序(HX2.6.15)
    this.delete = function (url) {var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var header = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return _this2.request({
        url: url,
        method: 'DELETE',
        header: header,
        data: data });

    };
  }return Request;}();var _default =

new Request();exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-baidu/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 2:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * Vue.js v2.6.11
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    {
      if(vm.$scope && vm.$scope.is){
        return vm.$scope.is
      }
    }
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  // fixed by xxxxxx (nvue vuex)
  /* eslint-disable no-undef */
  if(typeof SharedObject !== 'undefined'){
    this.id = SharedObject.uid++;
  } else {
    this.id = uid++;
  }
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.SharedObject.target) {
    Dep.SharedObject.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
// fixed by xxxxxx (nvue shared vuex)
/* eslint-disable no-undef */
Dep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};
Dep.SharedObject.target = null;
Dep.SharedObject.targetStack = [];

function pushTarget (target) {
  Dep.SharedObject.targetStack.push(target);
  Dep.SharedObject.target = target;
}

function popTarget () {
  Dep.SharedObject.targetStack.pop();
  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑
        if(value.push !== value.__proto__.push){
          copyAugment(value, arrayMethods, arrayKeys);
        } else {
          protoAugment(value, arrayMethods);
        }
      }
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.SharedObject.target) { // fixed by xxxxxx
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if ( true && customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if ( true &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     true && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if ( true &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     true && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (true) {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else if (true) {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else if (true) {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if ( true && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (
    true
  ) {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if ( true && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  if (true) {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (true) {
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals. ' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
       true && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

/*  */

// fixed by xxxxxx (mp properties)
function extractPropertiesFromVNodeData(data, Ctor, res, context) {
  var propOptions = Ctor.options.mpOptions && Ctor.options.mpOptions.properties;
  if (isUndef(propOptions)) {
    return res
  }
  var externalClasses = Ctor.options.mpOptions.externalClasses || [];
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      var result = checkProp(res, props, key, altKey, true) ||
          checkProp(res, attrs, key, altKey, false);
      // externalClass
      if (
        result &&
        res[key] &&
        externalClasses.indexOf(altKey) !== -1 &&
        context[camelize(res[key])]
      ) {
        // 赋值 externalClass 真正的值(模板里 externalClass 的值可能是字符串)
        res[key] = context[camelize(res[key])];
      }
    }
  }
  return res
}

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag,
  context// fixed by xxxxxx
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    // fixed by xxxxxx
    return extractPropertiesFromVNodeData(data, Ctor, {}, context)
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (true) {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  // fixed by xxxxxx
  return extractPropertiesFromVNodeData(data, Ctor, res, context)
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else if (true) {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page
      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){
        (slots['page'] || (slots['page'] = [])).push(child);
      }else{
        (slots.default || (slots.default = [])).push(child);
      }
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i, i, i); // fixed by xxxxxx
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i, i, i); // fixed by xxxxxx
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length, i++, i)); // fixed by xxxxxx
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i, i); // fixed by xxxxxx
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if ( true && !isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    // fixed by xxxxxx app-plus scopedSlot
    nodes = scopedSlotFn(props, this, props._i) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
       true && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      callHook(componentInstance, 'onServiceCreated');
      callHook(componentInstance, 'onServiceAttached');
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (true) {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag, context); // fixed by xxxxxx

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
     true && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if ( true &&
    isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if ( true && isDef(data) && isDef(data.nativeOn)) {
        warn(
          ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
          context
        );
      }
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (true) {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
       true && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                 true
                  ? ("timeout (" + (res.timeout) + "ms)")
                  : undefined
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (true) {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (true) {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }
  
  // fixed by xxxxxx update properties(mp runtime)
  vm._$updateProperties && vm._$updateProperties(vm);
  
  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (true) {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if ( true && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true
    ? expOrFn.toString()
    : undefined;
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
       true && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (true) {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          {
            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn
                return
            }
            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警
            if(
                key === 'value' && 
                Array.isArray(vm.$options.behaviors) &&
                vm.$options.behaviors.indexOf('uni://form-field') !== -1
              ){
              return
            }
            if(vm._getFormData){
              return
            }
            var $parent = vm.$parent;
            while($parent){
              if($parent.__next_tick_pending){
                return  
              }
              $parent = $parent.$parent;
            }
          }
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    } else {}
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
     true && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
       true && warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if ( true && getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if ( true &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.SharedObject.target) {// fixed by xxxxxx
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (true) {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (true) {
      initProxy(vm);
    } else {}
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    !vm._$fallback && initInjections(vm); // resolve injections before data/props  
    initState(vm);
    !vm._$fallback && initProvide(vm); // resolve provide after data/props
    !vm._$fallback && callHook(vm, 'created');      

    /* istanbul ignore if */
    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if ( true &&
    !(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (true) {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.11';

/**
 * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js
 */
var ARRAYTYPE = '[object Array]';
var OBJECTTYPE = '[object Object]';
// const FUNCTIONTYPE = '[object Function]'

function diff(current, pre) {
    var result = {};
    syncKeys(current, pre);
    _diff(current, pre, '', result);
    return result
}

function syncKeys(current, pre) {
    if (current === pre) { return }
    var rootCurrentType = type(current);
    var rootPreType = type(pre);
    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {
        if(Object.keys(current).length >= Object.keys(pre).length){
            for (var key in pre) {
                var currentValue = current[key];
                if (currentValue === undefined) {
                    current[key] = null;
                } else {
                    syncKeys(currentValue, pre[key]);
                }
            }
        }
    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {
        if (current.length >= pre.length) {
            pre.forEach(function (item, index) {
                syncKeys(current[index], item);
            });
        }
    }
}

function _diff(current, pre, path, result) {
    if (current === pre) { return }
    var rootCurrentType = type(current);
    var rootPreType = type(pre);
    if (rootCurrentType == OBJECTTYPE) {
        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {
            setResult(result, path, current);
        } else {
            var loop = function ( key ) {
                var currentValue = current[key];
                var preValue = pre[key];
                var currentType = type(currentValue);
                var preType = type(preValue);
                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {
                    if (currentValue != pre[key]) {
                        setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                    }
                } else if (currentType == ARRAYTYPE) {
                    if (preType != ARRAYTYPE) {
                        setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                    } else {
                        if (currentValue.length < preValue.length) {
                            setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                        } else {
                            currentValue.forEach(function (item, index) {
                                _diff(item, preValue[index], (path == '' ? '' : path + ".") + key + '[' + index + ']', result);
                            });
                        }
                    }
                } else if (currentType == OBJECTTYPE) {
                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {
                        setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                    } else {
                        for (var subKey in currentValue) {
                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + ".") + key + '.' + subKey, result);
                        }
                    }
                }
            };

            for (var key in current) loop( key );
        }
    } else if (rootCurrentType == ARRAYTYPE) {
        if (rootPreType != ARRAYTYPE) {
            setResult(result, path, current);
        } else {
            if (current.length < pre.length) {
                setResult(result, path, current);
            } else {
                current.forEach(function (item, index) {
                    _diff(item, pre[index], path + '[' + index + ']', result);
                });
            }
        }
    } else {
        setResult(result, path, current);
    }
}

function setResult(result, k, v) {
    // if (type(v) != FUNCTIONTYPE) {
        result[k] = v;
    // }
}

function type(obj) {
    return Object.prototype.toString.call(obj)
}

/*  */

function flushCallbacks$1(vm) {
    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {
        if (Object({"NODE_ENV":"development","VUE_APP_PLATFORM":"mp-baidu","BASE_URL":"/"}).VUE_APP_DEBUG) {
            var mpInstance = vm.$scope;
            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +
                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');
        }
        var copies = vm.__next_tick_callbacks.slice(0);
        vm.__next_tick_callbacks.length = 0;
        for (var i = 0; i < copies.length; i++) {
            copies[i]();
        }
    }
}

function hasRenderWatcher(vm) {
    return queue.find(function (watcher) { return vm._watcher === watcher; })
}

function nextTick$1(vm, cb) {
    //1.nextTick 之前 已 setData 且 setData 还未回调完成
    //2.nextTick 之前存在 render watcher
    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {
        if(Object({"NODE_ENV":"development","VUE_APP_PLATFORM":"mp-baidu","BASE_URL":"/"}).VUE_APP_DEBUG){
            var mpInstance = vm.$scope;
            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +
                ']:nextVueTick');
        }
        return nextTick(cb, vm)
    }else{
        if(Object({"NODE_ENV":"development","VUE_APP_PLATFORM":"mp-baidu","BASE_URL":"/"}).VUE_APP_DEBUG){
            var mpInstance$1 = vm.$scope;
            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +
                ']:nextMPTick');
        }
    }
    var _resolve;
    if (!vm.__next_tick_callbacks) {
        vm.__next_tick_callbacks = [];
    }
    vm.__next_tick_callbacks.push(function () {
        if (cb) {
            try {
                cb.call(vm);
            } catch (e) {
                handleError(e, vm, 'nextTick');
            }
        } else if (_resolve) {
            _resolve(vm);
        }
    });
    // $flow-disable-line
    if (!cb && typeof Promise !== 'undefined') {
        return new Promise(function (resolve) {
            _resolve = resolve;
        })
    }
}

/*  */

function cloneWithData(vm) {
  // 确保当前 vm 所有数据被同步
  var ret = Object.create(null);
  var dataKeys = [].concat(
    Object.keys(vm._data || {}),
    Object.keys(vm._computedWatchers || {}));

  dataKeys.reduce(function(ret, key) {
    ret[key] = vm[key];
    return ret
  }, ret);
  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据
  Object.assign(ret, vm.$mp.data || {});
  if (
    Array.isArray(vm.$options.behaviors) &&
    vm.$options.behaviors.indexOf('uni://form-field') !== -1
  ) { //form-field
    ret['name'] = vm.name;
    ret['value'] = vm.value;
  }

  return JSON.parse(JSON.stringify(ret))
}

var patch = function(oldVnode, vnode) {
  var this$1 = this;

  if (vnode === null) { //destroy
    return
  }
  if (this.mpType === 'page' || this.mpType === 'component') {
    var mpInstance = this.$scope;
    var data = Object.create(null);
    try {
      data = cloneWithData(this);
    } catch (err) {
      console.error(err);
    }
    data.__webviewId__ = mpInstance.data.__webviewId__;
    var mpData = Object.create(null);
    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据
      mpData[key] = mpInstance.data[key];
    });
    var diffData = this.$shouldDiffData === false ? data : diff(data, mpData);
    if (Object.keys(diffData).length) {
      if (Object({"NODE_ENV":"development","VUE_APP_PLATFORM":"mp-baidu","BASE_URL":"/"}).VUE_APP_DEBUG) {
        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +
          ']差量更新',
          JSON.stringify(diffData));
      }
      this.__next_tick_pending = true;
      mpInstance.setData(diffData, function () {
        this$1.__next_tick_pending = false;
        flushCallbacks$1(this$1);
      });
    } else {
      flushCallbacks$1(this);
    }
  }
};

/*  */

function createEmptyRender() {

}

function mountComponent$1(
  vm,
  el,
  hydrating
) {
  if (!vm.mpType) {//main.js 中的 new Vue
    return vm
  }
  if (vm.mpType === 'app') {
    vm.$options.render = createEmptyRender;
  }
  if (!vm.$options.render) {
    vm.$options.render = createEmptyRender;
    if (true) {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  
  !vm._$fallback && callHook(vm, 'beforeMount');

  var updateComponent = function () {
    vm._update(vm._render(), hydrating);
  };

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;
  return vm
}

/*  */

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/*  */

var MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];

function getTarget(obj, path) {
  var parts = path.split('.');
  var key = parts[0];
  if (key.indexOf('__$n') === 0) { //number index
    key = parseInt(key.replace('__$n', ''));
  }
  if (parts.length === 1) {
    return obj[key]
  }
  return getTarget(obj[key], parts.slice(1).join('.'))
}

function internalMixin(Vue) {

  Vue.config.errorHandler = function(err) {
    console.error(err);
    /* eslint-disable no-undef */
    var app = getApp();
    if (app && app.onError) {
      app.onError(err);
    }
  };

  var oldEmit = Vue.prototype.$emit;

  Vue.prototype.$emit = function(event) {
    if (this.$scope && event) {
      this.$scope['triggerEvent'](event, {
        __args__: toArray(arguments, 1)
      });
    }
    return oldEmit.apply(this, arguments)
  };

  Vue.prototype.$nextTick = function(fn) {
    return nextTick$1(this, fn)
  };

  MP_METHODS.forEach(function (method) {
    Vue.prototype[method] = function(args) {
      if (this.$scope && this.$scope[method]) {
        return this.$scope[method](args)
      }
      // mp-alipay
      if (typeof my === 'undefined') {
        return
      }
      if (method === 'createSelectorQuery') {
        /* eslint-disable no-undef */
        return my.createSelectorQuery(args)
      } else if (method === 'createIntersectionObserver') {
        /* eslint-disable no-undef */
        return my.createIntersectionObserver(args)
      }
      // TODO mp-alipay 暂不支持 selectAllComponents,selectComponent
    };
  });

  Vue.prototype.__init_provide = initProvide;

  Vue.prototype.__init_injections = initInjections;

  Vue.prototype.__call_hook = function(hook, args) {
    var vm = this;
    // #7573 disable dep collection when invoking lifecycle hooks
    pushTarget();
    var handlers = vm.$options[hook];
    var info = hook + " hook";
    var ret;
    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {
        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);
      }
    }
    if (vm._hasHookEvent) {
      vm.$emit('hook:' + hook, args);
    }
    popTarget();
    return ret
  };

  Vue.prototype.__set_model = function(target, key, value, modifiers) {
    if (Array.isArray(modifiers)) {
      if (modifiers.indexOf('trim') !== -1) {
        value = value.trim();
      }
      if (modifiers.indexOf('number') !== -1) {
        value = this._n(value);
      }
    }
    if (!target) {
      target = this;
    }
    target[key] = value;
  };

  Vue.prototype.__set_sync = function(target, key, value) {
    if (!target) {
      target = this;
    }
    target[key] = value;
  };

  Vue.prototype.__get_orig = function(item) {
    if (isPlainObject(item)) {
      return item['$orig'] || item
    }
    return item
  };

  Vue.prototype.__get_value = function(dataPath, target) {
    return getTarget(target || this, dataPath)
  };


  Vue.prototype.__get_class = function(dynamicClass, staticClass) {
    return renderClass(staticClass, dynamicClass)
  };

  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {
    if (!dynamicStyle && !staticStyle) {
      return ''
    }
    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);
    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;
    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + ":" + (styleObj[name])); }).join(';')
  };

  Vue.prototype.__map = function(val, iteratee) {
    //TODO 暂不考虑 string,number
    var ret, i, l, keys, key;
    if (Array.isArray(val)) {
      ret = new Array(val.length);
      for (i = 0, l = val.length; i < l; i++) {
        ret[i] = iteratee(val[i], i);
      }
      return ret
    } else if (isObject(val)) {
      keys = Object.keys(val);
      ret = Object.create(null);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[key] = iteratee(val[key], key, i);
      }
      return ret
    }
    return []
  };

}

/*  */

var LIFECYCLE_HOOKS$1 = [
    //App
    'onLaunch',
    'onShow',
    'onHide',
    'onUniNViewMessage',
    'onError',
    //Page
    'onLoad',
    // 'onShow',
    'onReady',
    // 'onHide',
    'onUnload',
    'onPullDownRefresh',
    'onReachBottom',
    'onTabItemTap',
    'onShareAppMessage',
    'onResize',
    'onPageScroll',
    'onNavigationBarButtonTap',
    'onBackPress',
    'onNavigationBarSearchInputChanged',
    'onNavigationBarSearchInputConfirmed',
    'onNavigationBarSearchInputClicked',
    //Component
    // 'onReady', // 兼容旧版本，应该移除该事件
    'onPageShow',
    'onPageHide',
    'onPageResize'
];
function lifecycleMixin$1(Vue) {

    //fixed vue-class-component
    var oldExtend = Vue.extend;
    Vue.extend = function(extendOptions) {
        extendOptions = extendOptions || {};

        var methods = extendOptions.methods;
        if (methods) {
            Object.keys(methods).forEach(function (methodName) {
                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {
                    extendOptions[methodName] = methods[methodName];
                    delete methods[methodName];
                }
            });
        }

        return oldExtend.call(this, extendOptions)
    };

    var strategies = Vue.config.optionMergeStrategies;
    var mergeHook = strategies.created;
    LIFECYCLE_HOOKS$1.forEach(function (hook) {
        strategies[hook] = mergeHook;
    });

    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;
}

/*  */

// install platform patch function
Vue.prototype.__patch__ = patch;

// public mount method
Vue.prototype.$mount = function(
    el ,
    hydrating 
) {
    return mountComponent$1(this, el, hydrating)
};

lifecycleMixin$1(Vue);
internalMixin(Vue);

/*  */

/* harmony default export */ __webpack_exports__["default"] = (Vue);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 3)))

/***/ }),

/***/ 20:
/*!****************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/deepMerge.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _deepClone = _interopRequireDefault(__webpack_require__(/*! ./deepClone */ 21));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// JS对象深度合并
function deepMerge() {var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  target = (0, _deepClone.default)(target);
  if (typeof target !== 'object' || typeof source !== 'object') return false;
  for (var prop in source) {
    if (!source.hasOwnProperty(prop)) continue;
    if (prop in target) {
      if (typeof target[prop] !== 'object') {
        target[prop] = source[prop];
      } else {
        if (typeof source[prop] !== 'object') {
          target[prop] = source[prop];
        } else {
          if (target[prop].concat && source[prop].concat) {
            target[prop] = target[prop].concat(source[prop]);
          } else {
            target[prop] = deepMerge(target[prop], source[prop]);
          }
        }
      }
    } else {
      target[prop] = source[prop];
    }
  }
  return target;
}var _default =

deepMerge;exports.default = _default;

/***/ }),

/***/ 21:
/*!****************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/deepClone.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; // 判断arr是否为一个数组，返回一个bool值
function isArray(arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
}

// 深度克隆
function deepClone(obj) {
  // 对常见的“非”值，直接返回原来值
  if ([null, undefined, NaN, false].includes(obj)) return obj;
  if (typeof obj !== "object" && typeof obj !== 'function') {
    //原始类型直接返回
    return obj;
  }
  var o = isArray(obj) ? [] : {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = typeof obj[i] === "object" ? deepClone(obj[i]) : obj[i];
    }
  }
  return o;
}var _default =

deepClone;exports.default = _default;

/***/ }),

/***/ 214:
/*!*********************************************************************************************!*\
  !*** ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/regenerator/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ 215);

/***/ }),

/***/ 215:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() {
  return this || (typeof self === "object" && self);
})() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(/*! ./runtime */ 216);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),

/***/ 216:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() {
    return this || (typeof self === "object" && self);
  })() || Function("return this")()
);


/***/ }),

/***/ 22:
/*!***********************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/test.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; /**
                                                                                                      * 验证电子邮箱格式
                                                                                                      */
function email(value) {
  return /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/.test(value);
}

/**
   * 验证手机格式
   */
function mobile(value) {
  return /^1[23456789]\d{9}$/.test(value);
}

/**
   * 验证URL格式
   */
function url(value) {
  return /^((https|http|ftp|rtsp|mms):\/\/)(([0-9a-zA-Z_!~*'().&=+$%-]+: )?[0-9a-zA-Z_!~*'().&=+$%-]+@)?(([0-9]{1,3}.){3}[0-9]{1,3}|([0-9a-zA-Z_!~*'()-]+.)*([0-9a-zA-Z][0-9a-zA-Z-]{0,61})?[0-9a-zA-Z].[a-zA-Z]{2,6})(:[0-9]{1,4})?((\/?)|(\/[0-9a-zA-Z_!~*'().;?:@&=+$,%#-]+)+\/?)$/.
  test(value);
}

/**
   * 验证日期格式
   */
function date(value) {
  return !/Invalid|NaN/.test(new Date(value).toString());
}

/**
   * 验证ISO类型的日期格式
   */
function dateISO(value) {
  return /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
}

/**
   * 验证十进制数字
   */
function number(value) {
  return /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
}

/**
   * 验证整数
   */
function digits(value) {
  return /^\d+$/.test(value);
}

/**
   * 验证身份证号码
   */
function idCard(value) {
  return /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/.test(
  value);
}

/**
   * 是否车牌号
   */
function carNo(value) {
  // 新能源车牌
  var xreg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/;
  // 旧车牌
  var creg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/;
  if (value.length === 7) {
    return creg.test(value);
  } else if (value.length === 8) {
    return xreg.test(value);
  } else {
    return false;
  }
}

/**
   * 金额,只允许2位小数
   */
function amount(value) {
  //金额，只允许保留两位小数
  return /^[1-9]\d*(,\d{3})*(\.\d{1,2})?$|^0\.\d{1,2}$/.test(value);
}

/**
   * 中文
   */
function chinese(value) {
  var reg = /^[\u4e00-\u9fa5]+$/gi;
  return reg.test(value);
}

/**
   * 只能输入字母
   */
function letter(value) {
  return /^[a-zA-Z]*$/.test(value);
}

/**
   * 只能是字母或者数字
   */
function enOrNum(value) {
  //英文或者数字
  var reg = /^[0-9a-zA-Z]*$/g;
  return reg.test(value);
}

/**
   * 验证是否包含某个值
   */
function contains(value, param) {
  return value.indexOf(param) >= 0;
}

/**
   * 验证一个值范围[min, max]
   */
function range(value, param) {
  return value >= param[0] && value <= param[1];
}

/**
   * 验证一个长度范围[min, max]
   */
function rangeLength(value, param) {
  return value.length >= param[0] && value.length <= param[1];
}

/**
   * 是否固定电话
   */
function landline(value) {
  var reg = /^\d{3,4}-\d{7,8}(-\d{3,4})?$/;
  return reg.test(value);
}

/**
   * 判断是否为空
   */
function empty(value) {
  switch (typeof value) {
    case 'undefined':
      return true;
    case 'string':
      if (value.replace(/(^[ \t\n\r]*)|([ \t\n\r]*$)/g, '').length == 0) return true;
      break;
    case 'boolean':
      if (!value) return true;
      break;
    case 'number':
      if (0 === value || isNaN(value)) return true;
      break;
    case 'object':
      if (null === value || value.length === 0) return true;
      for (var i in value) {
        return false;
      }
      return true;}

  return false;
}

/**
   * 是否json字符串
   */
function jsonString(value) {
  if (typeof value == 'string') {
    try {
      var obj = JSON.parse(value);
      if (typeof obj == 'object' && obj) {
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  }
  return false;
}


/**
   * 是否数组
   */
function array(value) {
  if (typeof Array.isArray === "function") {
    return Array.isArray(value);
  } else {
    return Object.prototype.toString.call(value) === "[object Array]";
  }
}


/**
   * 是否对象
   */
function object(value) {
  return Object.prototype.toString.call(value) === '[object Object]';
}var _default =


{
  email: email,
  mobile: mobile,
  url: url,
  date: date,
  dateISO: dateISO,
  number: number,
  digits: digits,
  idCard: idCard,
  carNo: carNo,
  amount: amount,
  chinese: chinese,
  letter: letter,
  enOrNum: enOrNum,
  contains: contains,
  range: range,
  rangeLength: rangeLength,
  empty: empty,
  isEmpty: empty,
  jsonString: jsonString,
  landline: landline,
  object: object,
  array: array };exports.default = _default;

/***/ }),

/***/ 23:
/*!******************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/queryParams.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; /**
                                                                                                      * 对象转url参数
                                                                                                      * @param {*} data,对象
                                                                                                      * @param {*} isPrefix,是否自动加上"?"
                                                                                                      */
function queryParams() {var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var isPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;var arrayFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'brackets';
  var prefix = isPrefix ? '?' : '';
  var _result = [];
  if (['indices', 'brackets', 'repeat', 'comma'].indexOf(arrayFormat) == -1) arrayFormat = 'brackets';var _loop = function _loop(
  key) {
    var value = data[key];
    // 去掉为空的参数
    if (['', undefined, null].indexOf(value) >= 0) {
      return "continue";
    }
    // 如果值为数组，另行处理
    if (value.constructor === Array) {
      // e.g. {ids: [1, 2, 3]}
      switch (arrayFormat) {
        case 'indices':
          // 结果: ids[0]=1&ids[1]=2&ids[2]=3
          for (var i = 0; i < value.length; i++) {
            _result.push(key + '[' + i + ']=' + value[i]);
          }
          break;
        case 'brackets':
          // 结果: ids[]=1&ids[]=2&ids[]=3
          value.forEach(function (_value) {
            _result.push(key + '[]=' + _value);
          });
          break;
        case 'repeat':
          // 结果: ids=1&ids=2&ids=3
          value.forEach(function (_value) {
            _result.push(key + '=' + _value);
          });
          break;
        case 'comma':
          // 结果: ids=1,2,3
          var commaStr = "";
          value.forEach(function (_value) {
            commaStr += (commaStr ? "," : "") + _value;
          });
          _result.push(key + '=' + commaStr);
          break;
        default:
          value.forEach(function (_value) {
            _result.push(key + '[]=' + _value);
          });}

    } else {
      _result.push(key + '=' + value);
    }};for (var key in data) {var _ret = _loop(key);if (_ret === "continue") continue;
  }
  return _result.length ? prefix + _result.join('&') : '';
}var _default =

queryParams;exports.default = _default;

/***/ }),

/***/ 24:
/*!************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/route.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _queryParams = _interopRequireDefault(__webpack_require__(/*! ../../libs/function/queryParams.js */ 23));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
/**
                                                                                                                                                                                                                                                                                            * 路由跳转
                                                                                                                                                                                                                                                                                            * 注意:本方法没有对跳转的回调函数进行封装
                                                                                                                                                                                                                                                                                            */
function route() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var config = {
    type: 'navigateTo',
    url: '',
    delta: 1, // navigateBack页面后退时,回退的层数
    params: {}, // 传递的参数
    animationType: 'pop-in', // 窗口动画,只在APP有效
    animationDuration: 300 // 窗口动画持续时间,单位毫秒,只在APP有效
  };
  config = Object.assign(config, options);
  // 如果url没有"/"开头，添加上，因为uni的路由跳转需要"/"开头
  if (config.url[0] != '/') config.url = '/' + config.url;
  // 判断是否有传递显式的参数,Object.keys转为数组并判断长度,switchTab类型时不能携带参数
  if (Object.keys(config.params).length && config.type != 'switchTab') {
    // 判断用户传递的url中，是否带有参数
    // 使用正则匹配，主要依据是判断是否有"/","?","="等，如“/page/index/index?name=mary"
    // 如果有url中有get参数，转换后无需带上"?"
    var query = '';
    if (/.*\/.*\?.*=.*/.test(config.url)) {
      // object对象转为get类型的参数
      query = (0, _queryParams.default)(config.params, false);
      // 因为已有get参数,所以后面拼接的参数需要带上"&"隔开
      config.url += "&" + query;
    } else {
      query = (0, _queryParams.default)(config.params);
      config.url += query;
    }
  }
  // 简写形式，把url和参数拼接起来
  if (typeof options === 'string' && typeof params == 'object') {
    var _query = '';
    if (/.*\/.*\?.*=.*/.test(options)) {
      // object对象转为get类型的参数
      _query = (0, _queryParams.default)(params, false);
      // 因为已有get参数,所以后面拼接的参数需要带上"&"隔开
      options += "&" + _query;
    } else {
      _query = (0, _queryParams.default)(params);
      options += _query;
    }
  }
  // 判断是否一个字符串，如果是，直接跳转(简写法)
  // 如果是中情形，默认第二个参数为对象形式的参数
  if (typeof options === 'string') {
    if (options[0] != '/') options = '/' + options;
    return uni.navigateTo({
      url: options });

  }
  // navigateTo类型的跳转
  if (config.type == 'navigateTo' || config.type == 'to') {
    return uni.navigateTo({
      url: config.url,
      animationType: config.animationType,
      animationDuration: config.animationDuration });

  }
  if (config.type == 'redirectTo' || config.type == 'redirect') {
    return uni.redirectTo({
      url: config.url });

  }
  if (config.type == 'switchTab' || config.type == 'tab') {
    return uni.switchTab({
      url: config.url });

  }
  if (config.type == 'reLaunch') {
    return uni.reLaunch({
      url: config.url });

  }
  if (config.type == 'navigateBack' || config.type == 'back') {
    return uni.navigateBack({
      delta: parseInt(config.delta ? config.delta : this.delta) });

  }
}var _default =

route;exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-baidu/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 25:
/*!*****************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/timeFormat.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;function timeFormat() {var timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;var fmt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'yyyy-mm-dd';
  // 其他更多是格式化有如下:
  // yyyy:mm:dd|yyyy:mm|yyyy年mm月dd日|yyyy年mm月dd日 hh时MM分等,可自定义组合
  timestamp = parseInt(timestamp);
  // 如果为null,则格式化当前时间
  if (!timestamp) timestamp = Number(new Date());
  // 判断用户输入的时间戳是秒还是毫秒,一般前端js获取的时间戳是毫秒(13位),后端传过来的为秒(10位)
  if (timestamp.toString().length == 10) timestamp *= 1000;
  var date = new Date(timestamp);
  var ret;
  var opt = {
    "y+": date.getFullYear().toString(), // 年
    "m+": (date.getMonth() + 1).toString(), // 月
    "d+": date.getDate().toString(), // 日
    "h+": date.getHours().toString(), // 时
    "M+": date.getMinutes().toString(), // 分
    "s+": date.getSeconds().toString() // 秒
    // 有其他格式化字符需求可以继续添加，必须转化成字符串
  };
  for (var k in opt) {
    ret = new RegExp("(" + k + ")").exec(fmt);
    if (ret) {
      fmt = fmt.replace(ret[1], ret[1].length == 1 ? opt[k] : opt[k].padStart(ret[1].length, "0"));
    };
  };
  return fmt;
}var _default =

timeFormat;exports.default = _default;

/***/ }),

/***/ 26:
/*!***************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/timeFrom.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _timeFormat = _interopRequireDefault(__webpack_require__(/*! ../../libs/function/timeFormat.js */ 25));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

/**
                                                                                                                                                                                                                                                                                          * 时间戳转为多久之前
                                                                                                                                                                                                                                                                                          * @param String timestamp 时间戳
                                                                                                                                                                                                                                                                                          * @param String | Boolean format 如果为时间格式字符串，超出一定时间范围，返回固定的时间格式；
                                                                                                                                                                                                                                                                                          * 如果为布尔值false，无论什么时间，都返回多久以前的格式
                                                                                                                                                                                                                                                                                          */
function timeFrom() {var timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'yyyy-mm-dd';
  if (timestamp == null) timestamp = Number(new Date());
  timestamp = parseInt(timestamp);
  // 判断用户输入的时间戳是秒还是毫秒,一般前端js获取的时间戳是毫秒(13位),后端传过来的为秒(10位)
  if (timestamp.toString().length == 10) timestamp *= 1000;
  var timer = new Date().getTime() - timestamp;
  timer = parseInt(timer / 1000);
  // 如果小于5分钟,则返回"刚刚",其他以此类推
  var tips = '';
  switch (true) {
    case timer < 300:
      tips = '刚刚';
      break;
    case timer >= 300 && timer < 3600:
      tips = parseInt(timer / 60) + '分钟前';
      break;
    case timer >= 3600 && timer < 86400:
      tips = parseInt(timer / 3600) + '小时前';
      break;
    case timer >= 86400 && timer < 2592000:
      tips = parseInt(timer / 86400) + '天前';
      break;
    default:
      // 如果format为false，则无论什么时间戳，都显示xx之前
      if (format === false) {
        if (timer >= 2592000 && timer < 365 * 86400) {
          tips = parseInt(timer / (86400 * 30)) + '个月前';
        } else {
          tips = parseInt(timer / (86400 * 365)) + '年前';
        }
      } else {
        tips = (0, _timeFormat.default)(timestamp, format);
      }}

  return tips;
}var _default =

timeFrom;exports.default = _default;

/***/ }),

/***/ 27:
/*!********************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/colorGradient.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; /**
                                                                                                      * 求两个颜色之间的渐变值
                                                                                                      * @param {string} startColor 开始的颜色
                                                                                                      * @param {string} endColor 结束的颜色
                                                                                                      * @param {number} step 颜色等分的份额
                                                                                                      * */
function colorGradient() {var startColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'rgb(0, 0, 0)';var endColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'rgb(255, 255, 255)';var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
  var startRGB = hexToRgb(startColor, false); //转换为rgb数组模式
  var startR = startRGB[0];
  var startG = startRGB[1];
  var startB = startRGB[2];

  var endRGB = hexToRgb(endColor, false);
  var endR = endRGB[0];
  var endG = endRGB[1];
  var endB = endRGB[2];

  var sR = (endR - startR) / step; //总差值
  var sG = (endG - startG) / step;
  var sB = (endB - startB) / step;
  var colorArr = [];
  for (var i = 0; i < step; i++) {
    //计算每一步的hex值 
    var hex = rgbToHex('rgb(' + Math.round(sR * i + startR) + ',' + Math.round(sG * i + startG) + ',' + Math.round(sB *
    i + startB) + ')');
    colorArr.push(hex);
  }
  return colorArr;
}

// 将hex表示方式转换为rgb表示方式(这里返回rgb数组模式)
function hexToRgb(sColor) {var str = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
  sColor = sColor.toLowerCase();
  if (sColor && reg.test(sColor)) {
    if (sColor.length === 4) {
      var sColorNew = "#";
      for (var i = 1; i < 4; i += 1) {
        sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
      }
      sColor = sColorNew;
    }
    //处理六位的颜色值
    var sColorChange = [];
    for (var _i = 1; _i < 7; _i += 2) {
      sColorChange.push(parseInt("0x" + sColor.slice(_i, _i + 2)));
    }
    if (!str) {
      return sColorChange;
    } else {
      return "rgb(".concat(sColorChange[0], ",").concat(sColorChange[1], ",").concat(sColorChange[2], ")");
    }
  } else if (/^(rgb|RGB)/.test(sColor)) {
    var arr = sColor.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
    return arr.map(function (val) {return Number(val);});
  } else {
    return sColor;
  }
};

// 将rgb表示方式转换为hex表示方式
function rgbToHex(rgb) {
  var _this = rgb;
  var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
  if (/^(rgb|RGB)/.test(_this)) {
    var aColor = _this.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
    var strHex = "#";
    for (var i = 0; i < aColor.length; i++) {
      var hex = Number(aColor[i]).toString(16);
      hex = String(hex).length == 1 ? 0 + '' + hex : hex; // 保证每个rgb的值为2位
      if (hex === "0") {
        hex += hex;
      }
      strHex += hex;
    }
    if (strHex.length !== 7) {
      strHex = _this;
    }
    return strHex;
  } else if (reg.test(_this)) {
    var aNum = _this.replace(/#/, "").split("");
    if (aNum.length === 6) {
      return _this;
    } else if (aNum.length === 3) {
      var numHex = "#";
      for (var _i2 = 0; _i2 < aNum.length; _i2 += 1) {
        numHex += aNum[_i2] + aNum[_i2];
      }
      return numHex;
    }
  } else {
    return _this;
  }
}var _default =

{
  colorGradient: colorGradient,
  hexToRgb: hexToRgb,
  rgbToHex: rgbToHex };exports.default = _default;

/***/ }),

/***/ 28:
/*!***********************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/guid.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; /**
                                                                                                      * 本算法来源于简书开源代码，详见：https://www.jianshu.com/p/fdbf293d0a85
                                                                                                      * 全局唯一标识符（uuid，Globally Unique Identifier）,也称作 uuid(Universally Unique IDentifier) 
                                                                                                      * 一般用于多个组件之间,给它一个唯一的标识符,或者v-for循环的时候,如果使用数组的index可能会导致更新列表出现问题
                                                                                                      * 最可能的情况是左滑删除item或者对某条信息流"不喜欢"并去掉它的时候,会导致组件内的数据可能出现错乱
                                                                                                      * v-for的时候,推荐使用后端返回的id而不是循环的index
                                                                                                      * @param {Number} len uuid的长度
                                                                                                      * @param {Boolean} firstU 将返回的首字母置为"u"
                                                                                                      * @param {Nubmer} radix 生成uuid的基数(意味着返回的字符串都是这个基数),2-二进制,8-八进制,10-十进制,16-十六进制
                                                                                                      */
function guid() {var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;var firstU = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;var radix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
  var uuid = [];
  radix = radix || chars.length;

  if (len) {
    // 如果指定uuid长度,只是取随机的字符,0|x为位运算,能去掉x的小数位,返回整数位
    for (var i = 0; i < len; i++) {uuid[i] = chars[0 | Math.random() * radix];}
  } else {
    var r;
    // rfc4122标准要求返回的uuid中,某些位为固定的字符
    uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
    uuid[14] = '4';

    for (var _i = 0; _i < 36; _i++) {
      if (!uuid[_i]) {
        r = 0 | Math.random() * 16;
        uuid[_i] = chars[_i == 19 ? r & 0x3 | 0x8 : r];
      }
    }
  }
  // 移除第一个字符,并用u替代,因为第一个字符为数值时,该guuid不能用作id或者class
  if (firstU) {
    uuid.shift();
    return 'u' + uuid.join('');
  } else {
    return uuid.join('');
  }
}var _default =

guid;exports.default = _default;

/***/ }),

/***/ 29:
/*!************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/color.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; // 为了让用户能够自定义主题，会逐步弃用此文件，各颜色通过css提供
// 为了给某些特殊场景使用和向后兼容，无需删除此文件(2020-06-20)
var color = {
  primary: "#2979ff",
  primaryDark: "#2b85e4",
  primaryDisabled: "#a0cfff",
  primaryLight: "#ecf5ff",
  bgColor: "#f3f4f6",

  info: "#909399",
  infoDark: "#82848a",
  infoDisabled: "#c8c9cc",
  infoLight: "#f4f4f5",

  warning: "#ff9900",
  warningDark: "#f29100",
  warningDisabled: "#fcbd71",
  warningLight: "#fdf6ec",

  error: "#fa3534",
  errorDark: "#dd6161",
  errorDisabled: "#fab6b6",
  errorLight: "#fef0f0",

  success: "#19be6b",
  successDark: "#18b566",
  successDisabled: "#71d5a1",
  successLight: "#dbf1e1",

  mainColor: "#303133",
  contentColor: "#606266",
  tipsColor: "#909399",
  lightColor: "#c0c4cc",
  borderColor: "#e4e7ed" };var _default =


color;exports.default = _default;

/***/ }),

/***/ 3:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ 30:
/*!****************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/type2icon.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; /**
                                                                                                      * 根据主题type值,获取对应的图标
                                                                                                      * @param String type 主题名称,primary|info|error|warning|success
                                                                                                      * @param String fill 是否使用fill填充实体的图标  
                                                                                                      */
function type2icon() {var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'success';var fill = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  // 如果非预置值,默认为success
  if (['primary', 'info', 'error', 'warning', 'success'].indexOf(type) == -1) type = 'success';
  var iconName = '';
  // 目前(2019-12-12),info和primary使用同一个图标
  switch (type) {
    case 'primary':
      iconName = 'info-circle';
      break;
    case 'info':
      iconName = 'info-circle';
      break;
    case 'error':
      iconName = 'close-circle';
      break;
    case 'warning':
      iconName = 'error-circle';
      break;
    case 'success':
      iconName = 'checkmark-circle';
      break;
    default:
      iconName = 'checkmark-circle';}

  // 是否是实体类型,加上-fill,在icon组件库中,实体的类名是后面加-fill的
  if (fill) iconName += '-fill';
  return iconName;
}var _default =

type2icon;exports.default = _default;

/***/ }),

/***/ 31:
/*!******************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/randomArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; // 打乱数组
function randomArray() {var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  // 原理是sort排序,Math.random()产生0<= x < 1之间的数,会导致x-0.05大于或者小于0
  return array.sort(function () {return Math.random() - 0.5;});
}var _default =

randomArray;exports.default = _default;

/***/ }),

/***/ 32:
/*!**************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/addUnit.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = addUnit;var _test = _interopRequireDefault(__webpack_require__(/*! ./test.js */ 22));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// 添加单位，如果有rpx，%，px等单位结尾或者值为auto，直接返回，否则加上rpx单位结尾
function addUnit() {var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'auto';var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'rpx';
  value = String(value);
  // 用uView内置验证规则中的number判断是否为数值
  return _test.default.number(value) ? "".concat(value).concat(unit) : value;
}

/***/ }),

/***/ 33:
/*!*************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/random.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;function random(min, max) {
  if (min >= 0 && max > 0 && max >= min) {
    var gab = max - min + 1;
    return Math.floor(Math.random() * gab + min);
  } else {
    return 0;
  }
}var _default =

random;exports.default = _default;

/***/ }),

/***/ 34:
/*!***********************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/trim.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;function trim(str) {var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'both';
  if (pos == 'both') {
    return str.replace(/^\s+|\s+$/g, "");
  } else if (pos == "left") {
    return str.replace(/^\s*/, '');
  } else if (pos == 'right') {
    return str.replace(/(\s*$)/g, "");
  } else if (pos == 'all') {
    return str.replace(/\s+/g, "");
  } else {
    return str;
  }
}var _default =

trim;exports.default = _default;

/***/ }),

/***/ 35:
/*!************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/toast.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;function toast(title) {var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1500;
  uni.showToast({
    title: title,
    icon: 'none',
    duration: duration });

}var _default =

toast;exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-baidu/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 36:
/*!****************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/getParent.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = getParent; // 获取父组件的参数，因为支付宝小程序不支持provide/inject的写法
// this.$parent在非H5中，可以准确获取到父组件，但是在H5中，需要多次this.$parent.$parent.xxx
function getParent(name, keys) {
  var parent = this.$parent;
  // 通过while历遍，这里主要是为了H5需要多层解析的问题
  while (parent) {
    // 父组件
    if (parent.$options.name !== name) {
      // 如果组件的name不相等，继续上一级寻找
      parent = parent.$parent;
    } else {var _ret = function () {
        var data = {};
        // 判断keys是否数组，如果传过来的是一个数组，那么直接使用数组元素值当做键值去父组件寻找
        if (Array.isArray(keys)) {
          keys.map(function (val) {
            data[val] = parent[val] ? parent[val] : '';
          });
        } else {
          // 历遍传过来的对象参数
          for (var i in keys) {
            // 如果子组件有此值则用，无此值则用父组件的值
            // 判断是否空数组，如果是，则用父组件的值，否则用子组件的值
            if (Array.isArray(keys[i])) {
              if (keys[i].length) {
                data[i] = keys[i];
              } else {
                data[i] = parent[i];
              }
            } else if (keys[i].constructor === Object) {
              // 判断是否对象，如果是对象，且有属性，那么使用子组件的值，否则使用父组件的值
              if (Object.keys(keys[i]).length) {
                data[i] = keys[i];
              } else {
                data[i] = parent[i];
              }
            } else {
              // 只要子组件有传值，即使是false值，也是“传值”了，也需要覆盖父组件的同名参数
              data[i] = keys[i] || keys[i] === false ? keys[i] : parent[i];
            }
          }
        }
        return { v: data };}();if (typeof _ret === "object") return _ret.v;
    }
  }

  return {};
}

/***/ }),

/***/ 37:
/*!**************************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/function/$parent.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = $parent; // 获取父组件的参数，因为支付宝小程序不支持provide/inject的写法
// this.$parent在非H5中，可以准确获取到父组件，但是在H5中，需要多次this.$parent.$parent.xxx
function $parent(name, keys) {
  var parent = this.$parent;
  // 通过while历遍，这里主要是为了H5需要多层解析的问题
  while (parent) {
    // 父组件
    if (parent.$options.name !== name) {
      // 如果组件的name不相等，继续上一级寻找
      parent = parent.$parent;
    } else {
      return parent;
    }
  }
  return false;
}

/***/ }),

/***/ 38:
/*!***********************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/config/config.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; // 此版本发布于2020-07-21
var version = '1.5.4';var _default =

{
  v: version,
  version: version,
  // 主题名称
  type: [
  'primary',
  'success',
  'info',
  'error',
  'warning'] };exports.default = _default;

/***/ }),

/***/ 39:
/*!***********************************************************!*\
  !*** D:/work/test/ygctour/uview-ui/libs/config/zIndex.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0; // uniapp在H5中各API的z-index值如下：
/**
 * actionsheet: 999
 * modal: 999
 * navigate: 998
 * tabbar: 998
 * toast: 999
 */var _default =

{
  toast: 10090,
  noNetwork: 10080,
  // popup包含popup，actionsheet，keyboard，picker的值
  popup: 10075,
  mask: 10070,
  navbar: 980,
  topTips: 975,
  sticky: 970,
  indexListSticky: 965 };exports.default = _default;

/***/ }),

/***/ 4:
/*!***************************************!*\
  !*** D:/work/test/ygctour/pages.json ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _createSuper(Derived) {return function () {var Super = _getPrototypeOf(Derived),result;if (_isNativeReflectConstruct()) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}

var STAT_VERSION = _package.version;
var STAT_URL = 'https://tongji.dcloud.io/uni/stat';
var STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';
var PAGE_PVER_TIME = 1800;
var APP_PVER_TIME = 300;
var OPERATING_TIME = 10;

var UUID_KEY = '__DC_STAT_UUID';
var UUID_VALUE = '__DC_UUID_VALUE';

function getUuid() {
  var uuid = '';
  if (getPlatformName() === 'n') {
    try {
      uuid = plus.runtime.getDCloudId();
    } catch (e) {
      uuid = '';
    }
    return uuid;
  }

  try {
    uuid = uni.getStorageSync(UUID_KEY);
  } catch (e) {
    uuid = UUID_VALUE;
  }

  if (!uuid) {
    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);
    try {
      uni.setStorageSync(UUID_KEY, uuid);
    } catch (e) {
      uni.setStorageSync(UUID_KEY, UUID_VALUE);
    }
  }
  return uuid;
}

var getSgin = function getSgin(statData) {
  var arr = Object.keys(statData);
  var sortArr = arr.sort();
  var sgin = {};
  var sginStr = '';
  for (var i in sortArr) {
    sgin[sortArr[i]] = statData[sortArr[i]];
    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';
  }
  // const options = sginStr.substr(0, sginStr.length - 1)
  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;
  // const si = crypto.createHash('md5').update(sginStr).digest('hex');
  return {
    sign: '',
    options: sginStr.substr(0, sginStr.length - 1) };

};

var getSplicing = function getSplicing(data) {
  var str = '';
  for (var i in data) {
    str += i + '=' + data[i] + '&';
  }
  return str.substr(0, str.length - 1);
};

var getTime = function getTime() {
  return parseInt(new Date().getTime() / 1000);
};

var getPlatformName = function getPlatformName() {
  var platformList = {
    'app-plus': 'n',
    'h5': 'h5',
    'mp-weixin': 'wx',
    'mp-alipay': 'ali',
    'mp-baidu': 'bd',
    'mp-toutiao': 'tt',
    'mp-qq': 'qq' };

  return platformList["mp-baidu"];
};

var getPackName = function getPackName() {
  var packName = '';
  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {
    // 兼容微信小程序低版本基础库
    if (uni.canIUse('getAccountInfoSync')) {
      packName = uni.getAccountInfoSync().miniProgram.appId || '';
    }
  }
  return packName;
};

var getVersion = function getVersion() {
  return getPlatformName() === 'n' ? plus.runtime.version : '';
};

var getChannel = function getChannel() {
  var platformName = getPlatformName();
  var channel = '';
  if (platformName === 'n') {
    channel = plus.runtime.channel;
  }
  return channel;
};

var getScene = function getScene(options) {
  var platformName = getPlatformName();
  var scene = '';
  if (options) {
    return options;
  }
  if (platformName === 'wx') {
    scene = uni.getLaunchOptionsSync().scene;
  }
  return scene;
};
var First__Visit__Time__KEY = 'First__Visit__Time';
var Last__Visit__Time__KEY = 'Last__Visit__Time';

var getFirstVisitTime = function getFirstVisitTime() {
  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);
  var time = 0;
  if (timeStorge) {
    time = timeStorge;
  } else {
    time = getTime();
    uni.setStorageSync(First__Visit__Time__KEY, time);
    uni.removeStorageSync(Last__Visit__Time__KEY);
  }
  return time;
};

var getLastVisitTime = function getLastVisitTime() {
  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);
  var time = 0;
  if (timeStorge) {
    time = timeStorge;
  } else {
    time = '';
  }
  uni.setStorageSync(Last__Visit__Time__KEY, getTime());
  return time;
};


var PAGE_RESIDENCE_TIME = '__page__residence__time';
var First_Page_residence_time = 0;
var Last_Page_residence_time = 0;


var setPageResidenceTime = function setPageResidenceTime() {
  First_Page_residence_time = getTime();
  if (getPlatformName() === 'n') {
    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());
  }
  return First_Page_residence_time;
};

var getPageResidenceTime = function getPageResidenceTime() {
  Last_Page_residence_time = getTime();
  if (getPlatformName() === 'n') {
    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);
  }
  return Last_Page_residence_time - First_Page_residence_time;
};
var TOTAL__VISIT__COUNT = 'Total__Visit__Count';
var getTotalVisitCount = function getTotalVisitCount() {
  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);
  var count = 1;
  if (timeStorge) {
    count = timeStorge;
    count++;
  }
  uni.setStorageSync(TOTAL__VISIT__COUNT, count);
  return count;
};

var GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {
  var data = {};
  for (var prop in statData) {
    data[prop] = encodeURIComponent(statData[prop]);
  }
  return data;
};

var Set__First__Time = 0;
var Set__Last__Time = 0;

var getFirstTime = function getFirstTime() {
  var time = new Date().getTime();
  Set__First__Time = time;
  Set__Last__Time = 0;
  return time;
};


var getLastTime = function getLastTime() {
  var time = new Date().getTime();
  Set__Last__Time = time;
  return time;
};


var getResidenceTime = function getResidenceTime(type) {
  var residenceTime = 0;
  if (Set__First__Time !== 0) {
    residenceTime = Set__Last__Time - Set__First__Time;
  }

  residenceTime = parseInt(residenceTime / 1000);
  residenceTime = residenceTime < 1 ? 1 : residenceTime;
  if (type === 'app') {
    var overtime = residenceTime > APP_PVER_TIME ? true : false;
    return {
      residenceTime: residenceTime,
      overtime: overtime };

  }
  if (type === 'page') {
    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;
    return {
      residenceTime: residenceTime,
      overtime: _overtime };

  }

  return {
    residenceTime: residenceTime };


};

var getRoute = function getRoute() {
  var pages = getCurrentPages();
  var page = pages[pages.length - 1];
  var _self = page.$vm;

  if (getPlatformName() === 'bd') {
    return _self.$mp && _self.$mp.page.is;
  } else {
    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;
  }
};

var getPageRoute = function getPageRoute(self) {
  var pages = getCurrentPages();
  var page = pages[pages.length - 1];
  var _self = page.$vm;
  var query = self._query;
  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';
  // clear
  self._query = '';
  if (getPlatformName() === 'bd') {
    return _self.$mp && _self.$mp.page.is + str;
  } else {
    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;
  }
};

var getPageTypes = function getPageTypes(self) {
  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {
    return true;
  }
  return false;
};

var calibration = function calibration(eventName, options) {
  //  login 、 share 、pay_success 、pay_fail 、register 、title
  if (!eventName) {
    console.error("uni.report \u7F3A\u5C11 [eventName] \u53C2\u6570");
    return true;
  }
  if (typeof eventName !== 'string') {
    console.error("uni.report [eventName] \u53C2\u6570\u7C7B\u578B\u9519\u8BEF,\u53EA\u80FD\u4E3A String \u7C7B\u578B");
    return true;
  }
  if (eventName.length > 255) {
    console.error("uni.report [eventName] \u53C2\u6570\u957F\u5EA6\u4E0D\u80FD\u5927\u4E8E 255");
    return true;
  }

  if (typeof options !== 'string' && typeof options !== 'object') {
    console.error("uni.report [options] \u53C2\u6570\u7C7B\u578B\u9519\u8BEF,\u53EA\u80FD\u4E3A String \u6216 Object \u7C7B\u578B");
    return true;
  }

  if (typeof options === 'string' && options.length > 255) {
    console.error("uni.report [options] \u53C2\u6570\u957F\u5EA6\u4E0D\u80FD\u5927\u4E8E 255");
    return true;
  }

  if (eventName === 'title' && typeof options !== 'string') {
    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');
    return true;
  }
};

var PagesJson = __webpack_require__(/*! uni-pages?{"type":"style"} */ 7).default;
var statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);

var resultOptions = uni.getSystemInfoSync();var

Util = /*#__PURE__*/function () {
  function Util() {_classCallCheck(this, Util);
    this.self = '';
    this._retry = 0;
    this._platform = '';
    this._query = {};
    this._navigationBarTitle = {
      config: '',
      page: '',
      report: '',
      lt: '' };

    this._operatingTime = 0;
    this._reportingRequestData = {
      '1': [],
      '11': [] };

    this.__prevent_triggering = false;

    this.__licationHide = false;
    this.__licationShow = false;
    this._lastPageRoute = '';
    this.statData = {
      uuid: getUuid(),
      ut: getPlatformName(),
      mpn: getPackName(),
      ak: statConfig.appid,
      usv: STAT_VERSION,
      v: getVersion(),
      ch: getChannel(),
      cn: '',
      pn: '',
      ct: '',
      t: getTime(),
      tt: '',
      p: resultOptions.platform === 'android' ? 'a' : 'i',
      brand: resultOptions.brand || '',
      md: resultOptions.model,
      sv: resultOptions.system.replace(/(Android|iOS)\s/, ''),
      mpsdk: resultOptions.SDKVersion || '',
      mpv: resultOptions.version || '',
      lang: resultOptions.language,
      pr: resultOptions.pixelRatio,
      ww: resultOptions.windowWidth,
      wh: resultOptions.windowHeight,
      sw: resultOptions.screenWidth,
      sh: resultOptions.screenHeight };


  }_createClass(Util, [{ key: "_applicationShow", value: function _applicationShow()

    {
      if (this.__licationHide) {
        getLastTime();
        var time = getResidenceTime('app');
        if (time.overtime) {
          var options = {
            path: this._lastPageRoute,
            scene: this.statData.sc };

          this._sendReportRequest(options);
        }
        this.__licationHide = false;
      }
    } }, { key: "_applicationHide", value: function _applicationHide(

    self, type) {

      this.__licationHide = true;
      getLastTime();
      var time = getResidenceTime();
      getFirstTime();
      var route = getPageRoute(this);
      this._sendHideRequest({
        urlref: route,
        urlref_ts: time.residenceTime },
      type);
    } }, { key: "_pageShow", value: function _pageShow()

    {
      var route = getPageRoute(this);
      var routepath = getRoute();
      this._navigationBarTitle.config = PagesJson &&
      PagesJson.pages[routepath] &&
      PagesJson.pages[routepath].titleNView &&
      PagesJson.pages[routepath].titleNView.titleText ||
      PagesJson &&
      PagesJson.pages[routepath] &&
      PagesJson.pages[routepath].navigationBarTitleText || '';

      if (this.__licationShow) {
        getFirstTime();
        this.__licationShow = false;
        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');
        this._lastPageRoute = route;
        return;
      }

      getLastTime();
      this._lastPageRoute = route;
      var time = getResidenceTime('page');
      if (time.overtime) {
        var options = {
          path: this._lastPageRoute,
          scene: this.statData.sc };

        this._sendReportRequest(options);
      }
      getFirstTime();
    } }, { key: "_pageHide", value: function _pageHide()

    {
      if (!this.__licationHide) {
        getLastTime();
        var time = getResidenceTime('page');
        this._sendPageRequest({
          url: this._lastPageRoute,
          urlref: this._lastPageRoute,
          urlref_ts: time.residenceTime });

        this._navigationBarTitle = {
          config: '',
          page: '',
          report: '',
          lt: '' };

        return;
      }
    } }, { key: "_login", value: function _login()

    {
      this._sendEventRequest({
        key: 'login' },
      0);
    } }, { key: "_share", value: function _share()

    {
      this._sendEventRequest({
        key: 'share' },
      0);
    } }, { key: "_payment", value: function _payment(
    key) {
      this._sendEventRequest({
        key: key },
      0);
    } }, { key: "_sendReportRequest", value: function _sendReportRequest(
    options) {

      this._navigationBarTitle.lt = '1';
      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';
      this.statData.lt = '1';
      this.statData.url = options.path + query || '';
      this.statData.t = getTime();
      this.statData.sc = getScene(options.scene);
      this.statData.fvts = getFirstVisitTime();
      this.statData.lvts = getLastVisitTime();
      this.statData.tvc = getTotalVisitCount();
      if (getPlatformName() === 'n') {
        this.getProperty();
      } else {
        this.getNetworkInfo();
      }
    } }, { key: "_sendPageRequest", value: function _sendPageRequest(

    opt) {var

      url =


      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;
      this._navigationBarTitle.lt = '11';
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '11',
        ut: this.statData.ut,
        url: url,
        tt: this.statData.tt,
        urlref: urlref,
        urlref_ts: urlref_ts,
        ch: this.statData.ch,
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options);
    } }, { key: "_sendHideRequest", value: function _sendHideRequest(

    opt, type) {var

      urlref =

      opt.urlref,urlref_ts = opt.urlref_ts;
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '3',
        ut: this.statData.ut,
        urlref: urlref,
        urlref_ts: urlref_ts,
        ch: this.statData.ch,
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options, type);
    } }, { key: "_sendEventRequest", value: function _sendEventRequest()



    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? "" : _ref$value;
      var route = this._lastPageRoute;
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '21',
        ut: this.statData.ut,
        url: route,
        ch: this.statData.ch,
        e_n: key,
        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options);
    } }, { key: "getNetworkInfo", value: function getNetworkInfo()

    {var _this = this;
      uni.getNetworkType({
        success: function success(result) {
          _this.statData.net = result.networkType;
          _this.getLocation();
        } });

    } }, { key: "getProperty", value: function getProperty()

    {var _this2 = this;
      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {
        _this2.statData.v = wgtinfo.version || '';
        _this2.getNetworkInfo();
      });
    } }, { key: "getLocation", value: function getLocation()

    {var _this3 = this;
      if (statConfig.getLocation) {
        uni.getLocation({
          type: 'wgs84',
          geocode: true,
          success: function success(result) {
            if (result.address) {
              _this3.statData.cn = result.address.country;
              _this3.statData.pn = result.address.province;
              _this3.statData.ct = result.address.city;
            }

            _this3.statData.lat = result.latitude;
            _this3.statData.lng = result.longitude;
            _this3.request(_this3.statData);
          } });

      } else {
        this.statData.lat = 0;
        this.statData.lng = 0;
        this.request(this.statData);
      }
    } }, { key: "request", value: function request(

    data, type) {var _this4 = this;
      var time = getTime();
      var title = this._navigationBarTitle;
      data.ttn = title.page;
      data.ttpj = title.config;
      data.ttc = title.report;

      var requestData = this._reportingRequestData;
      if (getPlatformName() === 'n') {
        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};
      }
      if (!requestData[data.lt]) {
        requestData[data.lt] = [];
      }
      requestData[data.lt].push(data);

      if (getPlatformName() === 'n') {
        uni.setStorageSync('__UNI__STAT__DATA', requestData);
      }
      if (getPageResidenceTime() < OPERATING_TIME && !type) {
        return;
      }
      var uniStatData = this._reportingRequestData;
      if (getPlatformName() === 'n') {
        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');
      }
      // 时间超过，重新获取时间戳
      setPageResidenceTime();
      var firstArr = [];
      var contentArr = [];
      var lastArr = [];var _loop = function _loop(

      i) {
        var rd = uniStatData[i];
        rd.forEach(function (elm) {
          var newData = getSplicing(elm);
          if (i === 0) {
            firstArr.push(newData);
          } else if (i === 3) {
            lastArr.push(newData);
          } else {
            contentArr.push(newData);
          }
        });};for (var i in uniStatData) {_loop(i);
      }

      firstArr.push.apply(firstArr, contentArr.concat(lastArr));
      var optionsData = {
        usv: STAT_VERSION, //统计 SDK 版本号
        t: time, //发送请求时的时间戮
        requests: JSON.stringify(firstArr) };


      this._reportingRequestData = {};
      if (getPlatformName() === 'n') {
        uni.removeStorageSync('__UNI__STAT__DATA');
      }

      if (data.ut === 'h5') {
        this.imageRequest(optionsData);
        return;
      }

      if (getPlatformName() === 'n' && this.statData.p === 'a') {
        setTimeout(function () {
          _this4._sendRequest(optionsData);
        }, 200);
        return;
      }
      this._sendRequest(optionsData);
    } }, { key: "_sendRequest", value: function _sendRequest(
    optionsData) {var _this5 = this;
      uni.request({
        url: STAT_URL,
        method: 'POST',
        // header: {
        //   'content-type': 'application/json' // 默认值
        // },
        data: optionsData,
        success: function success() {
          // if (process.env.NODE_ENV === 'development') {
          //   console.log('stat request success');
          // }
        },
        fail: function fail(e) {
          if (++_this5._retry < 3) {
            setTimeout(function () {
              _this5._sendRequest(optionsData);
            }, 1000);
          }
        } });

    }
    /**
       * h5 请求
       */ }, { key: "imageRequest", value: function imageRequest(
    data) {
      var image = new Image();
      var options = getSgin(GetEncodeURIComponentOptions(data)).options;
      image.src = STAT_H5_URL + '?' + options;
    } }, { key: "sendEvent", value: function sendEvent(

    key, value) {
      // 校验 type 参数
      if (calibration(key, value)) return;

      if (key === 'title') {
        this._navigationBarTitle.report = value;
        return;
      }
      this._sendEventRequest({
        key: key,
        value: typeof value === 'object' ? JSON.stringify(value) : value },
      1);
    } }]);return Util;}();var



Stat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);var _super = _createSuper(Stat);_createClass(Stat, null, [{ key: "getInstance", value: function getInstance()
    {
      if (!this.instance) {
        this.instance = new Stat();
      }
      return this.instance;
    } }]);
  function Stat() {var _this6;_classCallCheck(this, Stat);
    _this6 = _super.call(this);
    _this6.instance = null;
    // 注册拦截器
    if (typeof uni.addInterceptor === 'function' && "development" !== 'development') {
      _this6.addInterceptorInit();
      _this6.interceptLogin();
      _this6.interceptShare(true);
      _this6.interceptRequestPayment();
    }return _this6;
  }_createClass(Stat, [{ key: "addInterceptorInit", value: function addInterceptorInit()

    {
      var self = this;
      uni.addInterceptor('setNavigationBarTitle', {
        invoke: function invoke(args) {
          self._navigationBarTitle.page = args.title;
        } });

    } }, { key: "interceptLogin", value: function interceptLogin()

    {
      var self = this;
      uni.addInterceptor('login', {
        complete: function complete() {
          self._login();
        } });

    } }, { key: "interceptShare", value: function interceptShare(

    type) {
      var self = this;
      if (!type) {
        self._share();
        return;
      }
      uni.addInterceptor('share', {
        success: function success() {
          self._share();
        },
        fail: function fail() {
          self._share();
        } });

    } }, { key: "interceptRequestPayment", value: function interceptRequestPayment()

    {
      var self = this;
      uni.addInterceptor('requestPayment', {
        success: function success() {
          self._payment('pay_success');
        },
        fail: function fail() {
          self._payment('pay_fail');
        } });

    } }, { key: "report", value: function report(

    options, self) {
      this.self = self;
      // if (process.env.NODE_ENV === 'development') {
      //   console.log('report init');
      // }
      setPageResidenceTime();
      this.__licationShow = true;
      this._sendReportRequest(options, true);
    } }, { key: "load", value: function load(

    options, self) {
      if (!self.$scope && !self.$mp) {
        var page = getCurrentPages();
        self.$scope = page[page.length - 1];
      }
      this.self = self;
      this._query = options;
    } }, { key: "show", value: function show(

    self) {
      this.self = self;
      if (getPageTypes(self)) {
        this._pageShow(self);
      } else {
        this._applicationShow(self);
      }
    } }, { key: "ready", value: function ready(

    self) {
      // this.self = self;
      // if (getPageTypes(self)) {
      //   this._pageShow(self);
      // }
    } }, { key: "hide", value: function hide(
    self) {
      this.self = self;
      if (getPageTypes(self)) {
        this._pageHide(self);
      } else {
        this._applicationHide(self, true);
      }
    } }, { key: "error", value: function error(
    em) {
      if (this._platform === 'devtools') {
        if (true) {
          console.info('当前运行环境为开发者工具，不上报数据。');
        }
        // return;
      }
      var emVal = '';
      if (!em.message) {
        emVal = JSON.stringify(em);
      } else {
        emVal = em.stack;
      }
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '31',
        ut: this.statData.ut,
        ch: this.statData.ch,
        mpsdk: this.statData.mpsdk,
        mpv: this.statData.mpv,
        v: this.statData.v,
        em: emVal,
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options);
    } }]);return Stat;}(Util);


var stat = Stat.getInstance();
var isHide = false;
var lifecycle = {
  onLaunch: function onLaunch(options) {
    stat.report(options, this);
  },
  onReady: function onReady() {
    stat.ready(this);
  },
  onLoad: function onLoad(options) {
    stat.load(options, this);
    // 重写分享，获取分享上报事件
    if (this.$scope && this.$scope.onShareAppMessage) {
      var oldShareAppMessage = this.$scope.onShareAppMessage;
      this.$scope.onShareAppMessage = function (options) {
        stat.interceptShare(false);
        return oldShareAppMessage.call(this, options);
      };
    }
  },
  onShow: function onShow() {
    isHide = false;
    stat.show(this);
  },
  onHide: function onHide() {
    isHide = true;
    stat.hide(this);
  },
  onUnload: function onUnload() {
    if (isHide) {
      isHide = false;
      return;
    }
    stat.hide(this);
  },
  onError: function onError(e) {
    stat.error(e);
  } };


function main() {
  if (true) {
    uni.report = function (type, options) {};
  } else { var Vue; }
}

main();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-baidu/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

module.exports = {"_from":"@dcloudio/uni-stat@next","_id":"@dcloudio/uni-stat@2.0.0-26920200424005","_inBundle":false,"_integrity":"sha512-FT8Z/C5xSmIxooqhV1v69jTkxATPz+FsRQIFOrbdlWekjGkrE73jfrdNMWm7gL5u41ALPJTVArxN1Re9by1bjQ==","_location":"/@dcloudio/uni-stat","_phantomChildren":{},"_requested":{"type":"tag","registry":true,"raw":"@dcloudio/uni-stat@next","name":"@dcloudio/uni-stat","escapedName":"@dcloudio%2funi-stat","scope":"@dcloudio","rawSpec":"next","saveSpec":null,"fetchSpec":"next"},"_requiredBy":["#USER","/","/@dcloudio/vue-cli-plugin-uni"],"_resolved":"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-26920200424005.tgz","_shasum":"47f4375095eda3089cf4678b4b96fc656a7ab623","_spec":"@dcloudio/uni-stat@next","_where":"/Users/guoshengqiang/Documents/dcloud-plugins/release/uniapp-cli","author":"","bugs":{"url":"https://github.com/dcloudio/uni-app/issues"},"bundleDependencies":false,"deprecated":false,"description":"","devDependencies":{"@babel/core":"^7.5.5","@babel/preset-env":"^7.5.5","eslint":"^6.1.0","rollup":"^1.19.3","rollup-plugin-babel":"^4.3.3","rollup-plugin-clear":"^2.0.7","rollup-plugin-commonjs":"^10.0.2","rollup-plugin-copy":"^3.1.0","rollup-plugin-eslint":"^7.0.0","rollup-plugin-json":"^4.0.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-replace":"^2.2.0","rollup-plugin-uglify":"^6.0.2"},"files":["dist","package.json","LICENSE"],"gitHead":"94494d54ed23e2dcf9ab8e3245b48b770b4e98a9","homepage":"https://github.com/dcloudio/uni-app#readme","license":"Apache-2.0","main":"dist/index.js","name":"@dcloudio/uni-stat","repository":{"type":"git","url":"git+https://github.com/dcloudio/uni-app.git","directory":"packages/uni-stat"},"scripts":{"build":"NODE_ENV=production rollup -c rollup.config.js","dev":"NODE_ENV=development rollup -w -c rollup.config.js"},"version":"2.0.0-26920200424005"};

/***/ }),

/***/ 7:
/*!********************************************************!*\
  !*** D:/work/test/ygctour/pages.json?{"type":"style"} ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _default = { "pages": { "pages/attractionsList/attractionsList": { "navigationStyle": "custom", "component": true, "usingComponents": { "uni-nav-bar": "/components/uni-nav-bar/uni-nav-bar" }, "usingAutoImportComponents": { "uni-nav-bar": "/components/uni-nav-bar/uni-nav-bar" } }, "pages/index/index": { "navigationStyle": "custom", "component": true, "usingComponents": { "uni-icons": "/components/uni-icons/uni-icons", "uni-nav-bar": "/components/uni-nav-bar/uni-nav-bar", "uni-section": "/components/uni-section/uni-section", "tcontent": "/components/content/tcontent" }, "usingAutoImportComponents": { "uni-nav-bar": "/components/uni-nav-bar/uni-nav-bar" }, "usingGlobalComponents": { "mescroll-body": "/components/mescroll-uni/mescroll-body" } }, "pages/login/login": { "component": true, "usingComponents": {}, "usingAutoImportComponents": {} }, "pages/mine/mine": { "component": true, "usingComponents": {}, "usingAutoImportComponents": {} }, "pages/contentdetail/contentdetail": { "navigationStyle": "custom", "component": true, "usingComponents": {}, "usingAutoImportComponents": { "uni-nav-bar": "/components/uni-nav-bar/uni-nav-bar" } }, "pages/attractionsDetails/attractionsDetails": { "navigationStyle": "custom", "component": true, "usingComponents": {}, "usingAutoImportComponents": { "uni-nav-bar": "/components/uni-nav-bar/uni-nav-bar", "uni-rate": "/components/uni-rate/uni-rate" } }, "pages/searchResults/searchResults": { "navigationStyle": "custom", "component": true, "usingComponents": { "m-search": "/components/mehaotian-search-revision/mehaotian-search-revision", "uni-nav-bar": "/components/uni-nav-bar/uni-nav-bar", "touring": "/components/content/touring" }, "usingAutoImportComponents": { "uni-nav-bar": "/components/uni-nav-bar/uni-nav-bar", "uni-icons": "/components/uni-icons/uni-icons" } }, "pages/search/search": { "component": true, "usingComponents": { "m-search": "/components/mehaotian-search-revision/mehaotian-search-revision" }, "usingAutoImportComponents": {} }, "pages/city/city": { "navigationStyle": "custom", "component": true, "usingComponents": {}, "usingAutoImportComponents": { "uni-nav-bar": "/components/uni-nav-bar/uni-nav-bar" } } }, "globalStyle": { "navigationBarBackgroundColor": "#F7F7F7", "navigationBarTextStyle": "black", "navigationBarTitleText": "领途羊" } };exports.default = _default;

/***/ }),

/***/ 70:
/*!************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js ***!
  \************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global, uni, wx) {var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function t(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function n(e,t){return e(t={exports:{}},t.exports),t.exports}var r=n((function(e,t){var n;e.exports=(n=n||function(e,t){var n=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),r={},o=r.lib={},s=o.Base={extend:function(e){var t=n(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},i=o.WordArray=s.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||c).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,o=e.sigBytes;if(this.clamp(),r%4)for(var s=0;s<o;s++){var i=n[s>>>2]>>>24-s%4*8&255;t[r+s>>>2]|=i<<24-(r+s)%4*8}else for(s=0;s<o;s+=4)t[r+s>>>2]=n[s>>>2];return this.sigBytes+=o,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=s.clone.call(this);return e.words=this.words.slice(0),e},random:function(t){for(var n,r=[],o=function(t){t=t;var n=987654321,r=4294967295;return function(){var o=((n=36969*(65535&n)+(n>>16)&r)<<16)+(t=18e3*(65535&t)+(t>>16)&r)&r;return o/=4294967296,(o+=.5)*(e.random()>.5?1:-1)}},s=0;s<t;s+=4){var a=o(4294967296*(n||e.random()));n=987654071*a(),r.push(4294967296*a()|0)}return new i.init(r,t)}}),a=r.enc={},c=a.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var s=t[o>>>2]>>>24-o%4*8&255;r.push((s>>>4).toString(16)),r.push((15&s).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new i.init(n,t/2)}},u=a.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var s=t[o>>>2]>>>24-o%4*8&255;r.push(String.fromCharCode(s))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new i.init(n,t)}},l=a.Utf8={stringify:function(e){try{return decodeURIComponent(escape(u.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return u.parse(unescape(encodeURIComponent(e)))}},f=o.BufferedBlockAlgorithm=s.extend({reset:function(){this._data=new i.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=l.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n=this._data,r=n.words,o=n.sigBytes,s=this.blockSize,a=o/(4*s),c=(a=t?e.ceil(a):e.max((0|a)-this._minBufferSize,0))*s,u=e.min(4*c,o);if(c){for(var l=0;l<c;l+=s)this._doProcessBlock(r,l);var f=r.splice(0,c);n.sigBytes-=u}return new i.init(f,u)},clone:function(){var e=s.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),p=(o.Hasher=f.extend({cfg:s.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){f.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new p.HMAC.init(e,n).finalize(t)}}}),r.algo={});return r}(Math),n)})),o=(n((function(e,t){var n;e.exports=(n=r,function(e){var t=n,r=t.lib,o=r.WordArray,s=r.Hasher,i=t.algo,a=[];!function(){for(var t=0;t<64;t++)a[t]=4294967296*e.abs(e.sin(t+1))|0}();var c=i.MD5=s.extend({_doReset:function(){this._hash=new o.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var r=t+n,o=e[r];e[r]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8)}var s=this._hash.words,i=e[t+0],c=e[t+1],h=e[t+2],d=e[t+3],y=e[t+4],v=e[t+5],g=e[t+6],_=e[t+7],m=e[t+8],b=e[t+9],w=e[t+10],E=e[t+11],T=e[t+12],O=e[t+13],S=e[t+14],k=e[t+15],A=s[0],P=s[1],I=s[2],N=s[3];A=u(A,P,I,N,i,7,a[0]),N=u(N,A,P,I,c,12,a[1]),I=u(I,N,A,P,h,17,a[2]),P=u(P,I,N,A,d,22,a[3]),A=u(A,P,I,N,y,7,a[4]),N=u(N,A,P,I,v,12,a[5]),I=u(I,N,A,P,g,17,a[6]),P=u(P,I,N,A,_,22,a[7]),A=u(A,P,I,N,m,7,a[8]),N=u(N,A,P,I,b,12,a[9]),I=u(I,N,A,P,w,17,a[10]),P=u(P,I,N,A,E,22,a[11]),A=u(A,P,I,N,T,7,a[12]),N=u(N,A,P,I,O,12,a[13]),I=u(I,N,A,P,S,17,a[14]),A=l(A,P=u(P,I,N,A,k,22,a[15]),I,N,c,5,a[16]),N=l(N,A,P,I,g,9,a[17]),I=l(I,N,A,P,E,14,a[18]),P=l(P,I,N,A,i,20,a[19]),A=l(A,P,I,N,v,5,a[20]),N=l(N,A,P,I,w,9,a[21]),I=l(I,N,A,P,k,14,a[22]),P=l(P,I,N,A,y,20,a[23]),A=l(A,P,I,N,b,5,a[24]),N=l(N,A,P,I,S,9,a[25]),I=l(I,N,A,P,d,14,a[26]),P=l(P,I,N,A,m,20,a[27]),A=l(A,P,I,N,O,5,a[28]),N=l(N,A,P,I,h,9,a[29]),I=l(I,N,A,P,_,14,a[30]),A=f(A,P=l(P,I,N,A,T,20,a[31]),I,N,v,4,a[32]),N=f(N,A,P,I,m,11,a[33]),I=f(I,N,A,P,E,16,a[34]),P=f(P,I,N,A,S,23,a[35]),A=f(A,P,I,N,c,4,a[36]),N=f(N,A,P,I,y,11,a[37]),I=f(I,N,A,P,_,16,a[38]),P=f(P,I,N,A,w,23,a[39]),A=f(A,P,I,N,O,4,a[40]),N=f(N,A,P,I,i,11,a[41]),I=f(I,N,A,P,d,16,a[42]),P=f(P,I,N,A,g,23,a[43]),A=f(A,P,I,N,b,4,a[44]),N=f(N,A,P,I,T,11,a[45]),I=f(I,N,A,P,k,16,a[46]),A=p(A,P=f(P,I,N,A,h,23,a[47]),I,N,i,6,a[48]),N=p(N,A,P,I,_,10,a[49]),I=p(I,N,A,P,S,15,a[50]),P=p(P,I,N,A,v,21,a[51]),A=p(A,P,I,N,T,6,a[52]),N=p(N,A,P,I,d,10,a[53]),I=p(I,N,A,P,w,15,a[54]),P=p(P,I,N,A,c,21,a[55]),A=p(A,P,I,N,m,6,a[56]),N=p(N,A,P,I,k,10,a[57]),I=p(I,N,A,P,g,15,a[58]),P=p(P,I,N,A,O,21,a[59]),A=p(A,P,I,N,y,6,a[60]),N=p(N,A,P,I,E,10,a[61]),I=p(I,N,A,P,h,15,a[62]),P=p(P,I,N,A,b,21,a[63]),s[0]=s[0]+A|0,s[1]=s[1]+P|0,s[2]=s[2]+I|0,s[3]=s[3]+N|0},_doFinalize:function(){var t=this._data,n=t.words,r=8*this._nDataBytes,o=8*t.sigBytes;n[o>>>5]|=128<<24-o%32;var s=e.floor(r/4294967296),i=r;n[15+(o+64>>>9<<4)]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),n[14+(o+64>>>9<<4)]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),t.sigBytes=4*(n.length+1),this._process();for(var a=this._hash,c=a.words,u=0;u<4;u++){var l=c[u];c[u]=16711935&(l<<8|l>>>24)|4278255360&(l<<24|l>>>8)}return a},clone:function(){var e=s.clone.call(this);return e._hash=this._hash.clone(),e}});function u(e,t,n,r,o,s,i){var a=e+(t&n|~t&r)+o+i;return(a<<s|a>>>32-s)+t}function l(e,t,n,r,o,s,i){var a=e+(t&r|n&~r)+o+i;return(a<<s|a>>>32-s)+t}function f(e,t,n,r,o,s,i){var a=e+(t^n^r)+o+i;return(a<<s|a>>>32-s)+t}function p(e,t,n,r,o,s,i){var a=e+(n^(t|~r))+o+i;return(a<<s|a>>>32-s)+t}t.MD5=s._createHelper(c),t.HmacMD5=s._createHmacHelper(c)}(Math),n.MD5)})),n((function(e,t){var n,o,s;e.exports=(o=(n=r).lib.Base,s=n.enc.Utf8,void(n.algo.HMAC=o.extend({init:function(e,t){e=this._hasher=new e.init,"string"==typeof t&&(t=s.parse(t));var n=e.blockSize,r=4*n;t.sigBytes>r&&(t=e.finalize(t)),t.clamp();for(var o=this._oKey=t.clone(),i=this._iKey=t.clone(),a=o.words,c=i.words,u=0;u<n;u++)a[u]^=1549556828,c[u]^=909522486;o.sigBytes=i.sigBytes=r,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,n=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(n))}})))})),n((function(e,t){e.exports=r.HmacMD5})));class s extends Error{constructor(e){super(e.message),this.errMsg=e.message||"",Object.defineProperties(this,{code:{get:()=>e.code},requestId:{get:()=>e.requestId},message:{get(){return this.errMsg},set(e){this.errMsg=e}}})}}var i={sign:function(e,t){let n="";return Object.keys(e).sort().forEach((function(t){e[t]&&(n=n+"&"+t+"="+e[t])})),n=n.slice(1),o(n,t).toString()},wrappedRequest:function(e){return new Promise((t,n)=>{uni.request(Object.assign(e,{complete(e){e||(e={}),0===e.errMsg.indexOf("request:fail")&&"h5"==="mp-baidu"&&"development"==="development"&&console.warn("发布H5，需要在uniCloud后台操作，绑定安全域名，否则会因为跨域问题而无法访问。教程参考：https://uniapp.dcloud.io/uniCloud/quickstart?id=H5%E4%B8%AD%E4%BD%BF%E7%94%A8unicloud");const r=e.data&&e.data.header&&e.data.header["x-serverless-request-id"];if(!e.statusCode||e.statusCode>=400)return n(new s({code:"SYS_ERR",message:e.errMsg||"request:fail",requestId:r}));const o=e.data;if(o.error)return n(new s({code:o.error.code,message:o.error.message,requestId:r}));o.result=o.data,o.requestId=r,delete o.data,t(o)}}))})}};const a={image:"image/*",jpg:"image/jpeg",jpeg:"image/jpeg",png:"image/png",gif:"image/gif",webp:"image/webp",svg:"image/svg+xml",mp3:"audio/mp3",mp4:"video/mp4",ogg:"audio/ogg",webm:"video/webm"};function c(e){return a[e.toLowerCase()]}class u{constructor(e){["spaceId","clientSecret"].forEach(t=>{if(!Object.prototype.hasOwnProperty.call(e,t))throw new Error(`缺少参数${t}`)}),this.config=Object.assign({},{endpoint:"https://api.bspapp.com"},e),this.config.provider="aliyun",this.config.requestUrl=this.config.endpoint+"/client",this.config.envType=this.config.envType||"public",this.config.accessTokenKey="access_token_"+this.config.spaceId}get hasAccessToken(){return!!this.accessToken}setAccessToken(e){this.accessToken=e}requestAuth(e){return i.wrappedRequest(e)}request(e,t){return this.hasAccessToken?t?i.wrappedRequest(e):i.wrappedRequest(e).catch(t=>new Promise((e,n)=>{!t||"GATEWAY_INVALID_TOKEN"!==t.code&&"InvalidParameter.InvalidToken"!==t.code?n(t):e()}).then(()=>this.getAccessToken()).then(()=>{const t=this.rebuildRequest(e);return this.request(t,!0)})):this.getAccessToken().then(()=>{const t=this.rebuildRequest(e);return this.request(t,!0)})}rebuildRequest(e){const t=Object.assign({},e);return t.data.token=this.accessToken,t.header["x-basement-token"]=this.accessToken,t.header["x-serverless-sign"]=i.sign(t.data,this.config.clientSecret),t}setupRequest(e,t){const n=Object.assign({},e,{spaceId:this.config.spaceId,timestamp:Date.now()}),r={"Content-Type":"application/json"};return"auth"!==t&&(n.token=this.accessToken,r["x-basement-token"]=this.accessToken),r["x-serverless-sign"]=i.sign(n,this.config.clientSecret),{url:this.config.requestUrl,method:"POST",data:n,dataType:"json",header:r}}getAccessToken(){return this.requestAuth(this.setupRequest({method:"serverless.auth.user.anonymousAuthorize",params:"{}"},"auth")).then(e=>new Promise((t,n)=>{e.result&&e.result.accessToken?(this.setAccessToken(e.result.accessToken),t(this.accessToken)):n(new s({code:"AUTH_FAILED",message:"获取accessToken失败"}))}))}authorize(){this.getAccessToken()}callFunction(e){const t={method:"serverless.function.runtime.invoke",params:JSON.stringify({functionTarget:e.name,functionArgs:e.data||{}})};return this.config.useDebugFunction?this.request(this.setupRequest(t)).then(t=>{if(t&&t.requestId){const n=JSON.stringify({spaceId:this.config.spaceId,functionName:e.name,requestId:t.requestId});console.log(`[aliyun-request]${n}[/aliyun-request]`)}return Promise.resolve(t)}).catch(t=>{if(t&&t.requestId){const n=JSON.stringify({spaceId:this.config.spaceId,functionName:e.name,requestId:t.requestId});console.log(`[aliyun-request]${n}[/aliyun-request]`)}return Promise.reject(t)}):this.request(this.setupRequest(t))}getOSSUploadOptionsFromPath(e){const t={method:"serverless.file.resource.generateProximalSign",params:JSON.stringify(e)};return this.request(this.setupRequest(t))}uploadFileToOSS({url:e,formData:t,fileName:n,name:r,filePath:o,fileType:i,contentType:a,onUploadProgress:c}){return new Promise((a,u)=>{const l=uni.uploadFile({url:e,formData:t,fileName:n,name:r,filePath:o,fileType:i,header:{"X-OSS-server-side-encrpytion":"AES256"},success(e){e&&e.statusCode<400?a(e):u(new s({code:"UPLOAD_FAILED",message:"文件上传失败"}))},fail(e){u(e)}});"function"==typeof c&&l.onProgressUpdate(e=>{c({loaded:e.totalBytesSent,total:e.totalBytesExpectedToSend})})})}reportOSSUpload(e){const t={method:"serverless.file.resource.report",params:JSON.stringify(e)};return this.request(this.setupRequest(t))}uploadFile({filePath:e,cloudPath:t,onUploadProgress:n,config:r}){const o=r&&r.envType||this.config.envType;let i,u,l,f,p,h=t||e.split("/").pop();return(i= false?undefined:c(u=e.split("?")[0].split(".").pop())?Promise.resolve():Promise.reject(new s({code:"UNSUPPORTED_FILE_TYPE",message:"不支持的文件类型"}))).then(()=>new Promise((t,n)=>{uni.getFileInfo?uni.getFileInfo({filePath:e,success(e){t(e.size)},fail(e){n(e)}}):t(0)})).then(e=>this.getOSSUploadOptionsFromPath({env:o,filename:h,size:e})).then(t=>{const r=t.result;l=c(u),f=r.id,p="https://"+r.cdnDomain+"/"+r.ossPath;const o={url:"https://"+r.host,formData:{"Cache-Control":"max-age=2592000","Content-Disposition":"attachment",OSSAccessKeyId:r.accessKeyId,Signature:r.signature,host:r.host,id:f,key:r.ossPath,policy:r.policy,success_action_status:200},fileName:"file",name:"file",filePath:e,fileType:"image",contentType:l};return this.uploadFileToOSS(Object.assign({},o,{onUploadProgress:n}))}).then(()=>this.reportOSSUpload({id:f,contentType:l})).then(t=>new Promise((n,r)=>{t.success?n({success:!0,filePath:e,fileID:p}):r(new s({code:"UPLOAD_FAILED",message:"文件上传失败"}))}))}deleteFile({fileList:e}){const t={method:"serverless.file.resource.delete",params:JSON.stringify({id:e[0]})};return this.request(this.setupRequest(t))}}const l=__webpack_require__(/*! uni-stat-config */ 8).default||__webpack_require__(/*! uni-stat-config */ 8),f="__DC_STAT_UUID",p="__DC_UUID_VALUE",h="https://ide.dcloud.net.cn/serverless/function/invoke";let d,y;function v(){if("n"===g()){try{d=plus.runtime.getDCloudId()}catch(e){d=""}return d}return d||(d=Date.now()+""+Math.floor(1e7*Math.random()),uni.setStorage({key:f,data:d})),d}function g(){return{"app-plus":"n",h5:"h5","mp-weixin":"wx","mp-alipay":"ali","mp-baidu":"bd","mp-toutiao":"tt","mp-qq":"qq","quickapp-vue":"qv"}["mp-baidu"]}function _(e){return function(t){if(!((t=t||{}).success||t.fail||t.complete))return e.call(this,t);e.call(this,t).then(e=>{t.success&&t.success(e),t.complete&&t.complete(e)}).catch(e=>{t.fail&&t.fail(e),t.complete&&t.complete(e)})}}setTimeout((function(){uni.getStorage({key:f,success(e){d=e.data},fail(){d=p}}),y="qv"===g()?"android":uni.getSystemInfoSync().platform}),0);const m={init(e){const t=new u(e);return["uploadFile","deleteFile"].forEach(e=>{t[e]=_(t[e]).bind(t)}),setTimeout(()=>{t.authorize()},0),t}};var b;function w(e,t,n){void 0===n&&(n={});var r=/\?/.test(t),o="";for(var s in n)""===o?!r&&(t+="?"):o+="&",o+=s+"="+encodeURIComponent(n[s]);return/^http(s)?\:\/\//.test(t+=o)?t:""+e+t}!function(e){e.local="local",e.none="none",e.session="session"}(b||(b={}));var E,T=(E=function(e,t){return(E=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}E(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),O=function(){return(O=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};var S=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return T(t,e),t.prototype.post=function(e){var t=e.url,n=e.data,r=e.headers;return new Promise((function(e,o){uni.request({url:w("https:",t),data:n,method:"POST",header:r,success:function(t){e(t)},fail:function(e){o(e)}})}))},t.prototype.upload=function(e){return new Promise((function(t){var n=e.url,r=e.file,o=e.data,s=e.headers;uni.uploadFile({url:w("https:",n),name:"file",formData:Object.assign({},o),filePath:r,header:s,success:function(e){var n={statusCode:e.statusCode,data:e.data||{}};200===e.statusCode&&o.success_action_status&&(n.statusCode=parseInt(o.success_action_status,10)),t(n)},fail:function(e){t(e)}})}))},t.prototype.download=function(e){var t=e.url,n=e.headers;return new Promise((function(e,r){uni.downloadFile({url:w("https:",t),header:n,success:function(t){200===t.statusCode&&t.tempFilePath?e({statusCode:200,tempFilePath:t.tempFilePath}):e(t)},fail:function(e){r(e)}})}))},t}((function(){})),k={setItem:function(e,t){uni.setStorageSync(e,t)},getItem:function(e){return uni.getStorageSync(e)},removeItem:function(e){uni.removeStorageSync(e)},clear:function(){uni.clearStorageSync()}},A=function(e,t){void 0===t&&(t={});var n=uni.connectSocket(O({url:e},t));return{set onopen(e){n.onOpen(e)},set onmessage(e){n.onMessage(e)},set onclose(e){n.onClose(e)},set onerror(e){n.onError(e)},send:function(e){return n.send({data:e})},close:function(e,t){return n.close({code:e,reason:t})},get readyState(){return n.readyState},CONNECTING:0,OPEN:1,CLOSING:2,CLOSED:3}};var P={genAdapter:function(){return{root:{},reqClass:S,wsClass:A,localStorage:k,primaryStorage:b.local}},isMatch:function(){return"undefined"!=typeof uni&&!!uni.request},runtime:"uni_app"},I=n((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.getQuery=function(e,t){if("undefined"==typeof window)return!1;var n=t||window.location.search,r=new RegExp("(^|&)"+e+"=([^&]*)(&|$)"),o=n.substr(n.indexOf("?")+1).match(r);return null!=o?o[2]:""},t.getHash=function(e){var t=window.location.hash.match(new RegExp("[#?&/]"+e+"=([^&#]*)"));return t?t[1]:""},t.removeParam=function(e,t){var n=t.split("?")[0],r=[],o=-1!==t.indexOf("?")?t.split("?")[1]:"";if(""!==o){for(var s=(r=o.split("&")).length-1;s>=0;s-=1)r[s].split("=")[0]===e&&r.splice(s,1);n=n+"?"+r.join("&")}return n},t.createPromiseCallback=function(){var e;if(!Promise){(e=function(){}).promise={};var t=function(){throw new Error('Your Node runtime does support ES6 Promises. Set "global.Promise" to your preferred implementation of promises.')};return Object.defineProperty(e.promise,"then",{get:t}),Object.defineProperty(e.promise,"catch",{get:t}),e}var n=new Promise((function(t,n){e=function(e,r){return e?n(e):t(r)}}));return e.promise=n,e},t.getWeixinCode=function(){return t.getQuery("code")||t.getHash("code")},t.getMiniAppCode=function(){return new Promise((function(e,t){wx.login({success:function(t){e(t.code)},fail:function(e){t(e)}})}))},t.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},t.isString=function(e){return"string"==typeof e},t.isUndefined=function(e){return void 0===e},t.isInstanceOf=function(e,t){return e instanceof t},t.isFormData=function(e){return"[object FormData]"===Object.prototype.toString.call(e)},t.genSeqId=function(){return Math.random().toString(16).slice(2)},t.getArgNames=function(e){var t=e.toString();return t.slice(t.indexOf("(")+1,t.indexOf(")")).match(/([^\s,]+)/g)},t.formatUrl=function(e,t,n){void 0===n&&(n={});var r=/\?/.test(t),o="";for(var s in n)""===o?!r&&(t+="?"):o+="&",o+=s+"="+encodeURIComponent(n[s]);return/^http(s)?\:\/\//.test(t+=o)?t:""+e+t}}));t(I);I.getQuery,I.getHash,I.removeParam,I.createPromiseCallback,I.getWeixinCode,I.getMiniAppCode,I.isArray,I.isString,I.isUndefined,I.isInstanceOf,I.isFormData,I.genSeqId,I.getArgNames,I.formatUrl;var N,C="dist/index.js",R="./dist/index.d.ts",x={build:"npm run tsc && webpack",tsc:"tsc -p tsconfig.json","tsc:w":"tsc -p tsconfig.json -w",test:"jest --verbose false -i",e2e:'NODE_ENV=e2e webpack && jest --config="./jest.e2e.config.js"  --verbose false -i "e2e"',start:"webpack-dev-server --hot --open",eslint:'eslint "./**/*.js" "./**/*.ts"',"eslint-fix":'eslint --fix "./**/*.js" "./**/*.ts"',test_web:"npm run tsc && webpack-dev-server --devtool eval-source-map --progress --colors --hot --inline --content-base ./dist --host jimmytest-088bef.tcb.qcloud.la --port 80 --disableHostCheck true --mode development --config webpack.test.js"},q={type:"git",url:"https://github.com/TencentCloudBase/tcb-js-sdk"},U=["tcb","js-sdk"],j={"@cloudbase/adapter-interface":"^0.2.0","@cloudbase/adapter-wx_mp":"^0.2.1","@cloudbase/database":"^0.9.8"},L={"@babel/core":"^7.6.2","@babel/plugin-proposal-class-properties":"^7.5.5","@babel/plugin-proposal-object-rest-spread":"^7.6.2","@babel/plugin-transform-runtime":"^7.6.2","@babel/preset-env":"^7.6.2","@babel/preset-typescript":"^7.6.0","@babel/runtime":"^7.6.2","@types/jest":"^23.1.4","@types/node":"^10.14.4","@types/superagent":"^4.1.4",axios:"^0.19.0","babel-eslint":"^10.0.1","babel-loader":"^8.0.6","babel-polyfill":"^6.26.0",eslint:"^5.16.0","eslint-config-alloy":"^1.4.2","eslint-config-prettier":"^4.1.0","eslint-plugin-prettier":"^3.0.1","eslint-plugin-typescript":"^1.0.0-rc.3",express:"^4.17.1",husky:"^3.1.0",jest:"^24.7.1","jest-puppeteer":"^4.3.0","lint-staged":"^9.5.0","power-assert":"^1.6.1",puppeteer:"^1.20.0","serve-static":"^1.14.1","ts-jest":"^23.10.4","ts-loader":"^6.2.1",typescript:"^3.4.3","typescript-eslint-parser":"^22.0.0",webpack:"^4.41.3","webpack-bundle-analyzer":"^3.4.1","webpack-cli":"^3.3.0","webpack-dev-server":"^3.3.1","webpack-merge":"^4.2.2","webpack-visualizer-plugin":"^0.1.11"},D={hooks:{"pre-commit":"lint-staged"}},F={name:"tcb-js-sdk",version:"1.3.5",description:"js sdk for tcb",main:C,types:R,scripts:x,repository:q,keywords:U,author:"jimmyjzhang",license:"ISC",dependencies:j,devDependencies:L,husky:D,"lint-staged":{"*.{js,ts}":["eslint --fix","git add"]}},M=(N=Object.freeze({__proto__:null,name:"tcb-js-sdk",version:"1.3.5",description:"js sdk for tcb",main:C,types:R,scripts:x,repository:q,keywords:U,author:"jimmyjzhang",license:"ISC",dependencies:j,devDependencies:L,husky:D,default:F}))&&N.default||N,K=n((function(t,n){var r=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(n,"__esModule",{value:!0});var o=r(M);n.SDK_VERISON=o.version,n.ACCESS_TOKEN="access_token",n.ACCESS_TOKEN_Expire="access_token_expire",n.REFRESH_TOKEN="refresh_token",n.ANONYMOUS_UUID="anonymous_uuid",n.LOGIN_TYPE_KEY="login_type",n.protocol="undefined"!=typeof location&&"http:"===location.protocol?"http:":"https:",n.BASE_URL= false?undefined:"//tcb-api.tencentcloudapi.com/web"}));t(K);var G;K.SDK_VERISON,K.ACCESS_TOKEN,K.ACCESS_TOKEN_Expire,K.REFRESH_TOKEN,K.ANONYMOUS_UUID,K.LOGIN_TYPE_KEY,K.protocol,K.BASE_URL;!function(e){e.local="local",e.none="none",e.session="session"}(G||(G={}));var H=function(){},Y=function(){};var V=Object.freeze({__proto__:null,get StorageType(){return G},AbstractSDKRequest:H,AbstractStorage:Y,formatUrl:function(e,t,n){void 0===n&&(n={});var r=/\?/.test(t),o="";for(var s in n)""===o?!r&&(t+="?"):o+="&",o+=s+"="+encodeURIComponent(n[s]);return/^http(s)?\:\/\//.test(t+=o)?t:""+e+t}}),B=n((function(t,n){var r=e&&e.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=e&&e.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},s=e&&e.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function i(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},i=e&&e.__generator||function(e,t){var n,r,o,s,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===s[0]||2===s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}};Object.defineProperty(n,"__esModule",{value:!0});var a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.get=function(e){return this._request(o(o({},e),{method:"get"}))},t.prototype.post=function(e){return this._request(o(o({},e),{method:"post"}))},t.prototype.upload=function(e){var t=e.data,n=e.file,r=e.name,s=new FormData;for(var i in t)s.append(i,t[i]);return s.append("key",r),s.append("file",n),this._request(o(o({},e),{data:s,method:"post"}))},t.prototype.download=function(e){return s(this,void 0,void 0,(function(){var t,n;return i(this,(function(r){return t=decodeURIComponent(new URL(e.url).pathname.split("/").pop()||""),(n=document.createElement("a")).href=e.url,n.setAttribute("download",t),n.setAttribute("target","_blank"),document.body.appendChild(n),n.click(),[2,new Promise((function(t){t({statusCode:200,tempFilePath:e.url})}))]}))}))},t.prototype._request=function(e){var t=String(e.method).toLowerCase()||"get";return new Promise((function(n){var r=e.url,o=e.headers,s=void 0===o?{}:o,i=e.data,a=e.responseType,c=I.formatUrl(K.protocol,r,"get"===t?i:{}),u=new XMLHttpRequest;for(var l in u.open(t,c),a&&(u.responseType=a),s)u.setRequestHeader(l,s[l]);u.onreadystatechange=function(){if(4===u.readyState){var e={statusCode:u.status};try{e.data=JSON.parse(u.responseText)}catch(e){}n(e)}},u.send("post"===t&&I.isFormData(i)?i:JSON.stringify(i||{}))}))},t}(V.AbstractSDKRequest);n.WebRequest=a,n.genAdapter=function(){return{root:window,reqClass:a,wsClass:WebSocket,localStorage:localStorage,sessionStorage:sessionStorage}}}));t(B);B.WebRequest,B.genAdapter;var W=n((function(t,n){var r=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(n,"__esModule",{value:!0});var o,s=r(B);!function(e){e.WEB="web",e.WX_MP="wx_mp"}(o=n.RUNTIME||(n.RUNTIME={})),n.useAdapters=function(e){for(var t=0,n=I.isArray(e)?e:[e];t<n.length;t++){var r=n[t],o=r.isMatch,s=r.genAdapter,i=r.runtime;if(o())return{adapter:s(),runtime:i}}},n.useDefaultAdapter=function(){return{adapter:s.genAdapter(),runtime:o.WEB}},n.Adapter={adapter:null,runtime:void 0}}));t(W);W.RUNTIME,W.useAdapters,W.useDefaultAdapter,W.Adapter;var z=n((function(t,n){var r=e&&e.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e){switch(W.Adapter.adapter.primaryStorage||e){case"local":this.storageClass=W.Adapter.adapter.localStorage||new s;break;case"none":this.storageClass=new s;break;default:this.storageClass=W.Adapter.adapter.sessionStorage||new s}}return e.prototype.setStore=function(e,t,n){try{if(!this.storageClass)return}catch(e){return}var r,o={};o.version=n||"localCachev1",o.content=t,r=JSON.stringify(o);try{this.storageClass.setItem(e,r)}catch(e){return}},e.prototype.getStore=function(e,t){try{if(!this.storageClass)return}catch(e){return""}t=t||"localCachev1";var n=this.storageClass.getItem(e);return n&&n.indexOf(t)>=0?JSON.parse(n).content:""},e.prototype.removeStore=function(e){this.storageClass.removeItem(e)},e}();n.Cache=o;var s=function(e){function t(){var t=e.call(this)||this;return W.Adapter.adapter.root.tcbObject||(W.Adapter.adapter.root.tcbObject={}),t}return r(t,e),t.prototype.setItem=function(e,t){W.Adapter.adapter.root.tcbObject[e]=t},t.prototype.getItem=function(e){return W.Adapter.adapter.root.tcbObject[e]},t.prototype.removeItem=function(e){delete W.Adapter.adapter.root.tcbObject[e]},t.prototype.clear=function(){delete W.Adapter.adapter.root.tcbObject},t}(V.AbstractStorage)}));t(z);z.Cache;var J=n((function(t,n){var r=e&&e.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=e&&e.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var s=arguments[t],i=0,a=s.length;i<a;i++,o++)r[o]=s[i];return r};Object.defineProperty(n,"__esModule",{value:!0});var s=function(e,t){this.data=t||null,this.name=e};n.IEvent=s;var i=function(e){function t(t,n){var r=e.call(this,"error",{error:t,data:n})||this;return r.error=t,r}return r(t,e),t}(s);n.IErrorEvent=i;var a=function(){function e(){this._listeners={}}return e.prototype.on=function(e,t){return function(e,t,n){n[e]=n[e]||[],n[e].push(t)}(e,t,this._listeners),this},e.prototype.off=function(e,t){return function(e,t,n){if(n&&n[e]){var r=n[e].indexOf(t);-1!==r&&n[e].splice(r,1)}}(e,t,this._listeners),this},e.prototype.fire=function(e,t){if(I.isInstanceOf(e,i))return console.error(e.error),this;var n=I.isString(e)?new s(e,t||{}):e,r=n.name;if(this._listens(r)){n.target=this;for(var a=0,c=this._listeners[r]?o(this._listeners[r]):[];a<c.length;a++){c[a].call(this,n)}}return this},e.prototype._listens=function(e){return this._listeners[e]&&this._listeners[e].length>0},e}();n.IEventEmitter=a;var c=new a;n.addEventListener=function(e,t){c.on(e,t)},n.activateEvent=function(e,t){void 0===t&&(t={}),c.fire(e,t)},n.removeEventListener=function(e,t){c.off(e,t)},n.EVENTS={LOGIN_STATE_CHANGED:"loginStateChanged",LOGIN_STATE_EXPIRE:"loginStateExpire",LOGIN_TYPE_CHANGE:"loginTypeChanged",ANONYMOUS_CONVERTED:"anonymousConverted",REFRESH_ACCESS_TOKEN:"refreshAccessToken"}}));t(J);J.IEvent,J.IErrorEvent,J.IEventEmitter,J.addEventListener,J.activateEvent,J.removeEventListener,J.EVENTS;var X=n((function(t,n){var r=e&&e.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=e&&e.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function i(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},s=e&&e.__generator||function(e,t){var n,r,o,s,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===s[0]||2===s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}};Object.defineProperty(n,"__esModule",{value:!0});var i=["auth.getJwt","auth.logout","auth.signInWithTicket","auth.signInAnonymously"],a={"X-SDK-Version":K.SDK_VERISON};function c(e,t,n){var o=e[t];e[t]=function(t){var s={},i={};n.forEach((function(n){var r=n.call(e,t),o=r.data,a=r.headers;Object.assign(s,o),Object.assign(i,a)}));var a=t.data;return a&&function(){if(I.isFormData(a))for(var e in s)a.append(e,s[e]);else t.data=r(r({},a),s)}(),t.headers=r(r({},t.headers||{}),i),o.call(e,t)}}function u(){var e=I.genSeqId();return{data:{seqId:e},headers:r(r({},a),{"x-seqid":e})}}var l=function(){function e(e){void 0===e&&(e={}),this.config=e,this.cache=new z.Cache(e.persistence),this.accessTokenKey=K.ACCESS_TOKEN+"_"+e.env,this.accessTokenExpireKey=K.ACCESS_TOKEN_Expire+"_"+e.env,this.refreshTokenKey=K.REFRESH_TOKEN+"_"+e.env,this.anonymousUuidKey=K.ANONYMOUS_UUID+"_"+e.env,this.loginTypeKey=K.LOGIN_TYPE_KEY+"_"+e.env,this._reqClass=new W.Adapter.adapter.reqClass,c(this._reqClass,"post",[u]),c(this._reqClass,"upload",[u]),c(this._reqClass,"download",[u])}return e.prototype.post=function(e){return o(this,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,this._reqClass.post(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.upload=function(e){return o(this,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,this._reqClass.upload(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.download=function(e){return o(this,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,this._reqClass.download(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.refreshAccessToken=function(){return o(this,void 0,void 0,(function(){var e,t,n;return s(this,(function(r){switch(r.label){case 0:this._refreshAccessTokenPromise||(this._refreshAccessTokenPromise=this._refreshAccessToken()),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this._refreshAccessTokenPromise];case 2:return e=r.sent(),[3,4];case 3:return n=r.sent(),t=n,[3,4];case 4:if(this._refreshAccessTokenPromise=null,this._shouldRefreshAccessTokenHook=null,t)throw t;return[2,e]}}))}))},e.prototype._refreshAccessToken=function(){return o(this,void 0,void 0,(function(){var e,t,n,r;return s(this,(function(o){switch(o.label){case 0:if(this.cache.removeStore(this.accessTokenKey),this.cache.removeStore(this.accessTokenExpireKey),!(e=this.cache.getStore(this.refreshTokenKey)))throw new Error("[tcb-js-sdk] 未登录CloudBase");return t={refresh_token:e},this.cache.getStore(this.loginTypeKey)===$.LOGINTYPE.ANONYMOUS&&(t.anonymous_uuid=this.cache.getStore(this.anonymousUuidKey)),[4,this.request("auth.getJwt",t)];case 1:if((n=o.sent()).data.code)throw"SIGN_PARAM_INVALID"!==(r=n.data.code)&&"REFRESH_TOKEN_EXPIRED"!==r&&"INVALID_REFRESH_TOKEN"!==r||(J.activateEvent(J.EVENTS.LOGIN_STATE_EXPIRE),this.cache.removeStore(this.refreshTokenKey)),new Error("[tcb-js-sdk] 刷新access token失败："+n.data.code);return n.data.access_token?(J.activateEvent(J.EVENTS.REFRESH_ACCESS_TOKEN),this.cache.setStore(this.accessTokenKey,n.data.access_token),this.cache.setStore(this.accessTokenExpireKey,n.data.access_token_expire+Date.now()),J.activateEvent(J.EVENTS.LOGIN_TYPE_CHANGE,n.data.login_type),[2,{accessToken:n.data.access_token,accessTokenExpire:n.data.access_token_expire}]):(n.data.refresh_token&&(this.cache.removeStore(this.refreshTokenKey),this.cache.setStore(this.refreshTokenKey,n.data.refresh_token),this._refreshAccessToken()),[2])}}))}))},e.prototype.getAccessToken=function(){return o(this,void 0,void 0,(function(){var e,t,n,r;return s(this,(function(o){switch(o.label){case 0:return e=this.cache.getStore(this.accessTokenKey),t=this.cache.getStore(this.accessTokenExpireKey),n=!0,(r=this._shouldRefreshAccessTokenHook)?[4,this._shouldRefreshAccessTokenHook(e,t)]:[3,2];case 1:r=!o.sent(),o.label=2;case 2:return r&&(n=!1),(!e||!t||t<Date.now())&&n?[2,this.refreshAccessToken()]:[2,{accessToken:e,accessTokenExpire:t}]}}))}))},e.prototype.request=function(e,t,n){return o(this,void 0,void 0,(function(){var o,a,c,u,l,f,p,h,d,y,v,g;return s(this,(function(s){switch(s.label){case 0:return o="application/x-www-form-urlencoded",a=r({action:e,env:this.config.env,dataVersion:"2019-08-16"},t),-1!==i.indexOf(e)?[3,2]:(c=a,[4,this.getAccessToken()]);case 1:c.access_token=s.sent().accessToken,s.label=2;case 2:if("storage.uploadFile"===e){for(l in u=new FormData)u.hasOwnProperty(l)&&void 0!==u[l]&&u.append(l,a[l]);o="multipart/form-data"}else o="application/json;charset=UTF-8",u=a;return f={headers:{"content-type":o}},n&&n.onUploadProgress&&(f.onUploadProgress=n.onUploadProgress),p=t.parse,h=t.query,d=t.search,y={env:this.config.env},p&&(y.parse=!0),h&&(y=r(r({},h),y)),v=I.formatUrl(K.protocol,K.BASE_URL,y),d&&(v+=d),[4,this.post(r({url:v,data:u},f))];case 3:if(g=s.sent(),200!==Number(g.status)&&200!==Number(g.statusCode)||!g.data)throw new Error("network request error");return[2,g]}}))}))},e.prototype.send=function(e,t){return void 0===t&&(t={}),o(this,void 0,void 0,(function(){var n,r,o;return s(this,(function(s){switch(s.label){case 0:return n=setTimeout((function(){console.warn("Database operation is longer than 3s. Please check query performance and your network environment.")}),3e3),[4,this.request(e,t,{onUploadProgress:t.onUploadProgress})];case 1:return r=s.sent(),clearTimeout(n),"ACCESS_TOKEN_EXPIRED"!==r.data.code||-1!==i.indexOf(e)?[3,4]:[4,this.refreshAccessToken()];case 2:return s.sent(),[4,this.request(e,t,{onUploadProgress:t.onUploadProgress})];case 3:if((o=s.sent()).data.code)throw new Error("["+o.data.code+"] "+o.data.message);return[2,o.data];case 4:if(r.data.code)throw new Error("["+r.data.code+"] "+r.data.message);return[2,r.data]}}))}))},e}();n.Request=l}));t(X);X.Request;var $=n((function(t,n){var r,o=e&&e.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function i(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},s=e&&e.__generator||function(e,t){var n,r,o,s,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===s[0]||2===s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),function(e){e.ANONYMOUS="ANONYMOUS",e.WECHAT="WECHAT",e.CUSTOM="CUSTOM",e.NULL="NULL"}(r=n.LOGINTYPE||(n.LOGINTYPE={}));var i=function(){function e(e){this._loginType=r.NULL,this.config=e,this.onLoginTypeChanged=this.onLoginTypeChanged.bind(this),J.addEventListener(J.EVENTS.LOGIN_TYPE_CHANGE,this.onLoginTypeChanged)}return e.prototype.init=function(){this.httpRequest=new X.Request(this.config),this.cache=new z.Cache(this.config.persistence),this.accessTokenKey=K.ACCESS_TOKEN+"_"+this.config.env,this.accessTokenExpireKey=K.ACCESS_TOKEN_Expire+"_"+this.config.env,this.refreshTokenKey=K.REFRESH_TOKEN+"_"+this.config.env,this.loginTypeKey=K.LOGIN_TYPE_KEY+"_"+this.config.env},e.prototype.onLoginTypeChanged=function(e){this._loginType=e.data,this.cache.setStore(this.loginTypeKey,this._loginType)},Object.defineProperty(e.prototype,"loginType",{get:function(){return this._loginType},enumerable:!0,configurable:!0}),e.prototype.setRefreshToken=function(e){this.cache.removeStore(this.accessTokenKey),this.cache.removeStore(this.accessTokenExpireKey),this.cache.setStore(this.refreshTokenKey,e)},e.prototype.getRefreshTokenByWXCode=function(e,t,n){return o(this,void 0,void 0,(function(){var r;return s(this,(function(o){return"auth.getJwt",r=W.Adapter.runtime===W.RUNTIME.WX_MP?"1":"0",[2,this.httpRequest.send("auth.getJwt",{appid:e,loginType:t,code:n,hybridMiniapp:r}).then((function(e){if(e.code)throw new Error("[tcb-js-sdk] 微信登录失败: "+e.code);if(e.refresh_token)return{refreshToken:e.refresh_token,accessToken:e.access_token,accessTokenExpire:e.access_token_expire};throw new Error("[tcb-js-sdk] getJwt未返回refreshToken")}))]}))}))},e}();n.default=i}));t($);$.LOGINTYPE;var Q=n((function(t,n){var r=e&&e.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=e&&e.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function i(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},s=e&&e.__generator||function(e,t){var n,r,o,s,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===s[0]||2===s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}},i=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(n,"__esModule",{value:!0});var a,c,u=i(I),l=i($);!function(e){e.snsapi_base="snsapi_base",e.snsapi_userinfo="snsapi_userinfo",e.snsapi_login="snsapi_login"}(a||(a={})),function(e){e.redirect="redirect",e.prompt="prompt"}(c||(c={}));var f={},p=function(e){function t(t,n,r,o,s){var i=e.call(this,t)||this;return i.config=t,i.appid=n,i.scope=W.Adapter.runtime===W.RUNTIME.WX_MP?"snsapi_base":r,i.state=s||"weixin",i.loginMode=o||"redirect",i}return r(t,e),t.prototype.signIn=function(){return o(this,void 0,void 0,(function(){var e,t,n;return s(this,(function(r){switch(r.label){case 0:f[this.config.env]||(f[this.config.env]=this._signIn()),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,f[this.config.env]];case 2:return e=r.sent(),[3,4];case 3:return n=r.sent(),t=n,[3,4];case 4:if(f[this.config.env]=null,t)throw t;return[2,e]}}))}))},t.prototype._signIn=function(){return o(this,void 0,void 0,(function(){var e,t,n,r,o,i;return s(this,(function(s){switch(s.label){case 0:if(e=this.cache.getStore(this.accessTokenKey),t=this.cache.getStore(this.accessTokenExpireKey),e){if(t&&t>Date.now())return[2,{credential:{accessToken:e,refreshToken:this.cache.getStore(this.refreshTokenKey)}}];this.cache.removeStore(this.accessTokenKey),this.cache.removeStore(this.accessTokenExpireKey)}if(!1===Object.values(a).includes(a[this.scope]))throw new Error("错误的scope类型");return W.Adapter.runtime!==W.RUNTIME.WX_MP?[3,2]:[4,u.getMiniAppCode()];case 1:return n=s.sent(),[3,4];case 2:return[4,u.getWeixinCode()];case 3:if(!(n=s.sent()))return[2,this.redirect()];s.label=4;case 4:return r=function(e){switch(e){case a.snsapi_login:return"WECHAT-OPEN";default:return"WECHAT-PUBLIC"}}(this.scope),[4,this.getRefreshTokenByWXCode(this.appid,r,n)];case 5:return o=s.sent(),i=o.refreshToken,this.cache.setStore(this.refreshTokenKey,i),o.accessToken&&this.cache.setStore(this.accessTokenKey,o.accessToken),o.accessTokenExpire&&this.cache.setStore(this.accessTokenExpireKey,o.accessTokenExpire+Date.now()),J.activateEvent(J.EVENTS.LOGIN_STATE_CHANGED),J.activateEvent(J.EVENTS.LOGIN_TYPE_CHANGE,l.LOGINTYPE.WECHAT),[2,{credential:{refreshToken:i}}]}}))}))},t.prototype.redirect=function(){var e=u.removeParam("code",location.href);e=u.removeParam("state",e),e=encodeURIComponent(e);var t="//open.weixin.qq.com/connect/oauth2/authorize";"snsapi_login"===this.scope&&(t="//open.weixin.qq.com/connect/qrconnect"),"redirect"===c[this.loginMode]&&(location.href=t+"?appid="+this.appid+"&redirect_uri="+e+"&response_type=code&scope="+this.scope+"&state="+this.state+"#wechat_redirect")},t}(l.default);n.default=p}));t(Q);var Z=n((function(t,n){var r=e&&e.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=e&&e.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},s=e&&e.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function i(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},i=e&&e.__generator||function(e,t){var n,r,o,s,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===s[0]||2===s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}},a=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(n,"__esModule",{value:!0});var c=a($),u=function(e){function t(t){var n=e.call(this,o(o({},t),{persistence:"local"}))||this;return n._anonymousUuidKey=K.ANONYMOUS_UUID+"_"+n.config.env,n._loginTypeKey=K.LOGIN_TYPE_KEY+"_"+n.config.env,n}return r(t,e),t.prototype.init=function(){e.prototype.init.call(this)},t.prototype.signIn=function(){return s(this,void 0,void 0,(function(){var e,t,n;return i(this,(function(r){switch(r.label){case 0:return e=this.cache.getStore(this._anonymousUuidKey)||void 0,t=this.cache.getStore(this.refreshTokenKey)||void 0,[4,this.httpRequest.send("auth.signInAnonymously",{anonymous_uuid:e,refresh_token:t})];case 1:return(n=r.sent()).uuid&&n.refresh_token?(this._setAnonymousUUID(n.uuid),this.setRefreshToken(n.refresh_token),[4,this.httpRequest.refreshAccessToken()]):[3,3];case 2:return r.sent(),J.activateEvent(J.EVENTS.LOGIN_STATE_CHANGED),J.activateEvent(J.EVENTS.LOGIN_TYPE_CHANGE,c.LOGINTYPE.ANONYMOUS),[2,{credential:{refreshToken:n.refresh_token}}];case 3:throw new Error("[tcb-js-sdk] 匿名登录失败")}}))}))},t.prototype.linkAndRetrieveDataWithTicket=function(e){return s(this,void 0,void 0,(function(){var t,n,r;return i(this,(function(o){switch(o.label){case 0:return t=this.cache.getStore(this._anonymousUuidKey),n=this.cache.getStore(this.refreshTokenKey),[4,this.httpRequest.send("auth.linkAndRetrieveDataWithTicket",{anonymous_uuid:t,refresh_token:n,ticket:e})];case 1:return(r=o.sent()).refresh_token?(this._clearAnonymousUUID(),this.setRefreshToken(r.refresh_token),[4,this.httpRequest.refreshAccessToken()]):[3,3];case 2:return o.sent(),J.activateEvent(J.EVENTS.ANONYMOUS_CONVERTED,{refresh_token:r.refresh_token}),J.activateEvent(J.EVENTS.LOGIN_TYPE_CHANGE,c.LOGINTYPE.CUSTOM),[2,{credential:{refreshToken:r.refresh_token}}];case 3:throw new Error("[tcb-js-sdk] 匿名转化失败")}}))}))},t.prototype.getAllStore=function(){var e={};return e[this.refreshTokenKey]=this.cache.getStore(this.refreshTokenKey)||"",e[this._loginTypeKey]=this.cache.getStore(this._loginTypeKey)||"",e[this.accessTokenKey]=this.cache.getStore(this.accessTokenKey)||"",e[this.accessTokenExpireKey]=this.cache.getStore(this.accessTokenExpireKey)||"",e},t.prototype._setAnonymousUUID=function(e){this.cache.removeStore(this._anonymousUuidKey),this.cache.setStore(this._anonymousUuidKey,e),this.cache.setStore(this._loginTypeKey,c.LOGINTYPE.ANONYMOUS)},t.prototype._clearAnonymousUUID=function(){this.cache.removeStore(this._anonymousUuidKey)},t}(c.default);n.AnonymousAuthProvider=u}));t(Z);Z.AnonymousAuthProvider;var ee=n((function(t,n){var r=e&&e.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=e&&e.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},s=e&&e.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function i(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},i=e&&e.__generator||function(e,t){var n,r,o,s,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===s[0]||2===s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}},a=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},c=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(n,"__esModule",{value:!0});var u=a(Q),l=c($),f=function(e){function t(t){var n=e.call(this,t)||this;return n.config=t,n}return r(t,e),t.prototype.init=function(){e.prototype.init.call(this),this.customAuthProvider=new l.default(this.config),this.customAuthProvider.init()},t.prototype.weixinAuthProvider=function(e){var t=e.appid,n=e.scope,r=e.loginMode,o=e.state,s=new u.default(this.config,t,n,r,o);return s.init(),s},t.prototype.signInAnonymously=function(){return s(this,void 0,void 0,(function(){var e=this;return i(this,(function(t){switch(t.label){case 0:return this._anonymousAuthProvider||(this._anonymousAuthProvider=new Z.AnonymousAuthProvider(this.config),this._anonymousAuthProvider.init()),J.addEventListener(J.EVENTS.LOGIN_TYPE_CHANGE,(function(t){if(t&&t.data===l.LOGINTYPE.ANONYMOUS){var n=e._anonymousAuthProvider.getAllStore();for(var r in n)n[r]&&e.httpRequest.cache.setStore(r,n[r])}})),[4,this._anonymousAuthProvider.signIn()];case 1:return[2,t.sent()]}}))}))},t.prototype.linkAndRetrieveDataWithTicket=function(e){return s(this,void 0,void 0,(function(){var t=this;return i(this,(function(n){switch(n.label){case 0:return this._anonymousAuthProvider||(this._anonymousAuthProvider=new Z.AnonymousAuthProvider(this.config),this._anonymousAuthProvider.init()),J.addEventListener(J.EVENTS.ANONYMOUS_CONVERTED,(function(e){var n=e.data.refresh_token;n&&t.httpRequest.cache.setStore(t.refreshTokenKey,n)})),[4,this._anonymousAuthProvider.linkAndRetrieveDataWithTicket(e)];case 1:return[2,n.sent()]}}))}))},t.prototype.signOut=function(){return s(this,void 0,void 0,(function(){var e,t,n,r,o,s,a;return i(this,(function(i){switch(i.label){case 0:if(this.loginType===l.LOGINTYPE.ANONYMOUS)throw new Error("[tcb-js-sdk] 匿名用户不支持登出操作");return e=this.httpRequest,t=e.cache,n=e.refreshTokenKey,r=e.accessTokenKey,o=e.accessTokenExpireKey,"auth.logout",(s=t.getStore(n))?[4,this.httpRequest.send("auth.logout",{refresh_token:s})]:[2];case 1:return a=i.sent(),t.removeStore(n),t.removeStore(r),t.removeStore(o),J.activateEvent(J.EVENTS.LOGIN_STATE_CHANGED),J.activateEvent(J.EVENTS.LOGIN_TYPE_CHANGE,l.LOGINTYPE.NULL),[2,a]}}))}))},t.prototype.getAccessToken=function(){return s(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return e={},[4,this.httpRequest.getAccessToken()];case 1:return[2,(e.accessToken=t.sent().accessToken,e.env=this.config.env,e)]}}))}))},t.prototype.onLoginStateExpire=function(e){J.addEventListener("loginStateExpire",e)},t.prototype.getLoginState=function(){return s(this,void 0,void 0,(function(){var e,t,n,r,o;return i(this,(function(s){switch(s.label){case 0:if(e=this.httpRequest,t=e.cache,n=e.refreshTokenKey,r=e.accessTokenKey,!(o=t.getStore(n)))return[3,5];s.label=1;case 1:return s.trys.push([1,3,,4]),[4,this.httpRequest.refreshAccessToken()];case 2:return s.sent(),[3,4];case 3:return s.sent(),[2,null];case 4:return[2,{isAnonymous:this.loginType===l.LOGINTYPE.ANONYMOUS,credential:{refreshToken:o,accessToken:t.getStore(r)}}];case 5:return[2,null]}}))}))},t.prototype.signInWithTicket=function(e){return s(this,void 0,void 0,(function(){var t,n,r,o;return i(this,(function(s){switch(s.label){case 0:if("string"!=typeof e)throw new Error("ticket must be a string");return t=this.httpRequest,n=t.cache,r=t.refreshTokenKey,[4,this.httpRequest.send("auth.signInWithTicket",{ticket:e,refresh_token:n.getStore(r)||""})];case 1:return(o=s.sent()).refresh_token?(this.customAuthProvider.setRefreshToken(o.refresh_token),[4,this.httpRequest.refreshAccessToken()]):[3,3];case 2:return s.sent(),J.activateEvent(J.EVENTS.LOGIN_STATE_CHANGED),J.activateEvent(J.EVENTS.LOGIN_TYPE_CHANGE,l.LOGINTYPE.CUSTOM),[2,{credential:{refreshToken:o.refresh_token}}];case 3:throw new Error("[tcb-js-sdk] 自定义登录失败")}}))}))},t.prototype.shouldRefreshAccessToken=function(e){this.httpRequest._shouldRefreshAccessTokenHook=e.bind(this)},t.prototype.getUserInfo=function(){return this.httpRequest.send("auth.getUserInfo",{}).then((function(e){return e.code?e:o(o({},e.data),{requestId:e.seqId})}))},t}(l.default);n.default=f}));t(ee);var te=n((function(t,n){var r=e&&e.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,s){function i(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}c((r=r.apply(e,t||[])).next())}))},o=e&&e.__generator||function(e,t){var n,r,o,s,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===s[0]||2===s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.uploadFile=function(e,t){t=t||I.createPromiseCallback();var n=new X.Request(this.config),r=e.cloudPath,o=e.filePath,s=e.onUploadProgress;return n.send("storage.getUploadMetadata",{path:r}).then((function(e){var i=e.data,a=i.url,c=i.authorization,u=i.token,l=i.fileId,f=i.cosFileId,p=e.requestId,h={key:r,signature:c,"x-cos-meta-fileid":f,success_action_status:"201","x-cos-security-token":u};n.upload({url:a,data:h,file:o,name:r,onUploadProgress:s}).then((function(e){201===e.statusCode?t(null,{fileID:l,requestId:p}):t(new Error("STORAGE_REQUEST_FAIL: "+e.data))})).catch((function(e){t(e)}))})).catch((function(e){t(e)})),t.promise},n.deleteFile=function(e,t){var n=e.fileList;if(t=t||I.createPromiseCallback(),!n||!Array.isArray(n))return{code:"INVALID_PARAM",message:"fileList必须是非空的数组"};for(var r=0,o=n;r<o.length;r++){var s=o[r];if(!s||"string"!=typeof s)return{code:"INVALID_PARAM",message:"fileList的元素必须是非空的字符串"}}var i={fileid_list:n};return new X.Request(this.config).send("storage.batchDeleteFile",i).then((function(e){e.code?t(null,e):t(null,{fileList:e.data.delete_list,requestId:e.requestId})})).catch((function(e){t(e)})),t.promise},n.getTempFileURL=function(e,t){var n=e.fileList;t=t||I.createPromiseCallback(),n&&Array.isArray(n)||t(null,{code:"INVALID_PARAM",message:"fileList必须是非空的数组"});for(var r=[],o=0,s=n;o<s.length;o++){var i=s[o];"object"==typeof i?(i.hasOwnProperty("fileID")&&i.hasOwnProperty("maxAge")||t(null,{code:"INVALID_PARAM",message:"fileList的元素必须是包含fileID和maxAge的对象"}),r.push({fileid:i.fileID,max_age:i.maxAge})):"string"==typeof i?r.push({fileid:i}):t(null,{code:"INVALID_PARAM",message:"fileList的元素必须是字符串"})}var a={file_list:r};return new X.Request(this.config).send("storage.batchGetDownloadUrl",a).then((function(e){e.code?t(null,e):t(null,{fileList:e.data.download_list,requestId:e.requestId})})).catch((function(e){t(e)})),t.promise},n.downloadFile=function(e,t){var s=e.fileID;return r(this,void 0,void 0,(function(){var e,r,i,a,c;return o(this,(function(o){switch(o.label){case 0:return[4,n.getTempFileURL.call(this,{fileList:[{fileID:s,maxAge:600}]})];case 1:return e=o.sent(),"SUCCESS"!==(r=e.fileList[0]).code?[2,t?t(r):new Promise((function(e){e(r)}))]:(i=r.download_url,i=encodeURI(i),a=new X.Request(this.config),t?[4,a.download({url:i})]:[3,3]);case 2:return c=o.sent(),t(c),[3,4];case 3:return[2,a.download({url:i})];case 4:return[2]}}))}))}}));t(te);te.uploadFile,te.deleteFile,te.getTempFileURL,te.downloadFile;var ne=n((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.callFunction=function(e,t){var n,r=e.name,o=e.data,s=e.query,i=e.parse,a=e.search,c=t||I.createPromiseCallback();try{n=o?JSON.stringify(o):""}catch(e){return Promise.reject(e)}if(!r)return Promise.reject(new Error("函数名不能为空"));var u={query:s,parse:i,search:a,function_name:r,request_data:n};return new X.Request(this.config).send("functions.invokeFunction",u).then((function(e){if(e.code)c(null,e);else{var t=e.data.response_data;if(i)c(null,{result:t,requestId:e.requestId});else try{t=JSON.parse(e.data.response_data),c(null,{result:t,requestId:e.requestId})}catch(e){c(new Error("response data must be json"))}}return c.promise})).catch((function(e){c(e)})),c.promise}}));t(ne);ne.callFunction;var re=t(n((function(t){var n=e&&e.__assign||function(){return(n=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},r=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},o=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},s=r(P),i=r(ee),a=o(te),c=o(ne),u={timeout:15e3},l=new(function(){function e(e){var t=this;this.config=e||this.config,this.authObj=void 0,J.addEventListener(J.EVENTS.LOGIN_TYPE_CHANGE,(function(e){e.data===$.LOGINTYPE.ANONYMOUS&&(t.config.persistence="local")}))}return e.prototype.init=function(t){return this.config=n(n({},u),t),W.Adapter.adapter||this._useDefaultAdapter(),new e(this.config)},e.prototype.auth=function(e){var t=(void 0===e?{}:e).persistence;return this.authObj?this.authObj:(this.config=n(n({},this.config),{persistence:t||W.Adapter.adapter.primaryStorage||"session"}),this.authObj=new i.default(this.config),this.authObj.init(),this.authObj)},e.prototype.on=function(e,t){return J.addEventListener.apply(this,[e,t])},e.prototype.off=function(e,t){return J.removeEventListener.apply(this,[e,t])},e.prototype.callFunction=function(e,t){return c.callFunction.apply(this,[e,t])},e.prototype.deleteFile=function(e,t){return a.deleteFile.apply(this,[e,t])},e.prototype.getTempFileURL=function(e,t){return a.getTempFileURL.apply(this,[e,t])},e.prototype.downloadFile=function(e,t){return a.downloadFile.apply(this,[e,t])},e.prototype.uploadFile=function(e,t){return a.uploadFile.apply(this,[e,t])},e.prototype.useAdapters=function(e){var t=W.useAdapters(e)||{},n=t.adapter,r=t.runtime;n&&(W.Adapter.adapter=n),r&&(W.Adapter.runtime=r)},e.prototype._useDefaultAdapter=function(){var e=W.useDefaultAdapter(),t=e.adapter,n=e.runtime;W.Adapter.adapter=t,W.Adapter.runtime=n},e}());l.useAdapters(s.default);try{window.tcb=l}catch(e){}t.exports=l})));re.useAdapters(P);const oe=re,se=oe.init;let ie,ae;function ce(e){ie||(ie={PLATFORM:"mp-baidu",OS:y,APPID:l.appid},ae={ak:l.appid,p:"android"===y?"a":"i",ut:g(),uuid:v()});const t=JSON.parse(JSON.stringify(e.data||{})),n=e.name,r=this.config.spaceId,o={tencent:"t",aliyun:"a"}[this.config.provider],s=Object.assign({},ae,{fn:n,sid:r,pvd:o});return Object.assign(t,{clientInfo:ie,uniCloudClientInfo:encodeURIComponent(JSON.stringify(s))}),e.data=t,e}function ue(e){const t=ce.call(this,e),n={tencent:"tcb",aliyun:"aliyun"}[this.config.provider],r=ae.ak,o=this.config.spaceId,i=JSON.stringify(t.data),a=t.name,c=JSON.stringify({body:{provider:n,appid:r,spaceId:o,functionName:a,run_params:i},header:{token:"b1c6c5a0-be9f-11ea-8c97-addf59baeebf"}});return new Promise((e,t)=>{uni.request({url:h,method:"POST",data:{param:c},complete(r){r||(r={});const o=r.data&&r.data.body;if(!o)return void t(new s({message:`[FUNCTIONS_EXECUTE_FAIL] Request Fail: [${a}]`}));if("tcb"===n&&console.log(o.log),0!==o.invokeResult&&"0"!==o.invokeResult)return void t(new s({message:o.errorMsg}));const i=o.requestId;let c={};try{c=JSON.parse(o.result)}catch(e){c=o.result}e({requestId:i,result:c})}})})}oe.init=function(e){e.env=e.spaceId;const t=se.call(this,e);t.config.provider="tencent",t.config.spaceId=e.spaceId;const n=t.auth;t.auth=function(e){const t=n.call(this,e);return["linkAndRetrieveDataWithTicket","signInAnonymously","signOut","getAccessToken","getLoginState","signInWithTicket","getUserInfo"].forEach(e=>{t[e]=_(t[e]).bind(t)}),t};if(["uploadFile","deleteFile","getTempFileURL","downloadFile"].forEach(e=>{t[e]=_(t[e]).bind(t)}),!1!==e.autoSignIn){const e=t.auth();e.getLoginState().then(t=>{t||e.signInAnonymously()})}return t};const le={init(e){let t={},n=!(!1===e.debugFunction||"development"!=="development"||!"b1c6c5a0-be9f-11ea-8c97-addf59baeebf");switch(e.provider){case"tencent":t=oe.init(Object.assign(e,{useDebugFunction:n}));break;case"aliyun":n=n&&( false||"app-plus"==="mp-baidu"),t=m.init(Object.assign(e,{useDebugFunction:n}));break;default:throw new Error("未提供正确的provider参数")}return function(e){let t=e.callFunction;e.config.useDebugFunction&&"tencent"===e.config.provider&&(t=ue),e.callFunction=function(e){ true&&console.log(`[spaceId:${this.config.spaceId}]`);const n=ce.call(this,e);return new Promise((r,o)=>{t.call(this,n).then(e=>{r(e)}).catch(t=>{t&&t.message&&(t.message=`[${e.name}]: ${t.message}`),o(t)})})};const n=e.callFunction;e.callFunction=function(e){return _(n).call(this,e)}}(t),t.init=this.init,t}};let fe=le;try{let e={};1===[].length&&(e=[][0]),fe=le.init(e)}catch(e){["auth","callFunction","uploadFile","deleteFile","getTempFileURL","downloadFile"].forEach(e=>{fe[e]=function(){const e=[].length>0?"应用有多个服务空间，请通过uniCloud.init方法指定要使用的服务空间":"应用未关联服务空间，请在cloudfunctions目录右键关联服务空间";return console.error(e),Promise.reject(new s({code:"SYS_ERR",message:e}))}})}var pe=fe;/* harmony default export */ __webpack_exports__["default"] = (pe);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 3), __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-baidu/dist/index.js */ 1)["default"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-baidu/dist/index.js */ 1)["default"]))

/***/ }),

/***/ 8:
/*!*******************************************************!*\
  !*** D:/work/test/ygctour/pages.json?{"type":"stat"} ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _default = { "appid": "__UNI__7C25302" };exports.default = _default;

/***/ }),

/***/ 91:
/*!**********************************************************!*\
  !*** D:/work/test/ygctour/components/uni-icons/icons.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _default = {
  "pulldown": "\uE588",
  "refreshempty": "\uE461",
  "back": "\uE471",
  "forward": "\uE470",
  "more": "\uE507",
  "more-filled": "\uE537",
  "scan": "\uE612",
  "qq": "\uE264",
  "weibo": "\uE260",
  "weixin": "\uE261",
  "pengyouquan": "\uE262",
  "loop": "\uE565",
  "refresh": "\uE407",
  "refresh-filled": "\uE437",
  "arrowthindown": "\uE585",
  "arrowthinleft": "\uE586",
  "arrowthinright": "\uE587",
  "arrowthinup": "\uE584",
  "undo-filled": "\uE7D6",
  "undo": "\uE406",
  "redo": "\uE405",
  "redo-filled": "\uE7D9",
  "bars": "\uE563",
  "chatboxes": "\uE203",
  "camera": "\uE301",
  "chatboxes-filled": "\uE233",
  "camera-filled": "\uE7EF",
  "cart-filled": "\uE7F4",
  "cart": "\uE7F5",
  "checkbox-filled": "\uE442",
  "checkbox": "\uE7FA",
  "arrowleft": "\uE582",
  "arrowdown": "\uE581",
  "arrowright": "\uE583",
  "smallcircle-filled": "\uE801",
  "arrowup": "\uE580",
  "circle": "\uE411",
  "eye-filled": "\uE568",
  "eye-slash-filled": "\uE822",
  "eye-slash": "\uE823",
  "eye": "\uE824",
  "flag-filled": "\uE825",
  "flag": "\uE508",
  "gear-filled": "\uE532",
  "reload": "\uE462",
  "gear": "\uE502",
  "hand-thumbsdown-filled": "\uE83B",
  "hand-thumbsdown": "\uE83C",
  "hand-thumbsup-filled": "\uE83D",
  "heart-filled": "\uE83E",
  "hand-thumbsup": "\uE83F",
  "heart": "\uE840",
  "home": "\uE500",
  "info": "\uE504",
  "home-filled": "\uE530",
  "info-filled": "\uE534",
  "circle-filled": "\uE441",
  "chat-filled": "\uE847",
  "chat": "\uE263",
  "mail-open-filled": "\uE84D",
  "email-filled": "\uE231",
  "mail-open": "\uE84E",
  "email": "\uE201",
  "checkmarkempty": "\uE472",
  "list": "\uE562",
  "locked-filled": "\uE856",
  "locked": "\uE506",
  "map-filled": "\uE85C",
  "map-pin": "\uE85E",
  "map-pin-ellipse": "\uE864",
  "map": "\uE364",
  "minus-filled": "\uE440",
  "mic-filled": "\uE332",
  "minus": "\uE410",
  "micoff": "\uE360",
  "mic": "\uE302",
  "clear": "\uE434",
  "smallcircle": "\uE868",
  "close": "\uE404",
  "closeempty": "\uE460",
  "paperclip": "\uE567",
  "paperplane": "\uE503",
  "paperplane-filled": "\uE86E",
  "person-filled": "\uE131",
  "contact-filled": "\uE130",
  "person": "\uE101",
  "contact": "\uE100",
  "images-filled": "\uE87A",
  "phone": "\uE200",
  "images": "\uE87B",
  "image": "\uE363",
  "image-filled": "\uE877",
  "location-filled": "\uE333",
  "location": "\uE303",
  "plus-filled": "\uE439",
  "plus": "\uE409",
  "plusempty": "\uE468",
  "help-filled": "\uE535",
  "help": "\uE505",
  "navigate-filled": "\uE884",
  "navigate": "\uE501",
  "mic-slash-filled": "\uE892",
  "search": "\uE466",
  "settings": "\uE560",
  "sound": "\uE590",
  "sound-filled": "\uE8A1",
  "spinner-cycle": "\uE465",
  "download-filled": "\uE8A4",
  "personadd-filled": "\uE132",
  "videocam-filled": "\uE8AF",
  "personadd": "\uE102",
  "upload": "\uE402",
  "upload-filled": "\uE8B1",
  "starhalf": "\uE463",
  "star-filled": "\uE438",
  "star": "\uE408",
  "trash": "\uE401",
  "phone-filled": "\uE230",
  "compose": "\uE400",
  "videocam": "\uE300",
  "trash-filled": "\uE8DC",
  "download": "\uE403",
  "chatbubble-filled": "\uE232",
  "chatbubble": "\uE202",
  "cloud-download": "\uE8E4",
  "cloud-upload-filled": "\uE8E5",
  "cloud-upload": "\uE8E6",
  "cloud-download-filled": "\uE8E9",
  "headphones": "\uE8BF",
  "shop": "\uE609" };exports.default = _default;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3VuaS1tcC1iYWlkdS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vRDovd29yay90ZXN0L3lnY3RvdXIvc3RvcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0Q6L3dvcmsvdGVzdC95Z2N0b3VyL2NvbXBvbmVudHMvbWVzY3JvbGwtdW5pL21lc2Nyb2xsLXVuaS5qcyIsIndlYnBhY2s6Ly8vRDovd29yay90ZXN0L3lnY3RvdXIvY29tcG9uZW50cy9tZXNjcm9sbC11bmkvbWVzY3JvbGwtdW5pLW9wdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVleC9kaXN0L3Z1ZXguZXNtLmpzIiwid2VicGFjazovLy9EOi93b3JrL3Rlc3QveWdjdG91ci91dmlldy11aS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovd29yay90ZXN0L3lnY3RvdXIvdXZpZXctdWkvbGlicy9taXhpbi9taXhpbi5qcyIsIndlYnBhY2s6Ly8vRDovd29yay90ZXN0L3lnY3RvdXIvY29tcG9uZW50cy9jb250ZW50L2RhdGEuanMiLCJ3ZWJwYWNrOi8vL0Q6L3dvcmsvdGVzdC95Z2N0b3VyL2NvbXBvbmVudHMvbWVzY3JvbGwtdW5pL21lc2Nyb2xsLW1peGlucy5qcyIsIndlYnBhY2s6Ly8vRDovd29yay90ZXN0L3lnY3RvdXIvdXZpZXctdWkvbGlicy9yZXF1ZXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL21wLXZ1ZS9kaXN0L21wLnJ1bnRpbWUuZXNtLmpzIiwid2VicGFjazovLy9EOi93b3JrL3Rlc3QveWdjdG91ci91dmlldy11aS9saWJzL2Z1bmN0aW9uL2RlZXBNZXJnZS5qcyIsIndlYnBhY2s6Ly8vRDovd29yay90ZXN0L3lnY3RvdXIvdXZpZXctdWkvbGlicy9mdW5jdGlvbi9kZWVwQ2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2dWUvYmFiZWwtcHJlc2V0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vRDovd29yay90ZXN0L3lnY3RvdXIvdXZpZXctdWkvbGlicy9mdW5jdGlvbi90ZXN0LmpzIiwid2VicGFjazovLy9EOi93b3JrL3Rlc3QveWdjdG91ci91dmlldy11aS9saWJzL2Z1bmN0aW9uL3F1ZXJ5UGFyYW1zLmpzIiwid2VicGFjazovLy9EOi93b3JrL3Rlc3QveWdjdG91ci91dmlldy11aS9saWJzL2Z1bmN0aW9uL3JvdXRlLmpzIiwid2VicGFjazovLy9EOi93b3JrL3Rlc3QveWdjdG91ci91dmlldy11aS9saWJzL2Z1bmN0aW9uL3RpbWVGb3JtYXQuanMiLCJ3ZWJwYWNrOi8vL0Q6L3dvcmsvdGVzdC95Z2N0b3VyL3V2aWV3LXVpL2xpYnMvZnVuY3Rpb24vdGltZUZyb20uanMiLCJ3ZWJwYWNrOi8vL0Q6L3dvcmsvdGVzdC95Z2N0b3VyL3V2aWV3LXVpL2xpYnMvZnVuY3Rpb24vY29sb3JHcmFkaWVudC5qcyIsIndlYnBhY2s6Ly8vRDovd29yay90ZXN0L3lnY3RvdXIvdXZpZXctdWkvbGlicy9mdW5jdGlvbi9ndWlkLmpzIiwid2VicGFjazovLy9EOi93b3JrL3Rlc3QveWdjdG91ci91dmlldy11aS9saWJzL2Z1bmN0aW9uL2NvbG9yLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vL0Q6L3dvcmsvdGVzdC95Z2N0b3VyL3V2aWV3LXVpL2xpYnMvZnVuY3Rpb24vdHlwZTJpY29uLmpzIiwid2VicGFjazovLy9EOi93b3JrL3Rlc3QveWdjdG91ci91dmlldy11aS9saWJzL2Z1bmN0aW9uL3JhbmRvbUFycmF5LmpzIiwid2VicGFjazovLy9EOi93b3JrL3Rlc3QveWdjdG91ci91dmlldy11aS9saWJzL2Z1bmN0aW9uL2FkZFVuaXQuanMiLCJ3ZWJwYWNrOi8vL0Q6L3dvcmsvdGVzdC95Z2N0b3VyL3V2aWV3LXVpL2xpYnMvZnVuY3Rpb24vcmFuZG9tLmpzIiwid2VicGFjazovLy9EOi93b3JrL3Rlc3QveWdjdG91ci91dmlldy11aS9saWJzL2Z1bmN0aW9uL3RyaW0uanMiLCJ3ZWJwYWNrOi8vL0Q6L3dvcmsvdGVzdC95Z2N0b3VyL3V2aWV3LXVpL2xpYnMvZnVuY3Rpb24vdG9hc3QuanMiLCJ3ZWJwYWNrOi8vL0Q6L3dvcmsvdGVzdC95Z2N0b3VyL3V2aWV3LXVpL2xpYnMvZnVuY3Rpb24vZ2V0UGFyZW50LmpzIiwid2VicGFjazovLy9EOi93b3JrL3Rlc3QveWdjdG91ci91dmlldy11aS9saWJzL2Z1bmN0aW9uLyRwYXJlbnQuanMiLCJ3ZWJwYWNrOi8vL0Q6L3dvcmsvdGVzdC95Z2N0b3VyL3V2aWV3LXVpL2xpYnMvY29uZmlnL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vRDovd29yay90ZXN0L3lnY3RvdXIvdXZpZXctdWkvbGlicy9jb25maWcvekluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdW5pLXN0YXQvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovd29yay90ZXN0L3lnY3RvdXIvcGFnZXMuanNvbiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy91bmktY2xvdWQvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovd29yay90ZXN0L3lnY3RvdXIvY29tcG9uZW50cy91bmktaWNvbnMvaWNvbnMuanMiXSwibmFtZXMiOlsiX3RvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsImlzRm4iLCJmbiIsImlzU3RyIiwic3RyIiwiaXNQbGFpbk9iamVjdCIsIm9iaiIsImNhbGwiLCJoYXNPd24iLCJrZXkiLCJub29wIiwiY2FjaGVkIiwiY2FjaGUiLCJjcmVhdGUiLCJjYWNoZWRGbiIsImhpdCIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsInJlcGxhY2UiLCJfIiwiYyIsInRvVXBwZXJDYXNlIiwiSE9PS1MiLCJnbG9iYWxJbnRlcmNlcHRvcnMiLCJzY29wZWRJbnRlcmNlcHRvcnMiLCJtZXJnZUhvb2siLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsInJlcyIsImNvbmNhdCIsIkFycmF5IiwiaXNBcnJheSIsImRlZHVwZUhvb2tzIiwiaG9va3MiLCJpIiwibGVuZ3RoIiwiaW5kZXhPZiIsInB1c2giLCJyZW1vdmVIb29rIiwiaG9vayIsImluZGV4Iiwic3BsaWNlIiwibWVyZ2VJbnRlcmNlcHRvckhvb2siLCJpbnRlcmNlcHRvciIsIm9wdGlvbiIsImtleXMiLCJmb3JFYWNoIiwicmVtb3ZlSW50ZXJjZXB0b3JIb29rIiwiYWRkSW50ZXJjZXB0b3IiLCJtZXRob2QiLCJyZW1vdmVJbnRlcmNlcHRvciIsIndyYXBwZXJIb29rIiwiZGF0YSIsImlzUHJvbWlzZSIsInRoZW4iLCJxdWV1ZSIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNhbGxiYWNrIiwid3JhcHBlck9wdGlvbnMiLCJvcHRpb25zIiwibmFtZSIsIm9sZENhbGxiYWNrIiwiY2FsbGJhY2tJbnRlcmNlcHRvciIsIndyYXBwZXJSZXR1cm5WYWx1ZSIsInJldHVyblZhbHVlIiwicmV0dXJuVmFsdWVIb29rcyIsImdldEFwaUludGVyY2VwdG9ySG9va3MiLCJzbGljZSIsInNjb3BlZEludGVyY2VwdG9yIiwiaW52b2tlQXBpIiwiYXBpIiwicGFyYW1zIiwiaW52b2tlIiwicHJvbWlzZUludGVyY2VwdG9yIiwiY2F0Y2giLCJTWU5DX0FQSV9SRSIsIkNPTlRFWFRfQVBJX1JFIiwiQ09OVEVYVF9BUElfUkVfRVhDIiwiQVNZTkNfQVBJIiwiQ0FMTEJBQ0tfQVBJX1JFIiwiaXNDb250ZXh0QXBpIiwidGVzdCIsImlzU3luY0FwaSIsImlzQ2FsbGJhY2tBcGkiLCJoYW5kbGVQcm9taXNlIiwiZXJyIiwic2hvdWxkUHJvbWlzZSIsImZpbmFsbHkiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwicmVhc29uIiwicHJvbWlzaWZ5IiwicHJvbWlzZUFwaSIsInN1Y2Nlc3MiLCJmYWlsIiwiY29tcGxldGUiLCJyZWplY3QiLCJhc3NpZ24iLCJFUFMiLCJCQVNFX0RFVklDRV9XSURUSCIsImlzSU9TIiwiZGV2aWNlV2lkdGgiLCJkZXZpY2VEUFIiLCJjaGVja0RldmljZVdpZHRoIiwic3dhbiIsImdldFN5c3RlbUluZm9TeW5jIiwicGxhdGZvcm0iLCJwaXhlbFJhdGlvIiwid2luZG93V2lkdGgiLCJ1cHgycHgiLCJudW1iZXIiLCJuZXdEZXZpY2VXaWR0aCIsIk51bWJlciIsInJlc3VsdCIsIk1hdGgiLCJmbG9vciIsImludGVyY2VwdG9ycyIsImJhc2VBcGkiLCJmcmVlemUiLCJfX3Byb3RvX18iLCJwcmV2aWV3SW1hZ2UiLCJhcmdzIiwiZnJvbUFyZ3MiLCJjdXJyZW50SW5kZXgiLCJwYXJzZUludCIsImN1cnJlbnQiLCJpc05hTiIsInVybHMiLCJsZW4iLCJmaWx0ZXIiLCJpdGVtIiwiaW5kaWNhdG9yIiwibG9vcCIsInRvZG9zIiwiY2FuSVVzZXMiLCJjcmVhdGVUb2RvTWV0aG9kIiwiY29udGV4dE5hbWUiLCJtZXRob2ROYW1lIiwidW5zdXBwb3J0ZWQiLCJjb25zb2xlIiwiZXJyb3IiLCJfaGFuZGxlRW52SW5mbyIsIm1pbmlQcm9ncmFtIiwiYXBwSWQiLCJhcHBLZXkiLCJwbHVnaW4iLCJ2ZXJzaW9uIiwic2RrVmVyc2lvbiIsInByb3RvY29scyIsInJlcXVlc3QiLCJkYXRhVHlwZSIsInR5cGUiLCJjb25uZWN0U29ja2V0IiwiZ2V0UmVjb3JkZXJNYW5hZ2VyIiwiZnJvbVJldCIsIm9uRnJhbWVSZWNvcmRlZCIsImdldEJhY2tncm91bmRBdWRpb01hbmFnZXIiLCJvblByZXYiLCJvbk5leHQiLCJzY2FuQ29kZSIsIm9ubHlGcm9tQ2FtZXJhIiwic2NhblR5cGUiLCJuYXZpZ2F0ZVRvTWluaVByb2dyYW0iLCJlbnZWZXJzaW9uIiwibmF2aWdhdGVCYWNrTWluaVByb2dyYW0iLCJzaG93U2hhcmVNZW51IiwiZ2V0QWNjb3VudEluZm9TeW5jIiwiQ0FMTEJBQ0tTIiwicHJvY2Vzc0NhbGxiYWNrIiwicHJvY2Vzc1JldHVyblZhbHVlIiwicHJvY2Vzc0FyZ3MiLCJhcmdzT3B0aW9uIiwia2VlcEZyb21BcmdzIiwidG9BcmdzIiwia2V5T3B0aW9uIiwid2FybiIsImtlZXBSZXR1cm5WYWx1ZSIsIndyYXBwZXIiLCJwcm90b2NvbCIsImFyZzEiLCJhcmcyIiwiYXBwbHkiLCJ0b2RvQXBpcyIsIlRPRE9TIiwiY3JlYXRlVG9kb0FwaSIsInRvZG9BcGkiLCJlcnJNc2ciLCJwcm92aWRlcnMiLCJvYXV0aCIsInNoYXJlIiwicGF5bWVudCIsImdldFByb3ZpZGVyIiwic2VydmljZSIsInByb3ZpZGVyIiwiZXh0cmFBcGkiLCJnZXRFbWl0dGVyIiwiZ2V0VW5pRW1pdHRlciIsIkVtaXR0ZXIiLCJWdWUiLCJjdHgiLCIkb24iLCJhcmd1bWVudHMiLCIkb2ZmIiwiJG9uY2UiLCIkZW1pdCIsImV2ZW50QXBpIiwicmVxdWVzdFBheW1lbnQiLCJwYXJzZUVycm9yIiwib3JkZXJJbmZvIiwiSlNPTiIsInBhcnNlIiwiZSIsInJlcXVlc3RQb2x5bWVyUGF5bWVudCIsIk1QUGFnZSIsIlBhZ2UiLCJNUENvbXBvbmVudCIsIkNvbXBvbmVudCIsImN1c3RvbWl6ZVJFIiwiY3VzdG9taXplIiwiaW5pdFRyaWdnZXJFdmVudCIsIm1wSW5zdGFuY2UiLCJvbGRUcmlnZ2VyRXZlbnQiLCJ0cmlnZ2VyRXZlbnQiLCJldmVudCIsImluaXRIb29rIiwib2xkSG9vayIsIlBBR0VfRVZFTlRfSE9PS1MiLCJpbml0TW9ja3MiLCJ2bSIsIm1vY2tzIiwiJG1wIiwibXBUeXBlIiwibW9jayIsImhhc0hvb2siLCJ2dWVPcHRpb25zIiwiZGVmYXVsdCIsImV4dGVuZE9wdGlvbnMiLCJzdXBlciIsIm1peGlucyIsImZpbmQiLCJtaXhpbiIsImluaXRIb29rcyIsIm1wT3B0aW9ucyIsIiR2bSIsIl9fY2FsbF9ob29rIiwiaW5pdFZ1ZUNvbXBvbmVudCIsIlZ1ZUNvbXBvbmVudCIsImV4dGVuZCIsImluaXRTbG90cyIsInZ1ZVNsb3RzIiwiJHNsb3RzIiwic2xvdE5hbWUiLCIkc2NvcGVkU2xvdHMiLCJpbml0VnVlSWRzIiwidnVlSWRzIiwic3BsaXQiLCJfJHZ1ZUlkIiwiXyR2dWVQaWQiLCJpbml0RGF0YSIsImNvbnRleHQiLCJtZXRob2RzIiwicHJvY2VzcyIsIlZVRV9BUFBfREVCVUciLCJzdHJpbmdpZnkiLCJfX2xpZmVjeWNsZV9ob29rc19fIiwiUFJPUF9UWVBFUyIsIlN0cmluZyIsIkJvb2xlYW4iLCJjcmVhdGVPYnNlcnZlciIsIm9ic2VydmVyIiwibmV3VmFsIiwib2xkVmFsIiwiaW5pdEJlaGF2aW9ycyIsImluaXRCZWhhdmlvciIsInZ1ZUJlaGF2aW9ycyIsImJlaGF2aW9ycyIsInZ1ZUV4dGVuZHMiLCJleHRlbmRzIiwidnVlTWl4aW5zIiwidnVlUHJvcHMiLCJwcm9wcyIsImJlaGF2aW9yIiwiRGF0ZSIsInByb3BlcnRpZXMiLCJpbml0UHJvcGVydGllcyIsInZ1ZU1peGluIiwicGFyc2VQcm9wVHlwZSIsImRlZmF1bHRWYWx1ZSIsImZpbGUiLCJpc0JlaGF2aW9yIiwidnVlSWQiLCJzZXREYXRhIiwib3B0cyIsIndyYXBwZXIkMSIsIm1wIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJ0YXJnZXQiLCJkZXRhaWwiLCJtYXJrZXJJZCIsImNoZWNrZWQiLCJnZXRFeHRyYVZhbHVlIiwiZGF0YVBhdGhzQXJyYXkiLCJkYXRhUGF0aEFycmF5IiwiZGF0YVBhdGgiLCJwcm9wUGF0aCIsInZhbHVlUGF0aCIsInZGb3IiLCJfX2dldF92YWx1ZSIsImlzSW50ZWdlciIsInZGb3JJdGVtIiwidkZvcktleSIsInByb2Nlc3NFdmVudEV4dHJhIiwiZXh0cmEiLCJleHRyYU9iaiIsImdldE9iakJ5QXJyYXkiLCJhcnIiLCJlbGVtZW50IiwicHJvY2Vzc0V2ZW50QXJncyIsImlzQ3VzdG9tIiwiaXNDdXN0b21NUEV2ZW50IiwiY3VycmVudFRhcmdldCIsImRhdGFzZXQiLCJjb21UeXBlIiwiX19hcmdzX18iLCJyZXQiLCJhcmciLCJPTkNFIiwiQ1VTVE9NIiwiaXNNYXRjaEV2ZW50VHlwZSIsImV2ZW50VHlwZSIsIm9wdFR5cGUiLCJoYW5kbGVFdmVudCIsImV2ZW50T3B0cyIsImV2ZW50T3B0IiwiZXZlbnRzQXJyYXkiLCJjaGFyQXQiLCJpc09uY2UiLCJldmVudEFycmF5IiwiaGFuZGxlckN0eCIsIiRvcHRpb25zIiwiZ2VuZXJpYyIsIiRwYXJlbnQiLCJoYW5kbGVyIiwiRXJyb3IiLCJvbmNlIiwicGFyc2VCYXNlQXBwIiwiaW5pdFJlZnMiLCJzdG9yZSIsIiRzdG9yZSIsIm1wSG9zdCIsImJlZm9yZUNyZWF0ZSIsIiRzY29wZSIsImFwcE9wdGlvbnMiLCJvbkxhdW5jaCIsImFwcCIsImdsb2JhbERhdGEiLCJfaXNNb3VudGVkIiwiZmluZFZtQnlWdWVJZCIsInZ1ZVBpZCIsIiRjaGlsZHJlbiIsImNoaWxkVm0iLCJwYXJlbnRWbSIsIkJlaGF2aW9yIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCIkcmVmcyIsImNvbXBvbmVudHMiLCJzZWxlY3RBbGxDb21wb25lbnRzIiwiY29tcG9uZW50IiwicmVmIiwiZm9yQ29tcG9uZW50cyIsImhhbmRsZUxpbmsiLCJwYXJlbnQiLCJpc1BhZ2UiLCJvd25lcklkIiwiaW5pdFJlbGF0aW9uIiwiZGlzcGF0Y2giLCJwYXJzZUFwcCIsIm9uU2hvdyIsImNyZWF0ZUFwcCIsIkFwcCIsInBhcnNlQmFzZUNvbXBvbmVudCIsInZ1ZUNvbXBvbmVudE9wdGlvbnMiLCJtdWx0aXBsZVNsb3RzIiwiYWRkR2xvYmFsQ2xhc3MiLCJjb21wb25lbnRPcHRpb25zIiwiX19maWxlIiwibGlmZXRpbWVzIiwiYXR0YWNoZWQiLCJwcm9wc0RhdGEiLCIkbW91bnQiLCJyZWFkeSIsImRldGFjaGVkIiwiJGRlc3Ryb3kiLCJwYWdlTGlmZXRpbWVzIiwic2hvdyIsImhpZGUiLCJyZXNpemUiLCJzaXplIiwiX19sIiwiX19lIiwid3hzQ2FsbE1ldGhvZHMiLCJjYWxsTWV0aG9kIiwibmV3TGlmZWN5Y2xlIiwiY2FuSVVzZSIsInBhcnNlQ29tcG9uZW50Iiwib2xkQXR0YWNoZWQiLCJwYWdlaW5zdGFuY2UiLCJxdWVyeSIsIl8kYXJncyIsIm9uUmVhZHkiLCJtZXNzYWdlcyIsImhvb2tzJDEiLCJwYXJzZUJhc2VQYWdlIiwidnVlUGFnZU9wdGlvbnMiLCJwYWdlT3B0aW9ucyIsIm9uTG9hZCIsIm9uUGFnZVVubG9hZCIsInBhcnNlUGFnZSIsIm9uVW5sb2FkIiwiY3JlYXRlUGFnZSIsImNyZWF0ZUNvbXBvbmVudCIsImNhbklVc2VBcGkiLCJhcGlOYW1lIiwidW5pIiwiUHJveHkiLCJzZXQiLCJ1bmkkMSIsInVzZSIsIlZ1ZXgiLCJTdG9yZSIsInN0YXRlIiwiZm9yY2VkTG9naW4iLCJoYXNMb2dpbiIsInVzZXJOYW1lIiwicGhvbmUiLCJtdXRhdGlvbnMiLCJsb2dpbiIsImxvZ291dCIsIk1lU2Nyb2xsIiwiaXNTY3JvbGxCb2R5IiwibWUiLCJpc0Rvd25TY3JvbGxpbmciLCJpc1VwU2Nyb2xsaW5nIiwiaGFzRG93bkNhbGxiYWNrIiwiZG93biIsImluaXREb3duU2Nyb2xsIiwiaW5pdFVwU2Nyb2xsIiwic2V0VGltZW91dCIsIm9wdERvd24iLCJhdXRvIiwiYXV0b1Nob3dMb2FkaW5nIiwidHJpZ2dlckRvd25TY3JvbGwiLCJvcHRVcCIsImlzVXBBdXRvTG9hZCIsInRyaWdnZXJVcFNjcm9sbCIsImV4dGVuZERvd25TY3JvbGwiLCJuYXRpdmUiLCJpc0xvY2siLCJvZmZzZXQiLCJzdGFydFRvcCIsImZwcyIsImluT2Zmc2V0UmF0ZSIsIm91dE9mZnNldFJhdGUiLCJib3R0b21PZmZzZXQiLCJtaW5BbmdsZSIsInRleHRJbk9mZnNldCIsInRleHRPdXRPZmZzZXQiLCJ0ZXh0TG9hZGluZyIsImJnQ29sb3IiLCJ0ZXh0Q29sb3IiLCJpbml0ZWQiLCJpbk9mZnNldCIsIm91dE9mZnNldCIsIm9uTW92aW5nIiwiYmVmb3JlTG9hZGluZyIsInNob3dMb2FkaW5nIiwiYWZ0ZXJMb2FkaW5nIiwiZW5kRG93blNjcm9sbCIsIm1lc2Nyb2xsIiwicmVzZXRVcFNjcm9sbCIsImV4dGVuZFVwU2Nyb2xsIiwiaXNCb3RoIiwiaXNCb3VuY2UiLCJwYWdlIiwibnVtIiwidGltZSIsIm5vTW9yZVNpemUiLCJ0ZXh0Tm9Nb3JlIiwic2hvd05vTW9yZSIsImhpZGVVcFNjcm9sbCIsImVyckRpc3RhbmNlIiwidG9Ub3AiLCJzcmMiLCJkdXJhdGlvbiIsImJ0bkNsaWNrIiwiekluZGV4IiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwic2FmZWFyZWEiLCJ3aWR0aCIsInJhZGl1cyIsImVtcHR5IiwiaWNvbiIsInRpcCIsImJ0blRleHQiLCJmaXhlZCIsInRvcCIsIm9uU2Nyb2xsIiwidXNlck9wdGlvbiIsImRlZmF1bHRPcHRpb24iLCJkZWYiLCJoYXNDb2xvciIsImNvbG9yIiwidG9Mb3dlckNhc2UiLCJkb3duSGlnaHQiLCJ0b3VjaHN0YXJ0RXZlbnQiLCJzdGFydFBvaW50IiwiZ2V0UG9pbnQiLCJnZXRTY3JvbGxUb3AiLCJsYXN0UG9pbnQiLCJtYXhUb3VjaG1vdmVZIiwiZ2V0Qm9keUhlaWdodCIsImluVG91Y2hlbmQiLCJ0b3VjaG1vdmVFdmVudCIsInQiLCJnZXRUaW1lIiwibW92ZVRpbWUiLCJtb3ZlVGltZURpZmYiLCJzY3JvbGxUb3AiLCJjdXJQb2ludCIsIm1vdmVZIiwieSIsImFuZ2xlIiwiZ2V0QW5nbGUiLCJ0b3VjaGVuZEV2ZW50IiwiZGlmZiIsIm1vdmV0eXBlIiwiaXNNb3ZlRG93biIsInJvdW5kIiwicmF0ZSIsImlzU2Nyb2xsVXAiLCJ4IiwidG91Y2hlcyIsInBhZ2VYIiwicGFnZVkiLCJjaGFuZ2VkVG91Y2hlcyIsImNsaWVudFgiLCJjbGllbnRZIiwicDEiLCJwMiIsImFicyIsInoiLCJzcXJ0IiwiYXNpbiIsIlBJIiwic2hvd0Rvd25TY3JvbGwiLCJzdGFydFB1bGxEb3duUmVmcmVzaCIsIm9uUHVsbERvd25SZWZyZXNoIiwic3RvcFB1bGxEb3duUmVmcmVzaCIsImVuZFNjcm9sbCIsInNldFNjcm9sbEhlaWdodCIsImRlbGF5IiwibG9ja0Rvd25TY3JvbGwiLCJsb2NrVXBTY3JvbGwiLCJ1cCIsInNldEJvdW5jZSIsImhhc05leHQiLCJzdGFydE51bSIsIm9uUmVhY2hCb3R0b20iLCJvblBhZ2VTY3JvbGwiLCJzZXRTY3JvbGxUb3AiLCJzaG93VG9wQnRuIiwiaGlkZVRvcEJ0biIsInNjcm9sbCIsInNjcm9sbEhlaWdodCIsInByZVNjcm9sbFkiLCJpc0NoZWNrIiwiY2FuVXAiLCJnZXRTY3JvbGxCb3R0b20iLCJzaG93VXBTY3JvbGwiLCJzaG93RXJyIiwiZW5kVXBTY3JvbGwiLCJpc1Nob3dOb01vcmUiLCJpc1Nob3dMb2FkaW5nIiwicHJlUGFnZU51bSIsInByZVBhZ2VUaW1lIiwicmVtb3ZlRW1wdHkiLCJzZXRQYWdlTnVtIiwic2V0UGFnZVNpemUiLCJlbmRCeVBhZ2UiLCJkYXRhU2l6ZSIsInRvdGFsUGFnZSIsInN5c3RpbWUiLCJlbmRTdWNjZXNzIiwiZW5kQnlTaXplIiwidG90YWxTaXplIiwibG9hZFNpemUiLCJwYWdlTnVtIiwicGFnZVNpemUiLCJzaG93RW1wdHkiLCJhbGxEYXRhU2l6ZSIsImVuZEVyciIsInNjcm9sbFRvIiwidG9wQnRuU2hvdyIsIm15U2Nyb2xsVG8iLCJyZXNldFNjcm9sbFRvIiwiZ2V0U2Nyb2xsSGVpZ2h0IiwiZ2V0Q2xpZW50SGVpZ2h0IiwiZ2V0U3RlcCIsInN0YXIiLCJlbmQiLCJjb3VudCIsInN0ZXAiLCJ0aW1lciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImlzUmVhbCIsImgiLCJjbGllbnRIZWlnaHQiLCJzZXRDbGllbnRIZWlnaHQiLCJib2R5SGVpZ2h0Iiwic2V0Qm9keUhlaWdodCIsImNhbmNlbGFibGUiLCJkZWZhdWx0UHJldmVudGVkIiwiR2xvYmFsT3B0aW9uIiwidGV4dEVyciIsIndyYW5uaW5nIiwiJHUiLCJxdWVyeVBhcmFtcyIsInJvdXRlIiwidGltZUZvcm1hdCIsImRhdGUiLCJ0aW1lRnJvbSIsImNvbG9yR3JhZGllbnQiLCJndWlkIiwidHlwZTJpY29uIiwicmFuZG9tQXJyYXkiLCJodHRwIiwicG9zdCIsInB1dCIsImRlbGV0ZSIsImhleFRvUmdiIiwicmdiVG9IZXgiLCJyYW5kb20iLCJkZWVwQ2xvbmUiLCJkZWVwTWVyZ2UiLCJnZXRQYXJlbnQiLCJhZGRVbml0IiwidHJpbSIsInRvYXN0IiwiY29uZmlnIiwiaW5zdGFsbCIsIm9wZW5TaGFyZSIsIm1wU2hhcmUiLCJ0aW1lc3RhbXAiLCJmb3JtYXQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0UmVjdCIsIiR1R2V0UmVjdCIsInNlbGVjdG9yIiwiYWxsIiwiY3JlYXRlU2VsZWN0b3JRdWVyeSIsImluIiwiYm91bmRpbmdDbGllbnRSZWN0IiwicmVjdCIsImV4ZWMiLCJNZXNjcm9sbE1peGluIiwibWVzY3JvbGxJbml0IiwibWVzY3JvbGxJbml0QnlSZWYiLCJtZXNjcm9sbFJlZiIsImRvd25DYWxsYmFjayIsInVwQ2FsbGJhY2siLCJtb3VudGVkIiwiUmVxdWVzdCIsImN1c3RvbUNvbmZpZyIsInRtcENvbmZpZyIsImludGVyY2VwdG9yUmV1ZXN0IiwicmVzcG9uc2VUeXBlIiwidXJsIiwiaGVhZGVyIiwicmVzcG9uc2UiLCJoaWRlTG9hZGluZyIsImNsZWFyVGltZW91dCIsIm9yaWdpbmFsRGF0YSIsInJlc0ludGVyY2VwdG9ycyIsInN0YXR1c0NvZGUiLCJzaG93TW9kYWwiLCJ0aXRsZSIsInZhbGlkYXRlIiwiYmFzZVVybCIsImxvYWRpbmdUZXh0IiwibWFzayIsImxvYWRpbmdNYXNrIiwibG9hZGluZ1RpbWUiLCJzb3VyY2UiLCJwcm9wIiwidW5kZWZpbmVkIiwiTmFOIiwiaW5jbHVkZXMiLCJvIiwicmVxdWlyZSIsImVtYWlsIiwibW9iaWxlIiwiZGF0ZUlTTyIsImRpZ2l0cyIsImlkQ2FyZCIsImNhck5vIiwieHJlZyIsImNyZWciLCJhbW91bnQiLCJjaGluZXNlIiwicmVnIiwibGV0dGVyIiwiZW5Pck51bSIsImNvbnRhaW5zIiwicGFyYW0iLCJyYW5nZSIsInJhbmdlTGVuZ3RoIiwibGFuZGxpbmUiLCJqc29uU3RyaW5nIiwiYXJyYXkiLCJvYmplY3QiLCJpc0VtcHR5IiwiaXNQcmVmaXgiLCJhcnJheUZvcm1hdCIsInByZWZpeCIsIl9yZXN1bHQiLCJfdmFsdWUiLCJjb21tYVN0ciIsImpvaW4iLCJkZWx0YSIsImFuaW1hdGlvblR5cGUiLCJhbmltYXRpb25EdXJhdGlvbiIsIm5hdmlnYXRlVG8iLCJyZWRpcmVjdFRvIiwic3dpdGNoVGFiIiwicmVMYXVuY2giLCJuYXZpZ2F0ZUJhY2siLCJmbXQiLCJvcHQiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJrIiwiUmVnRXhwIiwicGFkU3RhcnQiLCJ0aXBzIiwic3RhcnRDb2xvciIsImVuZENvbG9yIiwic3RhcnRSR0IiLCJzdGFydFIiLCJzdGFydEciLCJzdGFydEIiLCJlbmRSR0IiLCJlbmRSIiwiZW5kRyIsImVuZEIiLCJzUiIsInNHIiwic0IiLCJjb2xvckFyciIsImhleCIsInNDb2xvciIsInNDb2xvck5ldyIsInNDb2xvckNoYW5nZSIsIm1hcCIsInZhbCIsInJnYiIsIl90aGlzIiwiYUNvbG9yIiwic3RySGV4IiwiYU51bSIsIm51bUhleCIsImZpcnN0VSIsInJhZGl4IiwiY2hhcnMiLCJ1dWlkIiwiciIsInNoaWZ0IiwicHJpbWFyeSIsInByaW1hcnlEYXJrIiwicHJpbWFyeURpc2FibGVkIiwicHJpbWFyeUxpZ2h0IiwiaW5mbyIsImluZm9EYXJrIiwiaW5mb0Rpc2FibGVkIiwiaW5mb0xpZ2h0Iiwid2FybmluZyIsIndhcm5pbmdEYXJrIiwid2FybmluZ0Rpc2FibGVkIiwid2FybmluZ0xpZ2h0IiwiZXJyb3JEYXJrIiwiZXJyb3JEaXNhYmxlZCIsImVycm9yTGlnaHQiLCJzdWNjZXNzRGFyayIsInN1Y2Nlc3NEaXNhYmxlZCIsInN1Y2Nlc3NMaWdodCIsIm1haW5Db2xvciIsImNvbnRlbnRDb2xvciIsInRpcHNDb2xvciIsImxpZ2h0Q29sb3IiLCJib3JkZXJDb2xvciIsImZpbGwiLCJpY29uTmFtZSIsInNvcnQiLCJ1bml0IiwidmFsaWRhdGlvbiIsIm1pbiIsIm1heCIsImdhYiIsInBvcyIsInNob3dUb2FzdCIsInYiLCJub05ldHdvcmsiLCJwb3B1cCIsIm5hdmJhciIsInRvcFRpcHMiLCJzdGlja3kiLCJpbmRleExpc3RTdGlja3kiLCJTVEFUX1ZFUlNJT04iLCJTVEFUX1VSTCIsIlNUQVRfSDVfVVJMIiwiUEFHRV9QVkVSX1RJTUUiLCJBUFBfUFZFUl9USU1FIiwiT1BFUkFUSU5HX1RJTUUiLCJVVUlEX0tFWSIsIlVVSURfVkFMVUUiLCJnZXRVdWlkIiwiZ2V0UGxhdGZvcm1OYW1lIiwicGx1cyIsInJ1bnRpbWUiLCJnZXREQ2xvdWRJZCIsImdldFN0b3JhZ2VTeW5jIiwibm93Iiwic2V0U3RvcmFnZVN5bmMiLCJnZXRTZ2luIiwic3RhdERhdGEiLCJzb3J0QXJyIiwic2dpbiIsInNnaW5TdHIiLCJzaWduIiwic3Vic3RyIiwiZ2V0U3BsaWNpbmciLCJwbGF0Zm9ybUxpc3QiLCJnZXRQYWNrTmFtZSIsInBhY2tOYW1lIiwiZ2V0VmVyc2lvbiIsImdldENoYW5uZWwiLCJwbGF0Zm9ybU5hbWUiLCJjaGFubmVsIiwiZ2V0U2NlbmUiLCJzY2VuZSIsImdldExhdW5jaE9wdGlvbnNTeW5jIiwiRmlyc3RfX1Zpc2l0X19UaW1lX19LRVkiLCJMYXN0X19WaXNpdF9fVGltZV9fS0VZIiwiZ2V0Rmlyc3RWaXNpdFRpbWUiLCJ0aW1lU3RvcmdlIiwicmVtb3ZlU3RvcmFnZVN5bmMiLCJnZXRMYXN0VmlzaXRUaW1lIiwiUEFHRV9SRVNJREVOQ0VfVElNRSIsIkZpcnN0X1BhZ2VfcmVzaWRlbmNlX3RpbWUiLCJMYXN0X1BhZ2VfcmVzaWRlbmNlX3RpbWUiLCJzZXRQYWdlUmVzaWRlbmNlVGltZSIsImdldFBhZ2VSZXNpZGVuY2VUaW1lIiwiVE9UQUxfX1ZJU0lUX19DT1VOVCIsImdldFRvdGFsVmlzaXRDb3VudCIsIkdldEVuY29kZVVSSUNvbXBvbmVudE9wdGlvbnMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJTZXRfX0ZpcnN0X19UaW1lIiwiU2V0X19MYXN0X19UaW1lIiwiZ2V0Rmlyc3RUaW1lIiwiZ2V0TGFzdFRpbWUiLCJnZXRSZXNpZGVuY2VUaW1lIiwicmVzaWRlbmNlVGltZSIsIm92ZXJ0aW1lIiwiZ2V0Um91dGUiLCJwYWdlcyIsImdldEN1cnJlbnRQYWdlcyIsIl9zZWxmIiwiaXMiLCJnZXRQYWdlUm91dGUiLCJzZWxmIiwiX3F1ZXJ5IiwiZ2V0UGFnZVR5cGVzIiwiY2FsaWJyYXRpb24iLCJldmVudE5hbWUiLCJQYWdlc0pzb24iLCJzdGF0Q29uZmlnIiwicmVzdWx0T3B0aW9ucyIsIlV0aWwiLCJfcmV0cnkiLCJfcGxhdGZvcm0iLCJfbmF2aWdhdGlvbkJhclRpdGxlIiwicmVwb3J0IiwibHQiLCJfb3BlcmF0aW5nVGltZSIsIl9yZXBvcnRpbmdSZXF1ZXN0RGF0YSIsIl9fcHJldmVudF90cmlnZ2VyaW5nIiwiX19saWNhdGlvbkhpZGUiLCJfX2xpY2F0aW9uU2hvdyIsIl9sYXN0UGFnZVJvdXRlIiwidXQiLCJtcG4iLCJhayIsImFwcGlkIiwidXN2IiwiY2giLCJjbiIsInBuIiwiY3QiLCJ0dCIsInAiLCJicmFuZCIsIm1kIiwibW9kZWwiLCJzdiIsInN5c3RlbSIsIm1wc2RrIiwiU0RLVmVyc2lvbiIsIm1wdiIsImxhbmciLCJsYW5ndWFnZSIsInByIiwid3ciLCJ3aCIsIndpbmRvd0hlaWdodCIsInN3Iiwic2NyZWVuV2lkdGgiLCJzaCIsInNjcmVlbkhlaWdodCIsInBhdGgiLCJzYyIsIl9zZW5kUmVwb3J0UmVxdWVzdCIsIl9zZW5kSGlkZVJlcXVlc3QiLCJ1cmxyZWYiLCJ1cmxyZWZfdHMiLCJyb3V0ZXBhdGgiLCJ0aXRsZU5WaWV3IiwidGl0bGVUZXh0IiwibmF2aWdhdGlvbkJhclRpdGxlVGV4dCIsIl9zZW5kUGFnZVJlcXVlc3QiLCJfc2VuZEV2ZW50UmVxdWVzdCIsImZ2dHMiLCJsdnRzIiwidHZjIiwiZ2V0UHJvcGVydHkiLCJnZXROZXR3b3JrSW5mbyIsImVfbiIsImVfdiIsImdldE5ldHdvcmtUeXBlIiwibmV0IiwibmV0d29ya1R5cGUiLCJnZXRMb2NhdGlvbiIsIndndGluZm8iLCJnZW9jb2RlIiwiYWRkcmVzcyIsImNvdW50cnkiLCJwcm92aW5jZSIsImNpdHkiLCJsYXQiLCJsYXRpdHVkZSIsImxuZyIsImxvbmdpdHVkZSIsInR0biIsInR0cGoiLCJ0dGMiLCJyZXF1ZXN0RGF0YSIsInVuaVN0YXREYXRhIiwiZmlyc3RBcnIiLCJjb250ZW50QXJyIiwibGFzdEFyciIsInJkIiwiZWxtIiwibmV3RGF0YSIsIm9wdGlvbnNEYXRhIiwicmVxdWVzdHMiLCJpbWFnZVJlcXVlc3QiLCJfc2VuZFJlcXVlc3QiLCJpbWFnZSIsIkltYWdlIiwiU3RhdCIsImluc3RhbmNlIiwiYWRkSW50ZXJjZXB0b3JJbml0IiwiaW50ZXJjZXB0TG9naW4iLCJpbnRlcmNlcHRTaGFyZSIsImludGVyY2VwdFJlcXVlc3RQYXltZW50IiwiX2xvZ2luIiwiX3NoYXJlIiwiX3BheW1lbnQiLCJfcGFnZVNob3ciLCJfYXBwbGljYXRpb25TaG93IiwiX3BhZ2VIaWRlIiwiX2FwcGxpY2F0aW9uSGlkZSIsImVtIiwiZW1WYWwiLCJtZXNzYWdlIiwic3RhY2siLCJzdGF0IiwiZ2V0SW5zdGFuY2UiLCJpc0hpZGUiLCJsaWZlY3ljbGUiLCJsb2FkIiwib25TaGFyZUFwcE1lc3NhZ2UiLCJvbGRTaGFyZUFwcE1lc3NhZ2UiLCJvbkhpZGUiLCJvbkVycm9yIiwibWFpbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OzsrTEFBQSxxRTs7QUFFQSxJQUFNQSxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBbkM7QUFDQSxJQUFNQyxjQUFjLEdBQUdILE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkUsY0FBeEM7O0FBRUEsU0FBU0MsSUFBVCxDQUFlQyxFQUFmLEVBQW1CO0FBQ2pCLFNBQU8sT0FBT0EsRUFBUCxLQUFjLFVBQXJCO0FBQ0Q7O0FBRUQsU0FBU0MsS0FBVCxDQUFnQkMsR0FBaEIsRUFBcUI7QUFDbkIsU0FBTyxPQUFPQSxHQUFQLEtBQWUsUUFBdEI7QUFDRDs7QUFFRCxTQUFTQyxhQUFULENBQXdCQyxHQUF4QixFQUE2QjtBQUMzQixTQUFPVixTQUFTLENBQUNXLElBQVYsQ0FBZUQsR0FBZixNQUF3QixpQkFBL0I7QUFDRDs7QUFFRCxTQUFTRSxNQUFULENBQWlCRixHQUFqQixFQUFzQkcsR0FBdEIsRUFBMkI7QUFDekIsU0FBT1QsY0FBYyxDQUFDTyxJQUFmLENBQW9CRCxHQUFwQixFQUF5QkcsR0FBekIsQ0FBUDtBQUNEOztBQUVELFNBQVNDLElBQVQsR0FBaUIsQ0FBRTs7QUFFbkI7OztBQUdBLFNBQVNDLE1BQVQsQ0FBaUJULEVBQWpCLEVBQXFCO0FBQ25CLE1BQU1VLEtBQUssR0FBR2YsTUFBTSxDQUFDZ0IsTUFBUCxDQUFjLElBQWQsQ0FBZDtBQUNBLFNBQU8sU0FBU0MsUUFBVCxDQUFtQlYsR0FBbkIsRUFBd0I7QUFDN0IsUUFBTVcsR0FBRyxHQUFHSCxLQUFLLENBQUNSLEdBQUQsQ0FBakI7QUFDQSxXQUFPVyxHQUFHLEtBQUtILEtBQUssQ0FBQ1IsR0FBRCxDQUFMLEdBQWFGLEVBQUUsQ0FBQ0Us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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEIsU0FBUyxxQkFBcUI7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMkJBQTJCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxPQUFPO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksSUFFUTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLEtBQXFDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMkJBQTJCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFNBQVM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVB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Q0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUSxJQUFxQztBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0VBQXNFOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssdUZBQXVGO0FBQzVGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLE9BQU87QUFDOUM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFNBQVM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVEsSUFBcUM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsT0FBTztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLElBQXFDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0JBQW9CO0FBQ3pDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQSw4QkFBOEI7QUFDOUIsTUFBTSxJQUFxQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVEsS0FBcUM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxJQUFxQztBQUM3QztBQUNBLEtBQUssTUFBTSxFQUVOO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0Esc0NBQXNDO0FBQ3RDLDhDOztBQUVBO0FBQ0EsUUFBUSxLQUFxQztBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZUFBZTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTSxLQUFxQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUSxLQUFxQztBQUM3QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsWUFBWSxLQUFxQztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOzs7O0FBSUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0EsMENBQTBDLDJCQUEyQixFQUFFO0FBQ3ZFLEtBQUs7QUFDTDtBQUNBLDBDQUEwQyw0QkFBNEIsRUFBRTtBQUN4RSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBLHdDQUF3QyxXQUFXO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMsa0JBQWtCO0FBQ25EO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QWtHZCxpQkFBZSxRQWxHRDtBQW1HZCxVQUFRLFFBbkdNO0FBb0dkLHFCQUFtQixRQXBHTDtBQXFHZCxjQUFZLFFBckdFO0FBc0dkLHNCQUFvQixRQXRHTjtBQXVHZCxZQUFVLFFBdkdJO0FBd0dkLGNBQVksUUF4R0U7QUF5R2QsV0FBUyxRQXpHSztBQTBHZCxrQkFBZ0IsUUExR0Y7QUEyR2QsbUJBQWlCLFFBM0dIO0FBNEdkLHFCQUFtQixRQTVHTDtBQTZHZCxzQkFBb0IsUUE3R047QUE4R2QscUJBQW1CLFFBOUdMO0FBK0dkLGVBQWEsUUEvR0M7QUFnSGQsWUFBVSxRQWhISTtBQWlIZCxtQkFBaUIsUUFqSEg7QUFrSGQsY0FBWSxRQWxIRTtBQW1IZCxpQkFBZSxRQW5IRDtBQW9IZCxVQUFRLFFBcEhNO0FBcUhkLFdBQVMsUUFySEs7QUFzSGQsa0JBQWdCLFFBdEhGO0FBdUhkLGFBQVcsUUF2SEc7QUF3SGQsY0FBWSxRQXhIRTtBQXlIZCxrQkFBZ0IsUUF6SEY7QUEwSGQsY0FBWSxRQTFIRTtBQTJIZCx1QkFBcUIsUUEzSFA7QUE0SGQsZ0JBQWMsUUE1SEE7QUE2SGQsb0JBQWtCLFFBN0hKO0FBOEhkLHlCQUF1QixRQTlIVDtBQStIZCxrQkFBZ0IsUUEvSEY7QUFnSWQsMkJBQXlCLFFBaElYO0FBaUlkLGdCQUFhLFFBaklDO0FBa0lkLFVBQU8sUUFsSU8sRSIsImZpbGUiOiJjb21tb24vdmVuZG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xyXG5cclxuY29uc3QgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcclxuY29uc3QgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG5cclxuZnVuY3Rpb24gaXNGbiAoZm4pIHtcclxuICByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzU3RyIChzdHIpIHtcclxuICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZydcclxufVxyXG5cclxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XHJcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcclxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcclxufVxyXG5cclxuZnVuY3Rpb24gbm9vcCAoKSB7fVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcclxuICBjb25zdCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcclxuICAgIGNvbnN0IGhpdCA9IGNhY2hlW3N0cl07XHJcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxyXG4gKi9cclxuY29uc3QgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcclxuY29uc3QgY2FtZWxpemUgPSBjYWNoZWQoKHN0cikgPT4ge1xyXG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCAoXywgYykgPT4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnKVxyXG59KTtcclxuXHJcbmNvbnN0IEhPT0tTID0gW1xyXG4gICdpbnZva2UnLFxyXG4gICdzdWNjZXNzJyxcclxuICAnZmFpbCcsXHJcbiAgJ2NvbXBsZXRlJyxcclxuICAncmV0dXJuVmFsdWUnXHJcbl07XHJcblxyXG5jb25zdCBnbG9iYWxJbnRlcmNlcHRvcnMgPSB7fTtcclxuY29uc3Qgc2NvcGVkSW50ZXJjZXB0b3JzID0ge307XHJcblxyXG5mdW5jdGlvbiBtZXJnZUhvb2sgKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcclxuICBjb25zdCByZXMgPSBjaGlsZFZhbFxyXG4gICAgPyBwYXJlbnRWYWxcclxuICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxyXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXHJcbiAgICAgICAgPyBjaGlsZFZhbCA6IFtjaGlsZFZhbF1cclxuICAgIDogcGFyZW50VmFsO1xyXG4gIHJldHVybiByZXNcclxuICAgID8gZGVkdXBlSG9va3MocmVzKVxyXG4gICAgOiByZXNcclxufVxyXG5cclxuZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XHJcbiAgY29uc3QgcmVzID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xyXG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcclxuICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcmVzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZUhvb2sgKGhvb2tzLCBob29rKSB7XHJcbiAgY29uc3QgaW5kZXggPSBob29rcy5pbmRleE9mKGhvb2spO1xyXG4gIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgIGhvb2tzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBtZXJnZUludGVyY2VwdG9ySG9vayAoaW50ZXJjZXB0b3IsIG9wdGlvbikge1xyXG4gIE9iamVjdC5rZXlzKG9wdGlvbikuZm9yRWFjaChob29rID0+IHtcclxuICAgIGlmIChIT09LUy5pbmRleE9mKGhvb2spICE9PSAtMSAmJiBpc0ZuKG9wdGlvbltob29rXSkpIHtcclxuICAgICAgaW50ZXJjZXB0b3JbaG9va10gPSBtZXJnZUhvb2soaW50ZXJjZXB0b3JbaG9va10sIG9wdGlvbltob29rXSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZUludGVyY2VwdG9ySG9vayAoaW50ZXJjZXB0b3IsIG9wdGlvbikge1xyXG4gIGlmICghaW50ZXJjZXB0b3IgfHwgIW9wdGlvbikge1xyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG4gIE9iamVjdC5rZXlzKG9wdGlvbikuZm9yRWFjaChob29rID0+IHtcclxuICAgIGlmIChIT09LUy5pbmRleE9mKGhvb2spICE9PSAtMSAmJiBpc0ZuKG9wdGlvbltob29rXSkpIHtcclxuICAgICAgcmVtb3ZlSG9vayhpbnRlcmNlcHRvcltob29rXSwgb3B0aW9uW2hvb2tdKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkSW50ZXJjZXB0b3IgKG1ldGhvZCwgb3B0aW9uKSB7XHJcbiAgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdzdHJpbmcnICYmIGlzUGxhaW5PYmplY3Qob3B0aW9uKSkge1xyXG4gICAgbWVyZ2VJbnRlcmNlcHRvckhvb2soc2NvcGVkSW50ZXJjZXB0b3JzW21ldGhvZF0gfHwgKHNjb3BlZEludGVyY2VwdG9yc1ttZXRob2RdID0ge30pLCBvcHRpb24pO1xyXG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChtZXRob2QpKSB7XHJcbiAgICBtZXJnZUludGVyY2VwdG9ySG9vayhnbG9iYWxJbnRlcmNlcHRvcnMsIG1ldGhvZCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVJbnRlcmNlcHRvciAobWV0aG9kLCBvcHRpb24pIHtcclxuICBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ3N0cmluZycpIHtcclxuICAgIGlmIChpc1BsYWluT2JqZWN0KG9wdGlvbikpIHtcclxuICAgICAgcmVtb3ZlSW50ZXJjZXB0b3JIb29rKHNjb3BlZEludGVyY2VwdG9yc1ttZXRob2RdLCBvcHRpb24pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGVsZXRlIHNjb3BlZEludGVyY2VwdG9yc1ttZXRob2RdO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChtZXRob2QpKSB7XHJcbiAgICByZW1vdmVJbnRlcmNlcHRvckhvb2soZ2xvYmFsSW50ZXJjZXB0b3JzLCBtZXRob2QpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gd3JhcHBlckhvb2sgKGhvb2spIHtcclxuICByZXR1cm4gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIHJldHVybiBob29rKGRhdGEpIHx8IGRhdGFcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzUHJvbWlzZSAob2JqKSB7XHJcbiAgcmV0dXJuICEhb2JqICYmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSAmJiB0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbidcclxufVxyXG5cclxuZnVuY3Rpb24gcXVldWUgKGhvb2tzLCBkYXRhKSB7XHJcbiAgbGV0IHByb21pc2UgPSBmYWxzZTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCBob29rID0gaG9va3NbaV07XHJcbiAgICBpZiAocHJvbWlzZSkge1xyXG4gICAgICBwcm9taXNlID0gUHJvbWlzZS50aGVuKHdyYXBwZXJIb29rKGhvb2spKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHJlcyA9IGhvb2soZGF0YSk7XHJcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xyXG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUocmVzKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAocmVzID09PSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB0aGVuICgpIHt9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBwcm9taXNlIHx8IHtcclxuICAgIHRoZW4gKGNhbGxiYWNrKSB7XHJcbiAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gd3JhcHBlck9wdGlvbnMgKGludGVyY2VwdG9yLCBvcHRpb25zID0ge30pIHtcclxuICBbJ3N1Y2Nlc3MnLCAnZmFpbCcsICdjb21wbGV0ZSddLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpbnRlcmNlcHRvcltuYW1lXSkpIHtcclxuICAgICAgY29uc3Qgb2xkQ2FsbGJhY2sgPSBvcHRpb25zW25hbWVdO1xyXG4gICAgICBvcHRpb25zW25hbWVdID0gZnVuY3Rpb24gY2FsbGJhY2tJbnRlcmNlcHRvciAocmVzKSB7XHJcbiAgICAgICAgcXVldWUoaW50ZXJjZXB0b3JbbmFtZV0sIHJlcykudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1taXhlZC1vcGVyYXRvcnMgKi9cclxuICAgICAgICAgIHJldHVybiBpc0ZuKG9sZENhbGxiYWNrKSAmJiBvbGRDYWxsYmFjayhyZXMpIHx8IHJlc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHJldHVybiBvcHRpb25zXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyYXBwZXJSZXR1cm5WYWx1ZSAobWV0aG9kLCByZXR1cm5WYWx1ZSkge1xyXG4gIGNvbnN0IHJldHVyblZhbHVlSG9va3MgPSBbXTtcclxuICBpZiAoQXJyYXkuaXNBcnJheShnbG9iYWxJbnRlcmNlcHRvcnMucmV0dXJuVmFsdWUpKSB7XHJcbiAgICByZXR1cm5WYWx1ZUhvb2tzLnB1c2goLi4uZ2xvYmFsSW50ZXJjZXB0b3JzLnJldHVyblZhbHVlKTtcclxuICB9XHJcbiAgY29uc3QgaW50ZXJjZXB0b3IgPSBzY29wZWRJbnRlcmNlcHRvcnNbbWV0aG9kXTtcclxuICBpZiAoaW50ZXJjZXB0b3IgJiYgQXJyYXkuaXNBcnJheShpbnRlcmNlcHRvci5yZXR1cm5WYWx1ZSkpIHtcclxuICAgIHJldHVyblZhbHVlSG9va3MucHVzaCguLi5pbnRlcmNlcHRvci5yZXR1cm5WYWx1ZSk7XHJcbiAgfVxyXG4gIHJldHVyblZhbHVlSG9va3MuZm9yRWFjaChob29rID0+IHtcclxuICAgIHJldHVyblZhbHVlID0gaG9vayhyZXR1cm5WYWx1ZSkgfHwgcmV0dXJuVmFsdWU7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIHJldHVyblZhbHVlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEFwaUludGVyY2VwdG9ySG9va3MgKG1ldGhvZCkge1xyXG4gIGNvbnN0IGludGVyY2VwdG9yID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICBPYmplY3Qua2V5cyhnbG9iYWxJbnRlcmNlcHRvcnMpLmZvckVhY2goaG9vayA9PiB7XHJcbiAgICBpZiAoaG9vayAhPT0gJ3JldHVyblZhbHVlJykge1xyXG4gICAgICBpbnRlcmNlcHRvcltob29rXSA9IGdsb2JhbEludGVyY2VwdG9yc1tob29rXS5zbGljZSgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIGNvbnN0IHNjb3BlZEludGVyY2VwdG9yID0gc2NvcGVkSW50ZXJjZXB0b3JzW21ldGhvZF07XHJcbiAgaWYgKHNjb3BlZEludGVyY2VwdG9yKSB7XHJcbiAgICBPYmplY3Qua2V5cyhzY29wZWRJbnRlcmNlcHRvcikuZm9yRWFjaChob29rID0+IHtcclxuICAgICAgaWYgKGhvb2sgIT09ICdyZXR1cm5WYWx1ZScpIHtcclxuICAgICAgICBpbnRlcmNlcHRvcltob29rXSA9IChpbnRlcmNlcHRvcltob29rXSB8fCBbXSkuY29uY2F0KHNjb3BlZEludGVyY2VwdG9yW2hvb2tdKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHJldHVybiBpbnRlcmNlcHRvclxyXG59XHJcblxyXG5mdW5jdGlvbiBpbnZva2VBcGkgKG1ldGhvZCwgYXBpLCBvcHRpb25zLCAuLi5wYXJhbXMpIHtcclxuICBjb25zdCBpbnRlcmNlcHRvciA9IGdldEFwaUludGVyY2VwdG9ySG9va3MobWV0aG9kKTtcclxuICBpZiAoaW50ZXJjZXB0b3IgJiYgT2JqZWN0LmtleXMoaW50ZXJjZXB0b3IpLmxlbmd0aCkge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaW50ZXJjZXB0b3IuaW52b2tlKSkge1xyXG4gICAgICBjb25zdCByZXMgPSBxdWV1ZShpbnRlcmNlcHRvci5pbnZva2UsIG9wdGlvbnMpO1xyXG4gICAgICByZXR1cm4gcmVzLnRoZW4oKG9wdGlvbnMpID0+IHtcclxuICAgICAgICByZXR1cm4gYXBpKHdyYXBwZXJPcHRpb25zKGludGVyY2VwdG9yLCBvcHRpb25zKSwgLi4ucGFyYW1zKVxyXG4gICAgICB9KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGFwaSh3cmFwcGVyT3B0aW9ucyhpbnRlcmNlcHRvciwgb3B0aW9ucyksIC4uLnBhcmFtcylcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGFwaShvcHRpb25zLCAuLi5wYXJhbXMpXHJcbn1cclxuXHJcbmNvbnN0IHByb21pc2VJbnRlcmNlcHRvciA9IHtcclxuICByZXR1cm5WYWx1ZSAocmVzKSB7XHJcbiAgICBpZiAoIWlzUHJvbWlzZShyZXMpKSB7XHJcbiAgICAgIHJldHVybiByZXNcclxuICAgIH1cclxuICAgIHJldHVybiByZXMudGhlbihyZXMgPT4ge1xyXG4gICAgICByZXR1cm4gcmVzWzFdXHJcbiAgICB9KS5jYXRjaChyZXMgPT4ge1xyXG4gICAgICByZXR1cm4gcmVzWzBdXHJcbiAgICB9KVxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IFNZTkNfQVBJX1JFID1cclxuICAvXlxcJHxzZW5kTmF0aXZlRXZlbnR8cmVzdG9yZUdsb2JhbHxnZXRDdXJyZW50U3ViTlZ1ZXxnZXRNZW51QnV0dG9uQm91bmRpbmdDbGllbnRSZWN0fF5yZXBvcnR8aW50ZXJjZXB0b3JzfEludGVyY2VwdG9yJHxnZXRTdWJOVnVlQnlJZHxyZXF1aXJlTmF0aXZlUGx1Z2lufHVweDJweHxoaWRlS2V5Ym9hcmR8Y2FuSVVzZXxeY3JlYXRlfFN5bmMkfE1hbmFnZXIkfGJhc2U2NFRvQXJyYXlCdWZmZXJ8YXJyYXlCdWZmZXJUb0Jhc2U2NC87XHJcblxyXG5jb25zdCBDT05URVhUX0FQSV9SRSA9IC9eY3JlYXRlfE1hbmFnZXIkLztcclxuXHJcbi8vIENvbnRleHTkvovlpJbmg4XlhrVcclxuY29uc3QgQ09OVEVYVF9BUElfUkVfRVhDID0gWydjcmVhdGVCTEVDb25uZWN0aW9uJ107XHJcblxyXG4vLyDlkIzmraXkvovlpJbmg4XlhrVcclxuY29uc3QgQVNZTkNfQVBJID0gWydjcmVhdGVCTEVDb25uZWN0aW9uJ107XHJcblxyXG5jb25zdCBDQUxMQkFDS19BUElfUkUgPSAvXm9ufF5vZmYvO1xyXG5cclxuZnVuY3Rpb24gaXNDb250ZXh0QXBpIChuYW1lKSB7XHJcbiAgcmV0dXJuIENPTlRFWFRfQVBJX1JFLnRlc3QobmFtZSkgJiYgQ09OVEVYVF9BUElfUkVfRVhDLmluZGV4T2YobmFtZSkgPT09IC0xXHJcbn1cclxuZnVuY3Rpb24gaXNTeW5jQXBpIChuYW1lKSB7XHJcbiAgcmV0dXJuIFNZTkNfQVBJX1JFLnRlc3QobmFtZSkgJiYgQVNZTkNfQVBJLmluZGV4T2YobmFtZSkgPT09IC0xXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzQ2FsbGJhY2tBcGkgKG5hbWUpIHtcclxuICByZXR1cm4gQ0FMTEJBQ0tfQVBJX1JFLnRlc3QobmFtZSkgJiYgbmFtZSAhPT0gJ29uUHVzaCdcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlUHJvbWlzZSAocHJvbWlzZSkge1xyXG4gIHJldHVybiBwcm9taXNlLnRoZW4oZGF0YSA9PiB7XHJcbiAgICByZXR1cm4gW251bGwsIGRhdGFdXHJcbiAgfSlcclxuICAgIC5jYXRjaChlcnIgPT4gW2Vycl0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3VsZFByb21pc2UgKG5hbWUpIHtcclxuICBpZiAoXHJcbiAgICBpc0NvbnRleHRBcGkobmFtZSkgfHxcclxuICAgIGlzU3luY0FwaShuYW1lKSB8fFxyXG4gICAgaXNDYWxsYmFja0FwaShuYW1lKVxyXG4gICkge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG4gIHJldHVybiB0cnVlXHJcbn1cclxuXHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLWV4dGVuZC1uYXRpdmUgKi9cclxuaWYgKCFQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5KSB7XHJcbiAgUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuY29uc3RydWN0b3I7XHJcbiAgICByZXR1cm4gdGhpcy50aGVuKFxyXG4gICAgICB2YWx1ZSA9PiBwcm9taXNlLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbigoKSA9PiB2YWx1ZSksXHJcbiAgICAgIHJlYXNvbiA9PiBwcm9taXNlLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgdGhyb3cgcmVhc29uXHJcbiAgICAgIH0pXHJcbiAgICApXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJvbWlzaWZ5IChuYW1lLCBhcGkpIHtcclxuICBpZiAoIXNob3VsZFByb21pc2UobmFtZSkpIHtcclxuICAgIHJldHVybiBhcGlcclxuICB9XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIHByb21pc2VBcGkgKG9wdGlvbnMgPSB7fSwgLi4ucGFyYW1zKSB7XHJcbiAgICBpZiAoaXNGbihvcHRpb25zLnN1Y2Nlc3MpIHx8IGlzRm4ob3B0aW9ucy5mYWlsKSB8fCBpc0ZuKG9wdGlvbnMuY29tcGxldGUpKSB7XHJcbiAgICAgIHJldHVybiB3cmFwcGVyUmV0dXJuVmFsdWUobmFtZSwgaW52b2tlQXBpKG5hbWUsIGFwaSwgb3B0aW9ucywgLi4ucGFyYW1zKSlcclxuICAgIH1cclxuICAgIHJldHVybiB3cmFwcGVyUmV0dXJuVmFsdWUobmFtZSwgaGFuZGxlUHJvbWlzZShuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGludm9rZUFwaShuYW1lLCBhcGksIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcclxuICAgICAgICBzdWNjZXNzOiByZXNvbHZlLFxyXG4gICAgICAgIGZhaWw6IHJlamVjdFxyXG4gICAgICB9KSwgLi4ucGFyYW1zKTtcclxuICAgIH0pKSlcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IEVQUyA9IDFlLTQ7XHJcbmNvbnN0IEJBU0VfREVWSUNFX1dJRFRIID0gNzUwO1xyXG5sZXQgaXNJT1MgPSBmYWxzZTtcclxubGV0IGRldmljZVdpZHRoID0gMDtcclxubGV0IGRldmljZURQUiA9IDA7XHJcblxyXG5mdW5jdGlvbiBjaGVja0RldmljZVdpZHRoICgpIHtcclxuICBjb25zdCB7XHJcbiAgICBwbGF0Zm9ybSxcclxuICAgIHBpeGVsUmF0aW8sXHJcbiAgICB3aW5kb3dXaWR0aFxyXG4gIH0gPSBzd2FuLmdldFN5c3RlbUluZm9TeW5jKCk7IC8vIHVuaT0+c3dhbiBydW50aW1lIOe8luivkeebruagh+aYryB1bmkg5a+56LGh77yM5YaF6YOo5LiN5YWB6K6455u05o6l5L2/55SoIHVuaVxyXG5cclxuICBkZXZpY2VXaWR0aCA9IHdpbmRvd1dpZHRoO1xyXG4gIGRldmljZURQUiA9IHBpeGVsUmF0aW87XHJcbiAgaXNJT1MgPSBwbGF0Zm9ybSA9PT0gJ2lvcyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVweDJweCAobnVtYmVyLCBuZXdEZXZpY2VXaWR0aCkge1xyXG4gIGlmIChkZXZpY2VXaWR0aCA9PT0gMCkge1xyXG4gICAgY2hlY2tEZXZpY2VXaWR0aCgpO1xyXG4gIH1cclxuXHJcbiAgbnVtYmVyID0gTnVtYmVyKG51bWJlcik7XHJcbiAgaWYgKG51bWJlciA9PT0gMCkge1xyXG4gICAgcmV0dXJuIDBcclxuICB9XHJcbiAgbGV0IHJlc3VsdCA9IChudW1iZXIgLyBCQVNFX0RFVklDRV9XSURUSCkgKiAobmV3RGV2aWNlV2lkdGggfHwgZGV2aWNlV2lkdGgpO1xyXG4gIGlmIChyZXN1bHQgPCAwKSB7XHJcbiAgICByZXN1bHQgPSAtcmVzdWx0O1xyXG4gIH1cclxuICByZXN1bHQgPSBNYXRoLmZsb29yKHJlc3VsdCArIEVQUyk7XHJcbiAgaWYgKHJlc3VsdCA9PT0gMCkge1xyXG4gICAgaWYgKGRldmljZURQUiA9PT0gMSB8fCAhaXNJT1MpIHtcclxuICAgICAgcmV0dXJuIDFcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiAwLjVcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG51bWJlciA8IDAgPyAtcmVzdWx0IDogcmVzdWx0XHJcbn1cclxuXHJcbmNvbnN0IGludGVyY2VwdG9ycyA9IHtcclxuICBwcm9taXNlSW50ZXJjZXB0b3JcclxufTtcclxuXHJcbnZhciBiYXNlQXBpID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xyXG4gIF9fcHJvdG9fXzogbnVsbCxcclxuICB1cHgycHg6IHVweDJweCxcclxuICBhZGRJbnRlcmNlcHRvcjogYWRkSW50ZXJjZXB0b3IsXHJcbiAgcmVtb3ZlSW50ZXJjZXB0b3I6IHJlbW92ZUludGVyY2VwdG9yLFxyXG4gIGludGVyY2VwdG9yczogaW50ZXJjZXB0b3JzXHJcbn0pO1xyXG5cclxudmFyIHByZXZpZXdJbWFnZSA9IHtcclxuICBhcmdzIChmcm9tQXJncykge1xyXG4gICAgbGV0IGN1cnJlbnRJbmRleCA9IHBhcnNlSW50KGZyb21BcmdzLmN1cnJlbnQpO1xyXG4gICAgaWYgKGlzTmFOKGN1cnJlbnRJbmRleCkpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBjb25zdCB1cmxzID0gZnJvbUFyZ3MudXJscztcclxuICAgIGlmICghQXJyYXkuaXNBcnJheSh1cmxzKSkge1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGNvbnN0IGxlbiA9IHVybHMubGVuZ3RoO1xyXG4gICAgaWYgKCFsZW4pIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBpZiAoY3VycmVudEluZGV4IDwgMCkge1xyXG4gICAgICBjdXJyZW50SW5kZXggPSAwO1xyXG4gICAgfSBlbHNlIGlmIChjdXJyZW50SW5kZXggPj0gbGVuKSB7XHJcbiAgICAgIGN1cnJlbnRJbmRleCA9IGxlbiAtIDE7XHJcbiAgICB9XHJcbiAgICBpZiAoY3VycmVudEluZGV4ID4gMCkge1xyXG4gICAgICBmcm9tQXJncy5jdXJyZW50ID0gdXJsc1tjdXJyZW50SW5kZXhdO1xyXG4gICAgICBmcm9tQXJncy51cmxzID0gdXJscy5maWx0ZXIoXHJcbiAgICAgICAgKGl0ZW0sIGluZGV4KSA9PiBpbmRleCA8IGN1cnJlbnRJbmRleCA/IGl0ZW0gIT09IHVybHNbY3VycmVudEluZGV4XSA6IHRydWVcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZyb21BcmdzLmN1cnJlbnQgPSB1cmxzWzBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaW5kaWNhdG9yOiBmYWxzZSxcclxuICAgICAgbG9vcDogZmFsc2VcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vLyDkuI3mlK/mjIHnmoQgQVBJIOWIl+ihqFxyXG5jb25zdCB0b2RvcyA9IFtcclxuICAvLyAnaGlkZUtleWJvYXJkJyxcclxuICAvLyAnb25HeXJvc2NvcGVDaGFuZ2UnLFxyXG4gIC8vICdzdGFydEd5cm9zY29wZScsXHJcbiAgLy8gJ3N0b3BHeXJvc2NvcGUnLFxyXG4gIC8vICdvcGVuQmx1ZXRvb3RoQWRhcHRlcicsXHJcbiAgLy8gJ3N0YXJ0Qmx1ZXRvb3RoRGV2aWNlc0Rpc2NvdmVyeScsXHJcbiAgLy8gJ29uQmx1ZXRvb3RoRGV2aWNlRm91bmQnLFxyXG4gIC8vICdzdG9wQmx1ZXRvb3RoRGV2aWNlc0Rpc2NvdmVyeScsXHJcbiAgLy8gJ29uQmx1ZXRvb3RoQWRhcHRlclN0YXRlQ2hhbmdlJyxcclxuICAvLyAnZ2V0Q29ubmVjdGVkQmx1ZXRvb3RoRGV2aWNlcycsXHJcbiAgLy8gJ2dldEJsdWV0b290aERldmljZXMnLFxyXG4gIC8vICdnZXRCbHVldG9vdGhBZGFwdGVyU3RhdGUnLFxyXG4gIC8vICdjbG9zZUJsdWV0b290aEFkYXB0ZXInLFxyXG4gIC8vICd3cml0ZUJMRUNoYXJhY3RlcmlzdGljVmFsdWUnLFxyXG4gIC8vICdyZWFkQkxFQ2hhcmFjdGVyaXN0aWNWYWx1ZScsXHJcbiAgLy8gJ29uQkxFQ29ubmVjdGlvblN0YXRlQ2hhbmdlJyxcclxuICAvLyAnb25CTEVDaGFyYWN0ZXJpc3RpY1ZhbHVlQ2hhbmdlJyxcclxuICAvLyAnbm90aWZ5QkxFQ2hhcmFjdGVyaXN0aWNWYWx1ZUNoYW5nZScsXHJcbiAgLy8gJ2dldEJMRURldmljZVNlcnZpY2VzJyxcclxuICAvLyAnZ2V0QkxFRGV2aWNlQ2hhcmFjdGVyaXN0aWNzJyxcclxuICAvLyAnY3JlYXRlQkxFQ29ubmVjdGlvbicsXHJcbiAgLy8gJ2Nsb3NlQkxFQ29ubmVjdGlvbicsXHJcbiAgLy8gJ29uQmVhY29uU2VydmljZUNoYW5nZScsXHJcbiAgLy8gJ29uQmVhY29uVXBkYXRlJyxcclxuICAvLyAnZ2V0QmVhY29ucycsXHJcbiAgLy8gJ3N0YXJ0QmVhY29uRGlzY292ZXJ5JyxcclxuICAvLyAnc3RvcEJlYWNvbkRpc2NvdmVyeScsXHJcbiAgLy8gJ2hpZGVTaGFyZU1lbnUnLFxyXG4gIC8vICdvbldpbmRvd1Jlc2l6ZScsXHJcbiAgLy8gJ29mZldpbmRvd1Jlc2l6ZScsXHJcbiAgLy8gJ3ZpYnJhdGUnXHJcbl07XHJcblxyXG4vLyDlrZjlnKjlhbzlrrnmgKfnmoQgQVBJIOWIl+ihqFxyXG5jb25zdCBjYW5JVXNlcyA9IFtdO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlVG9kb01ldGhvZCAoY29udGV4dE5hbWUsIG1ldGhvZE5hbWUpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gdW5zdXBwb3J0ZWQgKCkge1xyXG4gICAgY29uc29sZS5lcnJvcihg55m+5bqm5bCP56iL5bqPICR7Y29udGV4dE5hbWV95pqC5LiN5pSv5oyBJHttZXRob2ROYW1lfWApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gX2hhbmRsZUVudkluZm8gKHJlc3VsdCkge1xyXG4gIHJlc3VsdC5taW5pUHJvZ3JhbSA9IHtcclxuICAgIGFwcElkOiByZXN1bHQuYXBwS2V5XHJcbiAgfTtcclxuICByZXN1bHQucGx1Z2luID0ge1xyXG4gICAgdmVyc2lvbjogcmVzdWx0LnNka1ZlcnNpb25cclxuICB9O1xyXG59XHJcblxyXG4vLyDpnIDopoHlgZrovazmjaLnmoQgQVBJIOWIl+ihqFxyXG5jb25zdCBwcm90b2NvbHMgPSB7XHJcbiAgcmVxdWVzdDoge1xyXG4gICAgYXJncyAoZnJvbUFyZ3MpIHtcclxuICAgICAgLy8gVE9ET1xyXG4gICAgICAvLyBkYXRhIOS4jeaUr+aMgSBBcnJheUJ1ZmZlclxyXG4gICAgICAvLyBtZXRob2Qg5LiN5pSv5oyBIFRSQUNFLCBDT05ORUNUXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgbWV0aG9kOiAnbWV0aG9kJyxcclxuICAgICAgICBkYXRhVHlwZSAodHlwZSkge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmFtZTogJ2RhdGFUeXBlJyxcclxuICAgICAgICAgICAgdmFsdWU6IHR5cGUgPT09ICdqc29uJyA/IHR5cGUgOiAnc3RyaW5nJ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgY29ubmVjdFNvY2tldDoge1xyXG4gICAgYXJnczoge1xyXG4gICAgICBtZXRob2Q6IGZhbHNlXHJcbiAgICB9XHJcbiAgfSxcclxuICBwcmV2aWV3SW1hZ2UsXHJcbiAgZ2V0UmVjb3JkZXJNYW5hZ2VyOiB7XHJcbiAgICByZXR1cm5WYWx1ZSAoZnJvbVJldCkge1xyXG4gICAgICBmcm9tUmV0Lm9uRnJhbWVSZWNvcmRlZCA9IGNyZWF0ZVRvZG9NZXRob2QoJ1JlY29yZGVyTWFuYWdlcicsICdvbkZyYW1lUmVjb3JkZWQnKTtcclxuICAgIH1cclxuICB9LFxyXG4gIGdldEJhY2tncm91bmRBdWRpb01hbmFnZXI6IHtcclxuICAgIHJldHVyblZhbHVlIChmcm9tUmV0KSB7XHJcbiAgICAgIGZyb21SZXQub25QcmV2ID0gY3JlYXRlVG9kb01ldGhvZCgnQmFja2dyb3VuZEF1ZGlvTWFuYWdlcicsICdvblByZXYnKTtcclxuICAgICAgZnJvbVJldC5vbk5leHQgPSBjcmVhdGVUb2RvTWV0aG9kKCdCYWNrZ3JvdW5kQXVkaW9NYW5hZ2VyJywgJ29uTmV4dCcpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgc2NhbkNvZGU6IHtcclxuICAgIGFyZ3M6IHtcclxuICAgICAgb25seUZyb21DYW1lcmE6IGZhbHNlLFxyXG4gICAgICBzY2FuVHlwZTogZmFsc2VcclxuICAgIH1cclxuICB9LFxyXG4gIG5hdmlnYXRlVG9NaW5pUHJvZ3JhbToge1xyXG4gICAgbmFtZTogJ25hdmlnYXRlVG9TbWFydFByb2dyYW0nLFxyXG4gICAgYXJnczoge1xyXG4gICAgICBhcHBJZDogJ2FwcEtleScsXHJcbiAgICAgIGVudlZlcnNpb246IGZhbHNlXHJcbiAgICB9XHJcbiAgfSxcclxuICBuYXZpZ2F0ZUJhY2tNaW5pUHJvZ3JhbToge1xyXG4gICAgbmFtZTogJ25hdmlnYXRlQmFja1NtYXJ0UHJvZ3JhbSdcclxuICB9LFxyXG4gIHNob3dTaGFyZU1lbnU6IHtcclxuICAgIG5hbWU6ICdvcGVuU2hhcmUnXHJcbiAgfSxcclxuICBnZXRBY2NvdW50SW5mb1N5bmM6IHtcclxuICAgIG5hbWU6ICdnZXRFbnZJbmZvU3luYycsXHJcbiAgICByZXR1cm5WYWx1ZTogX2hhbmRsZUVudkluZm9cclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBDQUxMQkFDS1MgPSBbJ3N1Y2Nlc3MnLCAnZmFpbCcsICdjYW5jZWwnLCAnY29tcGxldGUnXTtcclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3NDYWxsYmFjayAobWV0aG9kTmFtZSwgbWV0aG9kLCByZXR1cm5WYWx1ZSkge1xyXG4gIHJldHVybiBmdW5jdGlvbiAocmVzKSB7XHJcbiAgICByZXR1cm4gbWV0aG9kKHByb2Nlc3NSZXR1cm5WYWx1ZShtZXRob2ROYW1lLCByZXMsIHJldHVyblZhbHVlKSlcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3NBcmdzIChtZXRob2ROYW1lLCBmcm9tQXJncywgYXJnc09wdGlvbiA9IHt9LCByZXR1cm5WYWx1ZSA9IHt9LCBrZWVwRnJvbUFyZ3MgPSBmYWxzZSkge1xyXG4gIGlmIChpc1BsYWluT2JqZWN0KGZyb21BcmdzKSkgeyAvLyDkuIDoiKwgYXBpIOeahOWPguaVsOino+aekFxyXG4gICAgY29uc3QgdG9BcmdzID0ga2VlcEZyb21BcmdzID09PSB0cnVlID8gZnJvbUFyZ3MgOiB7fTsgLy8gcmV0dXJuVmFsdWUg5Li6IGZhbHNlIOaXtu+8jOivtOaYjuaYr+agvOW8j+WMlui/lOWbnuWAvO+8jOebtOaOpeWcqOi/lOWbnuWAvOWvueixoeS4iuS/ruaUuei1i+WAvFxyXG4gICAgaWYgKGlzRm4oYXJnc09wdGlvbikpIHtcclxuICAgICAgYXJnc09wdGlvbiA9IGFyZ3NPcHRpb24oZnJvbUFyZ3MsIHRvQXJncykgfHwge307XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmcm9tQXJncykge1xyXG4gICAgICBpZiAoaGFzT3duKGFyZ3NPcHRpb24sIGtleSkpIHtcclxuICAgICAgICBsZXQga2V5T3B0aW9uID0gYXJnc09wdGlvbltrZXldO1xyXG4gICAgICAgIGlmIChpc0ZuKGtleU9wdGlvbikpIHtcclxuICAgICAgICAgIGtleU9wdGlvbiA9IGtleU9wdGlvbihmcm9tQXJnc1trZXldLCBmcm9tQXJncywgdG9BcmdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFrZXlPcHRpb24pIHsgLy8g5LiN5pSv5oyB55qE5Y+C5pWwXHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oYOeZvuW6puWwj+eoi+W6jyAke21ldGhvZE5hbWV95pqC5LiN5pSv5oyBJHtrZXl9YCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc1N0cihrZXlPcHRpb24pKSB7IC8vIOmHjeWGmeWPguaVsCBrZXlcclxuICAgICAgICAgIHRvQXJnc1trZXlPcHRpb25dID0gZnJvbUFyZ3Nba2V5XTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoa2V5T3B0aW9uKSkgeyAvLyB7bmFtZTpuZXdOYW1lLHZhbHVlOnZhbHVlfeWPr+mHjeaWsOaMh+WumuWPguaVsCBrZXk6dmFsdWVcclxuICAgICAgICAgIHRvQXJnc1trZXlPcHRpb24ubmFtZSA/IGtleU9wdGlvbi5uYW1lIDoga2V5XSA9IGtleU9wdGlvbi52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoQ0FMTEJBQ0tTLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcclxuICAgICAgICB0b0FyZ3Nba2V5XSA9IHByb2Nlc3NDYWxsYmFjayhtZXRob2ROYW1lLCBmcm9tQXJnc1trZXldLCByZXR1cm5WYWx1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKCFrZWVwRnJvbUFyZ3MpIHtcclxuICAgICAgICAgIHRvQXJnc1trZXldID0gZnJvbUFyZ3Nba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0b0FyZ3NcclxuICB9IGVsc2UgaWYgKGlzRm4oZnJvbUFyZ3MpKSB7XHJcbiAgICBmcm9tQXJncyA9IHByb2Nlc3NDYWxsYmFjayhtZXRob2ROYW1lLCBmcm9tQXJncywgcmV0dXJuVmFsdWUpO1xyXG4gIH1cclxuICByZXR1cm4gZnJvbUFyZ3NcclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc1JldHVyblZhbHVlIChtZXRob2ROYW1lLCByZXMsIHJldHVyblZhbHVlLCBrZWVwUmV0dXJuVmFsdWUgPSBmYWxzZSkge1xyXG4gIGlmIChpc0ZuKHByb3RvY29scy5yZXR1cm5WYWx1ZSkpIHsgLy8g5aSE55CG6YCa55SoIHJldHVyblZhbHVlXHJcbiAgICByZXMgPSBwcm90b2NvbHMucmV0dXJuVmFsdWUobWV0aG9kTmFtZSwgcmVzKTtcclxuICB9XHJcbiAgcmV0dXJuIHByb2Nlc3NBcmdzKG1ldGhvZE5hbWUsIHJlcywgcmV0dXJuVmFsdWUsIHt9LCBrZWVwUmV0dXJuVmFsdWUpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyYXBwZXIgKG1ldGhvZE5hbWUsIG1ldGhvZCkge1xyXG4gIGlmIChoYXNPd24ocHJvdG9jb2xzLCBtZXRob2ROYW1lKSkge1xyXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwcm90b2NvbHNbbWV0aG9kTmFtZV07XHJcbiAgICBpZiAoIXByb3RvY29sKSB7IC8vIOaaguS4jeaUr+aMgeeahCBhcGlcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGDnmb7luqblsI/nqIvluo8g5pqC5LiN5pSv5oyBJHttZXRob2ROYW1lfWApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZzEsIGFyZzIpIHsgLy8g55uu5YmNIGFwaSDmnIDlpJrkuKTkuKrlj4LmlbBcclxuICAgICAgbGV0IG9wdGlvbnMgPSBwcm90b2NvbDtcclxuICAgICAgaWYgKGlzRm4ocHJvdG9jb2wpKSB7XHJcbiAgICAgICAgb3B0aW9ucyA9IHByb3RvY29sKGFyZzEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhcmcxID0gcHJvY2Vzc0FyZ3MobWV0aG9kTmFtZSwgYXJnMSwgb3B0aW9ucy5hcmdzLCBvcHRpb25zLnJldHVyblZhbHVlKTtcclxuXHJcbiAgICAgIGNvbnN0IGFyZ3MgPSBbYXJnMV07XHJcbiAgICAgIGlmICh0eXBlb2YgYXJnMiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBhcmdzLnB1c2goYXJnMik7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcmV0dXJuVmFsdWUgPSBzd2FuW29wdGlvbnMubmFtZSB8fCBtZXRob2ROYW1lXS5hcHBseShzd2FuLCBhcmdzKTtcclxuICAgICAgaWYgKGlzU3luY0FwaShtZXRob2ROYW1lKSkgeyAvLyDlkIzmraUgYXBpXHJcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NSZXR1cm5WYWx1ZShtZXRob2ROYW1lLCByZXR1cm5WYWx1ZSwgb3B0aW9ucy5yZXR1cm5WYWx1ZSwgaXNDb250ZXh0QXBpKG1ldGhvZE5hbWUpKVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbWV0aG9kXHJcbn1cclxuXHJcbmNvbnN0IHRvZG9BcGlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuXHJcbmNvbnN0IFRPRE9TID0gW1xyXG4gICdvblRhYkJhck1pZEJ1dHRvblRhcCcsXHJcbiAgJ3N1YnNjcmliZVB1c2gnLFxyXG4gICd1bnN1YnNjcmliZVB1c2gnLFxyXG4gICdvblB1c2gnLFxyXG4gICdvZmZQdXNoJyxcclxuICAnc2hhcmUnXHJcbl07XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVUb2RvQXBpIChuYW1lKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvZG9BcGkgKHtcclxuICAgIGZhaWwsXHJcbiAgICBjb21wbGV0ZVxyXG4gIH0pIHtcclxuICAgIGNvbnN0IHJlcyA9IHtcclxuICAgICAgZXJyTXNnOiBgJHtuYW1lfTpmYWlsOuaaguS4jeaUr+aMgSAke25hbWV9IOaWueazlWBcclxuICAgIH07XHJcbiAgICBpc0ZuKGZhaWwpICYmIGZhaWwocmVzKTtcclxuICAgIGlzRm4oY29tcGxldGUpICYmIGNvbXBsZXRlKHJlcyk7XHJcbiAgfVxyXG59XHJcblxyXG5UT0RPUy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgdG9kb0FwaXNbbmFtZV0gPSBjcmVhdGVUb2RvQXBpKG5hbWUpO1xyXG59KTtcclxuXHJcbnZhciBwcm92aWRlcnMgPSB7XHJcbiAgb2F1dGg6IFsnYmFpZHUnXSxcclxuICBzaGFyZTogWydiYWlkdSddLFxyXG4gIHBheW1lbnQ6IFsnYmFpZHUnXSxcclxuICBwdXNoOiBbJ2JhaWR1J11cclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldFByb3ZpZGVyICh7XHJcbiAgc2VydmljZSxcclxuICBzdWNjZXNzLFxyXG4gIGZhaWwsXHJcbiAgY29tcGxldGVcclxufSkge1xyXG4gIGxldCByZXMgPSBmYWxzZTtcclxuICBpZiAocHJvdmlkZXJzW3NlcnZpY2VdKSB7XHJcbiAgICByZXMgPSB7XHJcbiAgICAgIGVyck1zZzogJ2dldFByb3ZpZGVyOm9rJyxcclxuICAgICAgc2VydmljZSxcclxuICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyc1tzZXJ2aWNlXVxyXG4gICAgfTtcclxuICAgIGlzRm4oc3VjY2VzcykgJiYgc3VjY2VzcyhyZXMpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXMgPSB7XHJcbiAgICAgIGVyck1zZzogJ2dldFByb3ZpZGVyOmZhaWw65pyN5YqhWycgKyBzZXJ2aWNlICsgJ13kuI3lrZjlnKgnXHJcbiAgICB9O1xyXG4gICAgaXNGbihmYWlsKSAmJiBmYWlsKHJlcyk7XHJcbiAgfVxyXG4gIGlzRm4oY29tcGxldGUpICYmIGNvbXBsZXRlKHJlcyk7XHJcbn1cclxuXHJcbnZhciBleHRyYUFwaSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcclxuICBfX3Byb3RvX186IG51bGwsXHJcbiAgZ2V0UHJvdmlkZXI6IGdldFByb3ZpZGVyXHJcbn0pO1xyXG5cclxuY29uc3QgZ2V0RW1pdHRlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHR5cGVvZiBnZXRVbmlFbWl0dGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xyXG4gICAgcmV0dXJuIGdldFVuaUVtaXR0ZXJcclxuICB9XHJcbiAgbGV0IEVtaXR0ZXI7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFVuaUVtaXR0ZXIgKCkge1xyXG4gICAgaWYgKCFFbWl0dGVyKSB7XHJcbiAgICAgIEVtaXR0ZXIgPSBuZXcgVnVlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRW1pdHRlclxyXG4gIH1cclxufSkoKTtcclxuXHJcbmZ1bmN0aW9uIGFwcGx5IChjdHgsIG1ldGhvZCwgYXJncykge1xyXG4gIHJldHVybiBjdHhbbWV0aG9kXS5hcHBseShjdHgsIGFyZ3MpXHJcbn1cclxuXHJcbmZ1bmN0aW9uICRvbiAoKSB7XHJcbiAgcmV0dXJuIGFwcGx5KGdldEVtaXR0ZXIoKSwgJyRvbicsIFsuLi5hcmd1bWVudHNdKVxyXG59XHJcbmZ1bmN0aW9uICRvZmYgKCkge1xyXG4gIHJldHVybiBhcHBseShnZXRFbWl0dGVyKCksICckb2ZmJywgWy4uLmFyZ3VtZW50c10pXHJcbn1cclxuZnVuY3Rpb24gJG9uY2UgKCkge1xyXG4gIHJldHVybiBhcHBseShnZXRFbWl0dGVyKCksICckb25jZScsIFsuLi5hcmd1bWVudHNdKVxyXG59XHJcbmZ1bmN0aW9uICRlbWl0ICgpIHtcclxuICByZXR1cm4gYXBwbHkoZ2V0RW1pdHRlcigpLCAnJGVtaXQnLCBbLi4uYXJndW1lbnRzXSlcclxufVxyXG5cclxudmFyIGV2ZW50QXBpID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xyXG4gIF9fcHJvdG9fXzogbnVsbCxcclxuICAkb246ICRvbixcclxuICAkb2ZmOiAkb2ZmLFxyXG4gICRvbmNlOiAkb25jZSxcclxuICAkZW1pdDogJGVtaXRcclxufSk7XHJcblxyXG5mdW5jdGlvbiByZXF1ZXN0UGF5bWVudCAocGFyYW1zKSB7XHJcbiAgbGV0IHBhcnNlRXJyb3IgPSBmYWxzZTtcclxuICBpZiAodHlwZW9mIHBhcmFtcy5vcmRlckluZm8gPT09ICdzdHJpbmcnKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBwYXJhbXMub3JkZXJJbmZvID0gSlNPTi5wYXJzZShwYXJhbXMub3JkZXJJbmZvKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgcGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChwYXJzZUVycm9yKSB7XHJcbiAgICBwYXJhbXMuZmFpbCAmJiBwYXJhbXMuZmFpbCh7XHJcbiAgICAgIGVyck1zZzogJ3JlcXVlc3RQYXltZW50OmZhaWw6IOWPguaVsCBvcmRlckluZm8g5pWw5o2u57uT5p6E5LiN5q2j56Gu77yM5Y+C6ICD77yaaHR0cHM6Ly91bmlhcHAuZGNsb3VkLmlvL2FwaS9wbHVnaW5zL3BheW1lbnQ/aWQ9b3JkZXJpbmZvJ1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHN3YW4ucmVxdWVzdFBvbHltZXJQYXltZW50KHBhcmFtcyk7XHJcbiAgfVxyXG59XHJcblxyXG52YXIgYXBpID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xyXG4gIF9fcHJvdG9fXzogbnVsbCxcclxuICByZXF1ZXN0UGF5bWVudDogcmVxdWVzdFBheW1lbnRcclxufSk7XHJcblxyXG5jb25zdCBNUFBhZ2UgPSBQYWdlO1xyXG5jb25zdCBNUENvbXBvbmVudCA9IENvbXBvbmVudDtcclxuXHJcbmNvbnN0IGN1c3RvbWl6ZVJFID0gLzovZztcclxuXHJcbmNvbnN0IGN1c3RvbWl6ZSA9IGNhY2hlZCgoc3RyKSA9PiB7XHJcbiAgcmV0dXJuIGNhbWVsaXplKHN0ci5yZXBsYWNlKGN1c3RvbWl6ZVJFLCAnLScpKVxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGluaXRUcmlnZ2VyRXZlbnQgKG1wSW5zdGFuY2UpIHtcclxuICBjb25zdCBvbGRUcmlnZ2VyRXZlbnQgPSBtcEluc3RhbmNlLnRyaWdnZXJFdmVudDtcclxuICBtcEluc3RhbmNlLnRyaWdnZXJFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgLi4uYXJncykge1xyXG4gICAgcmV0dXJuIG9sZFRyaWdnZXJFdmVudC5hcHBseShtcEluc3RhbmNlLCBbY3VzdG9taXplKGV2ZW50KSwgLi4uYXJnc10pXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdEhvb2sgKG5hbWUsIG9wdGlvbnMpIHtcclxuICBjb25zdCBvbGRIb29rID0gb3B0aW9uc1tuYW1lXTtcclxuICBpZiAoIW9sZEhvb2spIHtcclxuICAgIG9wdGlvbnNbbmFtZV0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGluaXRUcmlnZ2VyRXZlbnQodGhpcyk7XHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBvcHRpb25zW25hbWVdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgaW5pdFRyaWdnZXJFdmVudCh0aGlzKTtcclxuICAgICAgcmV0dXJuIG9sZEhvb2suYXBwbHkodGhpcywgYXJncylcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5QYWdlID0gZnVuY3Rpb24gKG9wdGlvbnMgPSB7fSkge1xyXG4gIGluaXRIb29rKCdvbkxvYWQnLCBvcHRpb25zKTtcclxuICByZXR1cm4gTVBQYWdlKG9wdGlvbnMpXHJcbn07XHJcblxyXG5Db21wb25lbnQgPSBmdW5jdGlvbiAob3B0aW9ucyA9IHt9KSB7XHJcbiAgaW5pdEhvb2soJ2NyZWF0ZWQnLCBvcHRpb25zKTtcclxuICByZXR1cm4gTVBDb21wb25lbnQob3B0aW9ucylcclxufTtcclxuXHJcbmNvbnN0IFBBR0VfRVZFTlRfSE9PS1MgPSBbXHJcbiAgJ29uUHVsbERvd25SZWZyZXNoJyxcclxuICAnb25SZWFjaEJvdHRvbScsXHJcbiAgJ29uU2hhcmVBcHBNZXNzYWdlJyxcclxuICAnb25QYWdlU2Nyb2xsJyxcclxuICAnb25SZXNpemUnLFxyXG4gICdvblRhYkl0ZW1UYXAnXHJcbl07XHJcblxyXG5mdW5jdGlvbiBpbml0TW9ja3MgKHZtLCBtb2Nrcykge1xyXG4gIGNvbnN0IG1wSW5zdGFuY2UgPSB2bS4kbXBbdm0ubXBUeXBlXTtcclxuICBtb2Nrcy5mb3JFYWNoKG1vY2sgPT4ge1xyXG4gICAgaWYgKGhhc093bihtcEluc3RhbmNlLCBtb2NrKSkge1xyXG4gICAgICB2bVttb2NrXSA9IG1wSW5zdGFuY2VbbW9ja107XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhc0hvb2sgKGhvb2ssIHZ1ZU9wdGlvbnMpIHtcclxuICBpZiAoIXZ1ZU9wdGlvbnMpIHtcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG5cclxuICBpZiAoVnVlLm9wdGlvbnMgJiYgQXJyYXkuaXNBcnJheShWdWUub3B0aW9uc1tob29rXSkpIHtcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG5cclxuICB2dWVPcHRpb25zID0gdnVlT3B0aW9ucy5kZWZhdWx0IHx8IHZ1ZU9wdGlvbnM7XHJcblxyXG4gIGlmIChpc0ZuKHZ1ZU9wdGlvbnMpKSB7XHJcbiAgICBpZiAoaXNGbih2dWVPcHRpb25zLmV4dGVuZE9wdGlvbnNbaG9va10pKSB7XHJcbiAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcbiAgICBpZiAodnVlT3B0aW9ucy5zdXBlciAmJlxyXG4gICAgICB2dWVPcHRpb25zLnN1cGVyLm9wdGlvbnMgJiZcclxuICAgICAgQXJyYXkuaXNBcnJheSh2dWVPcHRpb25zLnN1cGVyLm9wdGlvbnNbaG9va10pKSB7XHJcbiAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIGlmIChpc0ZuKHZ1ZU9wdGlvbnNbaG9va10pKSB7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuICBjb25zdCBtaXhpbnMgPSB2dWVPcHRpb25zLm1peGlucztcclxuICBpZiAoQXJyYXkuaXNBcnJheShtaXhpbnMpKSB7XHJcbiAgICByZXR1cm4gISFtaXhpbnMuZmluZChtaXhpbiA9PiBoYXNIb29rKGhvb2ssIG1peGluKSlcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRIb29rcyAobXBPcHRpb25zLCBob29rcywgdnVlT3B0aW9ucykge1xyXG4gIGhvb2tzLmZvckVhY2goaG9vayA9PiB7XHJcbiAgICBpZiAoaGFzSG9vayhob29rLCB2dWVPcHRpb25zKSkge1xyXG4gICAgICBtcE9wdGlvbnNbaG9va10gPSBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiR2bSAmJiB0aGlzLiR2bS5fX2NhbGxfaG9vayhob29rLCBhcmdzKVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0VnVlQ29tcG9uZW50IChWdWUsIHZ1ZU9wdGlvbnMpIHtcclxuICB2dWVPcHRpb25zID0gdnVlT3B0aW9ucy5kZWZhdWx0IHx8IHZ1ZU9wdGlvbnM7XHJcbiAgbGV0IFZ1ZUNvbXBvbmVudDtcclxuICBpZiAoaXNGbih2dWVPcHRpb25zKSkge1xyXG4gICAgVnVlQ29tcG9uZW50ID0gdnVlT3B0aW9ucztcclxuICAgIHZ1ZU9wdGlvbnMgPSBWdWVDb21wb25lbnQuZXh0ZW5kT3B0aW9ucztcclxuICB9IGVsc2Uge1xyXG4gICAgVnVlQ29tcG9uZW50ID0gVnVlLmV4dGVuZCh2dWVPcHRpb25zKTtcclxuICB9XHJcbiAgcmV0dXJuIFtWdWVDb21wb25lbnQsIHZ1ZU9wdGlvbnNdXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRTbG90cyAodm0sIHZ1ZVNsb3RzKSB7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodnVlU2xvdHMpICYmIHZ1ZVNsb3RzLmxlbmd0aCkge1xyXG4gICAgY29uc3QgJHNsb3RzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHZ1ZVNsb3RzLmZvckVhY2goc2xvdE5hbWUgPT4ge1xyXG4gICAgICAkc2xvdHNbc2xvdE5hbWVdID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gICAgdm0uJHNjb3BlZFNsb3RzID0gdm0uJHNsb3RzID0gJHNsb3RzO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFZ1ZUlkcyAodnVlSWRzLCBtcEluc3RhbmNlKSB7XHJcbiAgdnVlSWRzID0gKHZ1ZUlkcyB8fCAnJykuc3BsaXQoJywnKTtcclxuICBjb25zdCBsZW4gPSB2dWVJZHMubGVuZ3RoO1xyXG5cclxuICBpZiAobGVuID09PSAxKSB7XHJcbiAgICBtcEluc3RhbmNlLl8kdnVlSWQgPSB2dWVJZHNbMF07XHJcbiAgfSBlbHNlIGlmIChsZW4gPT09IDIpIHtcclxuICAgIG1wSW5zdGFuY2UuXyR2dWVJZCA9IHZ1ZUlkc1swXTtcclxuICAgIG1wSW5zdGFuY2UuXyR2dWVQaWQgPSB2dWVJZHNbMV07XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0RGF0YSAodnVlT3B0aW9ucywgY29udGV4dCkge1xyXG4gIGxldCBkYXRhID0gdnVlT3B0aW9ucy5kYXRhIHx8IHt9O1xyXG4gIGNvbnN0IG1ldGhvZHMgPSB2dWVPcHRpb25zLm1ldGhvZHMgfHwge307XHJcblxyXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgZGF0YSA9IGRhdGEuY2FsbChjb250ZXh0KTsgLy8g5pSv5oyBIFZ1ZS5wcm90b3R5cGUg5LiK5oyC55qE5pWw5o2uXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGlmIChwcm9jZXNzLmVudi5WVUVfQVBQX0RFQlVHKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCfmoLnmja4gVnVlIOeahCBkYXRhIOWHveaVsOWIneWni+WMluWwj+eoi+W6jyBkYXRhIOWksei0pe+8jOivt+WwvemHj+ehruS/nSBkYXRhIOWHveaVsOS4reS4jeiuv+mXriB2bSDlr7nosaHvvIzlkKbliJnlj6/og73lvbHlk43pppbmrKHmlbDmja7muLLmn5PpgJ/luqbjgIInLCBkYXRhKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyDlr7kgZGF0YSDmoLzlvI/ljJZcclxuICAgICAgZGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xyXG4gICAgfSBjYXRjaCAoZSkge31cclxuICB9XHJcblxyXG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xyXG4gICAgZGF0YSA9IHt9O1xyXG4gIH1cclxuXHJcbiAgT2JqZWN0LmtleXMobWV0aG9kcykuZm9yRWFjaChtZXRob2ROYW1lID0+IHtcclxuICAgIGlmIChjb250ZXh0Ll9fbGlmZWN5Y2xlX2hvb2tzX18uaW5kZXhPZihtZXRob2ROYW1lKSA9PT0gLTEgJiYgIWhhc093bihkYXRhLCBtZXRob2ROYW1lKSkge1xyXG4gICAgICBkYXRhW21ldGhvZE5hbWVdID0gbWV0aG9kc1ttZXRob2ROYW1lXTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGRhdGFcclxufVxyXG5cclxuY29uc3QgUFJPUF9UWVBFUyA9IFtTdHJpbmcsIE51bWJlciwgQm9vbGVhbiwgT2JqZWN0LCBBcnJheSwgbnVsbF07XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZlciAobmFtZSkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBvYnNlcnZlciAobmV3VmFsLCBvbGRWYWwpIHtcclxuICAgIGlmICh0aGlzLiR2bSkge1xyXG4gICAgICB0aGlzLiR2bVtuYW1lXSA9IG5ld1ZhbDsgLy8g5Li65LqG6Kem5Y+R5YW25LuW6Z2eIHJlbmRlciB3YXRjaGVyXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0QmVoYXZpb3JzICh2dWVPcHRpb25zLCBpbml0QmVoYXZpb3IpIHtcclxuICBjb25zdCB2dWVCZWhhdmlvcnMgPSB2dWVPcHRpb25zLmJlaGF2aW9ycztcclxuICBjb25zdCB2dWVFeHRlbmRzID0gdnVlT3B0aW9ucy5leHRlbmRzO1xyXG4gIGNvbnN0IHZ1ZU1peGlucyA9IHZ1ZU9wdGlvbnMubWl4aW5zO1xyXG5cclxuICBsZXQgdnVlUHJvcHMgPSB2dWVPcHRpb25zLnByb3BzO1xyXG5cclxuICBpZiAoIXZ1ZVByb3BzKSB7XHJcbiAgICB2dWVPcHRpb25zLnByb3BzID0gdnVlUHJvcHMgPSBbXTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGJlaGF2aW9ycyA9IFtdO1xyXG4gIGlmIChBcnJheS5pc0FycmF5KHZ1ZUJlaGF2aW9ycykpIHtcclxuICAgIHZ1ZUJlaGF2aW9ycy5mb3JFYWNoKGJlaGF2aW9yID0+IHtcclxuICAgICAgYmVoYXZpb3JzLnB1c2goYmVoYXZpb3IucmVwbGFjZSgndW5pOi8vJywgYCR7XCJzd2FuXCJ9Oi8vYCkpO1xyXG4gICAgICBpZiAoYmVoYXZpb3IgPT09ICd1bmk6Ly9mb3JtLWZpZWxkJykge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZ1ZVByb3BzKSkge1xyXG4gICAgICAgICAgdnVlUHJvcHMucHVzaCgnbmFtZScpO1xyXG4gICAgICAgICAgdnVlUHJvcHMucHVzaCgndmFsdWUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdnVlUHJvcHMubmFtZSA9IHtcclxuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHZ1ZVByb3BzLnZhbHVlID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW4sIEFycmF5LCBPYmplY3QsIERhdGVdLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBpZiAoaXNQbGFpbk9iamVjdCh2dWVFeHRlbmRzKSAmJiB2dWVFeHRlbmRzLnByb3BzKSB7XHJcbiAgICBiZWhhdmlvcnMucHVzaChcclxuICAgICAgaW5pdEJlaGF2aW9yKHtcclxuICAgICAgICBwcm9wZXJ0aWVzOiBpbml0UHJvcGVydGllcyh2dWVFeHRlbmRzLnByb3BzLCB0cnVlKVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodnVlTWl4aW5zKSkge1xyXG4gICAgdnVlTWl4aW5zLmZvckVhY2godnVlTWl4aW4gPT4ge1xyXG4gICAgICBpZiAoaXNQbGFpbk9iamVjdCh2dWVNaXhpbikgJiYgdnVlTWl4aW4ucHJvcHMpIHtcclxuICAgICAgICBiZWhhdmlvcnMucHVzaChcclxuICAgICAgICAgIGluaXRCZWhhdmlvcih7XHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IGluaXRQcm9wZXJ0aWVzKHZ1ZU1peGluLnByb3BzLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgcmV0dXJuIGJlaGF2aW9yc1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZVByb3BUeXBlIChrZXksIHR5cGUsIGRlZmF1bHRWYWx1ZSwgZmlsZSkge1xyXG4gIC8vIFtTdHJpbmddPT5TdHJpbmdcclxuICBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSAmJiB0eXBlLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgcmV0dXJuIHR5cGVbMF1cclxuICB9XHJcbiAge1xyXG4gICAgaWYgKFxyXG4gICAgICBkZWZhdWx0VmFsdWUgPT09IGZhbHNlICYmXHJcbiAgICAgIEFycmF5LmlzQXJyYXkodHlwZSkgJiZcclxuICAgICAgdHlwZS5sZW5ndGggPT09IDIgJiZcclxuICAgICAgdHlwZS5pbmRleE9mKFN0cmluZykgIT09IC0xICYmXHJcbiAgICAgIHR5cGUuaW5kZXhPZihCb29sZWFuKSAhPT0gLTFcclxuICAgICkgeyAvLyBbU3RyaW5nLEJvb2xlYW5dPT5Cb29sZWFuXHJcbiAgICAgIGlmIChmaWxlKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgYHByb3BzLiR7a2V5fS50eXBlIHNob3VsZCB1c2UgQm9vbGVhbiBpbnN0ZWFkIG9mIFtTdHJpbmcsQm9vbGVhbl0gYXQgJHtmaWxlfWBcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBCb29sZWFuXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0eXBlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRQcm9wZXJ0aWVzIChwcm9wcywgaXNCZWhhdmlvciA9IGZhbHNlLCBmaWxlID0gJycpIHtcclxuICBjb25zdCBwcm9wZXJ0aWVzID0ge307XHJcbiAgaWYgKCFpc0JlaGF2aW9yKSB7XHJcbiAgICBwcm9wZXJ0aWVzLnZ1ZUlkID0ge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIHZhbHVlOiAnJ1xyXG4gICAgfTtcclxuICAgIHByb3BlcnRpZXMudnVlU2xvdHMgPSB7IC8vIOWwj+eoi+W6j+S4jeiDveebtOaOpeWumuS5iSAkc2xvdHMg55qEIHByb3Bz77yM5omA5Lul6YCa6L+HIHZ1ZVNsb3RzIOi9rOaNouWIsCAkc2xvdHNcclxuICAgICAgdHlwZTogbnVsbCxcclxuICAgICAgdmFsdWU6IFtdLFxyXG4gICAgICBvYnNlcnZlcjogZnVuY3Rpb24gKG5ld1ZhbCwgb2xkVmFsKSB7XHJcbiAgICAgICAgY29uc3QgJHNsb3RzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICBuZXdWYWwuZm9yRWFjaChzbG90TmFtZSA9PiB7XHJcbiAgICAgICAgICAkc2xvdHNbc2xvdE5hbWVdID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgJHNsb3RzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkgeyAvLyBbJ3RpdGxlJ11cclxuICAgIHByb3BzLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgcHJvcGVydGllc1trZXldID0ge1xyXG4gICAgICAgIHR5cGU6IG51bGwsXHJcbiAgICAgICAgb2JzZXJ2ZXI6IGNyZWF0ZU9ic2VydmVyKGtleSlcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHsgLy8ge3RpdGxlOnt0eXBlOlN0cmluZyxkZWZhdWx0OicnfSxjb250ZW50OlN0cmluZ31cclxuICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgIGNvbnN0IG9wdHMgPSBwcm9wc1trZXldO1xyXG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChvcHRzKSkgeyAvLyB0aXRsZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDonJ31cclxuICAgICAgICBsZXQgdmFsdWUgPSBvcHRzLmRlZmF1bHQ7XHJcbiAgICAgICAgaWYgKGlzRm4odmFsdWUpKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRzLnR5cGUgPSBwYXJzZVByb3BUeXBlKGtleSwgb3B0cy50eXBlLCB2YWx1ZSwgZmlsZSk7XHJcblxyXG4gICAgICAgIHByb3BlcnRpZXNba2V5XSA9IHtcclxuICAgICAgICAgIHR5cGU6IFBST1BfVFlQRVMuaW5kZXhPZihvcHRzLnR5cGUpICE9PSAtMSA/IG9wdHMudHlwZSA6IG51bGwsXHJcbiAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgIG9ic2VydmVyOiBjcmVhdGVPYnNlcnZlcihrZXkpXHJcbiAgICAgICAgfTtcclxuICAgICAgfSBlbHNlIHsgLy8gY29udGVudDpTdHJpbmdcclxuICAgICAgICBjb25zdCB0eXBlID0gcGFyc2VQcm9wVHlwZShrZXksIG9wdHMsIG51bGwsIGZpbGUpO1xyXG4gICAgICAgIHByb3BlcnRpZXNba2V5XSA9IHtcclxuICAgICAgICAgIHR5cGU6IFBST1BfVFlQRVMuaW5kZXhPZih0eXBlKSAhPT0gLTEgPyB0eXBlIDogbnVsbCxcclxuICAgICAgICAgIG9ic2VydmVyOiBjcmVhdGVPYnNlcnZlcihrZXkpXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHJldHVybiBwcm9wZXJ0aWVzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyYXBwZXIkMSAoZXZlbnQpIHtcclxuICAvLyBUT0RPIOWPiOW+l+WFvOWuuSBtcHZ1ZSDnmoQgbXAg5a+56LGhXHJcbiAgdHJ5IHtcclxuICAgIGV2ZW50Lm1wID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShldmVudCkpO1xyXG4gIH0gY2F0Y2ggKGUpIHt9XHJcblxyXG4gIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IG5vb3A7XHJcbiAgZXZlbnQucHJldmVudERlZmF1bHQgPSBub29wO1xyXG5cclxuICBldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQgfHwge307XHJcblxyXG4gIGlmICghaGFzT3duKGV2ZW50LCAnZGV0YWlsJykpIHtcclxuICAgIGV2ZW50LmRldGFpbCA9IHt9O1xyXG4gIH1cclxuXHJcbiAgaWYgKGhhc093bihldmVudCwgJ21hcmtlcklkJykpIHtcclxuICAgIGV2ZW50LmRldGFpbCA9IHR5cGVvZiBldmVudC5kZXRhaWwgPT09ICdvYmplY3QnID8gZXZlbnQuZGV0YWlsIDoge307XHJcbiAgICBldmVudC5kZXRhaWwubWFya2VySWQgPSBldmVudC5tYXJrZXJJZDtcclxuICB9XHJcblxyXG4gIHsgLy8gbXAtYmFpZHXvvIxjaGVja2VkPT52YWx1ZVxyXG4gICAgaWYgKFxyXG4gICAgICBpc1BsYWluT2JqZWN0KGV2ZW50LmRldGFpbCkgJiZcclxuICAgICAgaGFzT3duKGV2ZW50LmRldGFpbCwgJ2NoZWNrZWQnKSAmJlxyXG4gICAgICAhaGFzT3duKGV2ZW50LmRldGFpbCwgJ3ZhbHVlJylcclxuICAgICkge1xyXG4gICAgICBldmVudC5kZXRhaWwudmFsdWUgPSBldmVudC5kZXRhaWwuY2hlY2tlZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChpc1BsYWluT2JqZWN0KGV2ZW50LmRldGFpbCkpIHtcclxuICAgIGV2ZW50LnRhcmdldCA9IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50LnRhcmdldCwgZXZlbnQuZGV0YWlsKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBldmVudFxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRFeHRyYVZhbHVlICh2bSwgZGF0YVBhdGhzQXJyYXkpIHtcclxuICBsZXQgY29udGV4dCA9IHZtO1xyXG4gIGRhdGFQYXRoc0FycmF5LmZvckVhY2goZGF0YVBhdGhBcnJheSA9PiB7XHJcbiAgICBjb25zdCBkYXRhUGF0aCA9IGRhdGFQYXRoQXJyYXlbMF07XHJcbiAgICBjb25zdCB2YWx1ZSA9IGRhdGFQYXRoQXJyYXlbMl07XHJcbiAgICBpZiAoZGF0YVBhdGggfHwgdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykgeyAvLyBbJycsJycsaW5kZXgsJ2Rpc2FibGUnXVxyXG4gICAgICBjb25zdCBwcm9wUGF0aCA9IGRhdGFQYXRoQXJyYXlbMV07XHJcbiAgICAgIGNvbnN0IHZhbHVlUGF0aCA9IGRhdGFQYXRoQXJyYXlbM107XHJcblxyXG4gICAgICBjb25zdCB2Rm9yID0gZGF0YVBhdGggPyB2bS5fX2dldF92YWx1ZShkYXRhUGF0aCwgY29udGV4dCkgOiBjb250ZXh0O1xyXG5cclxuICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIodkZvcikpIHtcclxuICAgICAgICBjb250ZXh0ID0gdmFsdWU7XHJcbiAgICAgIH0gZWxzZSBpZiAoIXByb3BQYXRoKSB7XHJcbiAgICAgICAgY29udGV4dCA9IHZGb3JbdmFsdWVdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZGb3IpKSB7XHJcbiAgICAgICAgICBjb250ZXh0ID0gdkZvci5maW5kKHZGb3JJdGVtID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLl9fZ2V0X3ZhbHVlKHByb3BQYXRoLCB2Rm9ySXRlbSkgPT09IHZhbHVlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodkZvcikpIHtcclxuICAgICAgICAgIGNvbnRleHQgPSBPYmplY3Qua2V5cyh2Rm9yKS5maW5kKHZGb3JLZXkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uX19nZXRfdmFsdWUocHJvcFBhdGgsIHZGb3JbdkZvcktleV0pID09PSB2YWx1ZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3YtZm9yIOaaguS4jeaUr+aMgeW+queOr+aVsOaNru+8micsIHZGb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHZhbHVlUGF0aCkge1xyXG4gICAgICAgIGNvbnRleHQgPSB2bS5fX2dldF92YWx1ZSh2YWx1ZVBhdGgsIGNvbnRleHQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIGNvbnRleHRcclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0V2ZW50RXh0cmEgKHZtLCBleHRyYSwgZXZlbnQpIHtcclxuICBjb25zdCBleHRyYU9iaiA9IHt9O1xyXG5cclxuICBpZiAoQXJyYXkuaXNBcnJheShleHRyYSkgJiYgZXh0cmEubGVuZ3RoKSB7XHJcbiAgICAvKipcclxuICAgICAqW1xyXG4gICAgICogICAgWydkYXRhLml0ZW1zJywgJ2RhdGEuaWQnLCBpdGVtLmRhdGEuaWRdLFxyXG4gICAgICogICAgWydtZXRhcycsICdpZCcsIG1ldGEuaWRdXHJcbiAgICAgKl0sXHJcbiAgICAgKltcclxuICAgICAqICAgIFsnZGF0YS5pdGVtcycsICdkYXRhLmlkJywgaXRlbS5kYXRhLmlkXSxcclxuICAgICAqICAgIFsnbWV0YXMnLCAnaWQnLCBtZXRhLmlkXVxyXG4gICAgICpdLFxyXG4gICAgICondGVzdCdcclxuICAgICAqL1xyXG4gICAgZXh0cmEuZm9yRWFjaCgoZGF0YVBhdGgsIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmICh0eXBlb2YgZGF0YVBhdGggPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgaWYgKCFkYXRhUGF0aCkgeyAvLyBtb2RlbCxwcm9wLnN5bmNcclxuICAgICAgICAgIGV4dHJhT2JqWyckJyArIGluZGV4XSA9IHZtO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoZGF0YVBhdGggPT09ICckZXZlbnQnKSB7IC8vICRldmVudFxyXG4gICAgICAgICAgICBleHRyYU9ialsnJCcgKyBpbmRleF0gPSBldmVudDtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVBhdGguaW5kZXhPZignJGV2ZW50LicpID09PSAwKSB7IC8vICRldmVudC50YXJnZXQudmFsdWVcclxuICAgICAgICAgICAgZXh0cmFPYmpbJyQnICsgaW5kZXhdID0gdm0uX19nZXRfdmFsdWUoZGF0YVBhdGgucmVwbGFjZSgnJGV2ZW50LicsICcnKSwgZXZlbnQpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZXh0cmFPYmpbJyQnICsgaW5kZXhdID0gdm0uX19nZXRfdmFsdWUoZGF0YVBhdGgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBleHRyYU9ialsnJCcgKyBpbmRleF0gPSBnZXRFeHRyYVZhbHVlKHZtLCBkYXRhUGF0aCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGV4dHJhT2JqXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE9iakJ5QXJyYXkgKGFycikge1xyXG4gIGNvbnN0IG9iaiA9IHt9O1xyXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyW2ldO1xyXG4gICAgb2JqW2VsZW1lbnRbMF1dID0gZWxlbWVudFsxXTtcclxuICB9XHJcbiAgcmV0dXJuIG9ialxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzRXZlbnRBcmdzICh2bSwgZXZlbnQsIGFyZ3MgPSBbXSwgZXh0cmEgPSBbXSwgaXNDdXN0b20sIG1ldGhvZE5hbWUpIHtcclxuICBsZXQgaXNDdXN0b21NUEV2ZW50ID0gZmFsc2U7IC8vIHd4Y29tcG9uZW50IOe7hOS7tu+8jOS8oOmAkuWOn+WniyBldmVudCDlr7nosaFcclxuICBpZiAoaXNDdXN0b20pIHsgLy8g6Ieq5a6a5LmJ5LqL5Lu2XHJcbiAgICBpc0N1c3RvbU1QRXZlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0ICYmXHJcbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldCAmJlxyXG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY29tVHlwZSA9PT0gJ3d4JztcclxuICAgIGlmICghYXJncy5sZW5ndGgpIHsgLy8g5peg5Y+C5pWw77yM55u05o6l5Lyg5YWlIGV2ZW50IOaIliBkZXRhaWwg5pWw57uEXHJcbiAgICAgIGlmIChpc0N1c3RvbU1QRXZlbnQpIHtcclxuICAgICAgICByZXR1cm4gW2V2ZW50XVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBldmVudC5kZXRhaWwuX19hcmdzX18gfHwgZXZlbnQuZGV0YWlsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBleHRyYU9iaiA9IHByb2Nlc3NFdmVudEV4dHJhKHZtLCBleHRyYSwgZXZlbnQpO1xyXG5cclxuICBjb25zdCByZXQgPSBbXTtcclxuICBhcmdzLmZvckVhY2goYXJnID0+IHtcclxuICAgIGlmIChhcmcgPT09ICckZXZlbnQnKSB7XHJcbiAgICAgIGlmIChtZXRob2ROYW1lID09PSAnX19zZXRfbW9kZWwnICYmICFpc0N1c3RvbSkgeyAvLyBpbnB1dCB2LW1vZGVsIHZhbHVlXHJcbiAgICAgICAgcmV0LnB1c2goZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoaXNDdXN0b20gJiYgIWlzQ3VzdG9tTVBFdmVudCkge1xyXG4gICAgICAgICAgcmV0LnB1c2goZXZlbnQuZGV0YWlsLl9fYXJnc19fWzBdKTtcclxuICAgICAgICB9IGVsc2UgeyAvLyB3eGNvbXBvbmVudCDnu4Tku7bmiJblhoXnva7nu4Tku7ZcclxuICAgICAgICAgIHJldC5wdXNoKGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnWzBdID09PSAnbycpIHtcclxuICAgICAgICByZXQucHVzaChnZXRPYmpCeUFycmF5KGFyZykpO1xyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnICYmIGhhc093bihleHRyYU9iaiwgYXJnKSkge1xyXG4gICAgICAgIHJldC5wdXNoKGV4dHJhT2JqW2FyZ10pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldC5wdXNoKGFyZyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHJldFxyXG59XHJcblxyXG5jb25zdCBPTkNFID0gJ34nO1xyXG5jb25zdCBDVVNUT00gPSAnXic7XHJcblxyXG5mdW5jdGlvbiBpc01hdGNoRXZlbnRUeXBlIChldmVudFR5cGUsIG9wdFR5cGUpIHtcclxuICByZXR1cm4gKGV2ZW50VHlwZSA9PT0gb3B0VHlwZSkgfHxcclxuICAgIChcclxuICAgICAgb3B0VHlwZSA9PT0gJ3JlZ2lvbmNoYW5nZScgJiZcclxuICAgICAgKFxyXG4gICAgICAgIGV2ZW50VHlwZSA9PT0gJ2JlZ2luJyB8fFxyXG4gICAgICAgIGV2ZW50VHlwZSA9PT0gJ2VuZCdcclxuICAgICAgKVxyXG4gICAgKVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVFdmVudCAoZXZlbnQpIHtcclxuICBldmVudCA9IHdyYXBwZXIkMShldmVudCk7XHJcblxyXG4gIC8vIFtbJ3RhcCcsW1snaGFuZGxlJyxbMSwyLGFdXSxbJ2hhbmRsZTEnLFsxLDIsYV1dXV1dXHJcbiAgY29uc3QgZGF0YXNldCA9IChldmVudC5jdXJyZW50VGFyZ2V0IHx8IGV2ZW50LnRhcmdldCkuZGF0YXNldDtcclxuICBpZiAoIWRhdGFzZXQpIHtcclxuICAgIHJldHVybiBjb25zb2xlLndhcm4oJ+S6i+S7tuS/oeaBr+S4jeWtmOWcqCcpXHJcbiAgfVxyXG4gIGNvbnN0IGV2ZW50T3B0cyA9IGRhdGFzZXQuZXZlbnRPcHRzIHx8IGRhdGFzZXRbJ2V2ZW50LW9wdHMnXTsgLy8g5pSv5LuY5a6dIHdlYi12aWV3IOe7hOS7tiBkYXRhc2V0IOmdnumpvOWzsFxyXG4gIGlmICghZXZlbnRPcHRzKSB7XHJcbiAgICByZXR1cm4gY29uc29sZS53YXJuKCfkuovku7bkv6Hmga/kuI3lrZjlnKgnKVxyXG4gIH1cclxuXHJcbiAgLy8gW1snaGFuZGxlJyxbMSwyLGFdXSxbJ2hhbmRsZTEnLFsxLDIsYV1dXVxyXG4gIGNvbnN0IGV2ZW50VHlwZSA9IGV2ZW50LnR5cGU7XHJcblxyXG4gIGNvbnN0IHJldCA9IFtdO1xyXG5cclxuICBldmVudE9wdHMuZm9yRWFjaChldmVudE9wdCA9PiB7XHJcbiAgICBsZXQgdHlwZSA9IGV2ZW50T3B0WzBdO1xyXG4gICAgY29uc3QgZXZlbnRzQXJyYXkgPSBldmVudE9wdFsxXTtcclxuXHJcbiAgICBjb25zdCBpc0N1c3RvbSA9IHR5cGUuY2hhckF0KDApID09PSBDVVNUT007XHJcbiAgICB0eXBlID0gaXNDdXN0b20gPyB0eXBlLnNsaWNlKDEpIDogdHlwZTtcclxuICAgIGNvbnN0IGlzT25jZSA9IHR5cGUuY2hhckF0KDApID09PSBPTkNFO1xyXG4gICAgdHlwZSA9IGlzT25jZSA/IHR5cGUuc2xpY2UoMSkgOiB0eXBlO1xyXG5cclxuICAgIGlmIChldmVudHNBcnJheSAmJiBpc01hdGNoRXZlbnRUeXBlKGV2ZW50VHlwZSwgdHlwZSkpIHtcclxuICAgICAgZXZlbnRzQXJyYXkuZm9yRWFjaChldmVudEFycmF5ID0+IHtcclxuICAgICAgICBjb25zdCBtZXRob2ROYW1lID0gZXZlbnRBcnJheVswXTtcclxuICAgICAgICBpZiAobWV0aG9kTmFtZSkge1xyXG4gICAgICAgICAgbGV0IGhhbmRsZXJDdHggPSB0aGlzLiR2bTtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgaGFuZGxlckN0eC4kb3B0aW9ucy5nZW5lcmljICYmXHJcbiAgICAgICAgICAgIGhhbmRsZXJDdHguJHBhcmVudCAmJlxyXG4gICAgICAgICAgICBoYW5kbGVyQ3R4LiRwYXJlbnQuJHBhcmVudFxyXG4gICAgICAgICAgKSB7IC8vIG1wLXdlaXhpbixtcC10b3V0aWFvIOaKveixoeiKgueCueaooeaLnyBzY29wZWQgc2xvdHNcclxuICAgICAgICAgICAgaGFuZGxlckN0eCA9IGhhbmRsZXJDdHguJHBhcmVudC4kcGFyZW50O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKG1ldGhvZE5hbWUgPT09ICckZW1pdCcpIHtcclxuICAgICAgICAgICAgaGFuZGxlckN0eC4kZW1pdC5hcHBseShoYW5kbGVyQ3R4LFxyXG4gICAgICAgICAgICAgIHByb2Nlc3NFdmVudEFyZ3MoXHJcbiAgICAgICAgICAgICAgICB0aGlzLiR2bSxcclxuICAgICAgICAgICAgICAgIGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgZXZlbnRBcnJheVsxXSxcclxuICAgICAgICAgICAgICAgIGV2ZW50QXJyYXlbMl0sXHJcbiAgICAgICAgICAgICAgICBpc0N1c3RvbSxcclxuICAgICAgICAgICAgICAgIG1ldGhvZE5hbWVcclxuICAgICAgICAgICAgICApKTtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlckN0eFttZXRob2ROYW1lXTtcclxuICAgICAgICAgIGlmICghaXNGbihoYW5kbGVyKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCBfdm0uJHttZXRob2ROYW1lfSBpcyBub3QgYSBmdW5jdGlvbmApXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaXNPbmNlKSB7XHJcbiAgICAgICAgICAgIGlmIChoYW5kbGVyLm9uY2UpIHtcclxuICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBoYW5kbGVyLm9uY2UgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0LnB1c2goaGFuZGxlci5hcHBseShoYW5kbGVyQ3R4LCBwcm9jZXNzRXZlbnRBcmdzKFxyXG4gICAgICAgICAgICB0aGlzLiR2bSxcclxuICAgICAgICAgICAgZXZlbnQsXHJcbiAgICAgICAgICAgIGV2ZW50QXJyYXlbMV0sXHJcbiAgICAgICAgICAgIGV2ZW50QXJyYXlbMl0sXHJcbiAgICAgICAgICAgIGlzQ3VzdG9tLFxyXG4gICAgICAgICAgICBtZXRob2ROYW1lXHJcbiAgICAgICAgICApKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgaWYgKFxyXG4gICAgZXZlbnRUeXBlID09PSAnaW5wdXQnICYmXHJcbiAgICByZXQubGVuZ3RoID09PSAxICYmXHJcbiAgICB0eXBlb2YgcmV0WzBdICE9PSAndW5kZWZpbmVkJ1xyXG4gICkge1xyXG4gICAgcmV0dXJuIHJldFswXVxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgaG9va3MgPSBbXHJcbiAgJ29uU2hvdycsXHJcbiAgJ29uSGlkZScsXHJcbiAgJ29uRXJyb3InLFxyXG4gICdvblBhZ2VOb3RGb3VuZCdcclxuXTtcclxuXHJcbmZ1bmN0aW9uIHBhcnNlQmFzZUFwcCAodm0sIHtcclxuICBtb2NrcyxcclxuICBpbml0UmVmc1xyXG59KSB7XHJcbiAgaWYgKHZtLiRvcHRpb25zLnN0b3JlKSB7XHJcbiAgICBWdWUucHJvdG90eXBlLiRzdG9yZSA9IHZtLiRvcHRpb25zLnN0b3JlO1xyXG4gIH1cclxuXHJcbiAgVnVlLnByb3RvdHlwZS5tcEhvc3QgPSBcIm1wLWJhaWR1XCI7XHJcblxyXG4gIFZ1ZS5taXhpbih7XHJcbiAgICBiZWZvcmVDcmVhdGUgKCkge1xyXG4gICAgICBpZiAoIXRoaXMuJG9wdGlvbnMubXBUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMubXBUeXBlID0gdGhpcy4kb3B0aW9ucy5tcFR5cGU7XHJcblxyXG4gICAgICB0aGlzLiRtcCA9IHtcclxuICAgICAgICBkYXRhOiB7fSxcclxuICAgICAgICBbdGhpcy5tcFR5cGVdOiB0aGlzLiRvcHRpb25zLm1wSW5zdGFuY2VcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuJHNjb3BlID0gdGhpcy4kb3B0aW9ucy5tcEluc3RhbmNlO1xyXG5cclxuICAgICAgZGVsZXRlIHRoaXMuJG9wdGlvbnMubXBUeXBlO1xyXG4gICAgICBkZWxldGUgdGhpcy4kb3B0aW9ucy5tcEluc3RhbmNlO1xyXG5cclxuICAgICAgaWYgKHRoaXMubXBUeXBlICE9PSAnYXBwJykge1xyXG4gICAgICAgIGluaXRSZWZzKHRoaXMpO1xyXG4gICAgICAgIGluaXRNb2Nrcyh0aGlzLCBtb2Nrcyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgY29uc3QgYXBwT3B0aW9ucyA9IHtcclxuICAgIG9uTGF1bmNoIChhcmdzKSB7XHJcbiAgICAgIGlmICh0aGlzLiR2bSkgeyAvLyDlt7Lnu4/liJ3lp4vljJbov4fkuobvvIzkuLvopoHmmK/kuLrkuobnmb7luqbvvIznmb7luqYgb25TaG93IOWcqCBvbkxhdW5jaCDkuYvliY1cclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy4kdm0gPSB2bTtcclxuXHJcbiAgICAgIHRoaXMuJHZtLiRtcCA9IHtcclxuICAgICAgICBhcHA6IHRoaXNcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuJHZtLiRzY29wZSA9IHRoaXM7XHJcbiAgICAgIC8vIHZtIOS4iuS5n+aMgui9vSBnbG9iYWxEYXRhXHJcbiAgICAgIHRoaXMuJHZtLmdsb2JhbERhdGEgPSB0aGlzLmdsb2JhbERhdGE7XHJcblxyXG4gICAgICB0aGlzLiR2bS5faXNNb3VudGVkID0gdHJ1ZTtcclxuICAgICAgdGhpcy4kdm0uX19jYWxsX2hvb2soJ21vdW50ZWQnLCBhcmdzKTtcclxuXHJcbiAgICAgIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvbkxhdW5jaCcsIGFyZ3MpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIOWFvOWuueaXp+eJiOacrCBnbG9iYWxEYXRhXHJcbiAgYXBwT3B0aW9ucy5nbG9iYWxEYXRhID0gdm0uJG9wdGlvbnMuZ2xvYmFsRGF0YSB8fCB7fTtcclxuICAvLyDlsIYgbWV0aG9kcyDkuK3nmoTmlrnms5XmjILlnKggZ2V0QXBwKCkg5LitXHJcbiAgY29uc3QgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XHJcbiAgaWYgKG1ldGhvZHMpIHtcclxuICAgIE9iamVjdC5rZXlzKG1ldGhvZHMpLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICAgIGFwcE9wdGlvbnNbbmFtZV0gPSBtZXRob2RzW25hbWVdO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpbml0SG9va3MoYXBwT3B0aW9ucywgaG9va3MpO1xyXG5cclxuICByZXR1cm4gYXBwT3B0aW9uc1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kVm1CeVZ1ZUlkICh2bSwgdnVlUGlkKSB7XHJcbiAgY29uc3QgJGNoaWxkcmVuID0gdm0uJGNoaWxkcmVuO1xyXG4gIC8vIOS8mOWFiOafpeaJvuebtOWxnijlj43lkJHmn6Xmib46aHR0cHM6Ly9naXRodWIuY29tL2RjbG91ZGlvL3VuaS1hcHAvaXNzdWVzLzEyMDApXHJcbiAgZm9yIChsZXQgaSA9ICRjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgY29uc3QgY2hpbGRWbSA9ICRjaGlsZHJlbltpXTtcclxuICAgIGlmIChjaGlsZFZtLiRzY29wZS5fJHZ1ZUlkID09PSB2dWVQaWQpIHtcclxuICAgICAgcmV0dXJuIGNoaWxkVm1cclxuICAgIH1cclxuICB9XHJcbiAgLy8g5Y+N5ZCR6YCS5b2S5p+l5om+XHJcbiAgbGV0IHBhcmVudFZtO1xyXG4gIGZvciAobGV0IGkgPSAkY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgIHBhcmVudFZtID0gZmluZFZtQnlWdWVJZCgkY2hpbGRyZW5baV0sIHZ1ZVBpZCk7XHJcbiAgICBpZiAocGFyZW50Vm0pIHtcclxuICAgICAgcmV0dXJuIHBhcmVudFZtXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0QmVoYXZpb3IgKG9wdGlvbnMpIHtcclxuICByZXR1cm4gQmVoYXZpb3Iob3B0aW9ucylcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFJlZnMgKHZtKSB7XHJcbiAgY29uc3QgbXBJbnN0YW5jZSA9IHZtLiRzY29wZTtcclxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodm0sICckcmVmcycsIHtcclxuICAgIGdldCAoKSB7XHJcbiAgICAgIGNvbnN0ICRyZWZzID0ge307XHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSBtcEluc3RhbmNlLnNlbGVjdEFsbENvbXBvbmVudHMoJy52dWUtcmVmJyk7XHJcbiAgICAgIGNvbXBvbmVudHMuZm9yRWFjaChjb21wb25lbnQgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlZiA9IGNvbXBvbmVudC5kYXRhc2V0LnJlZjtcclxuICAgICAgICAkcmVmc1tyZWZdID0gY29tcG9uZW50LiR2bSB8fCBjb21wb25lbnQ7XHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCBmb3JDb21wb25lbnRzID0gbXBJbnN0YW5jZS5zZWxlY3RBbGxDb21wb25lbnRzKCcudnVlLXJlZi1pbi1mb3InKTtcclxuICAgICAgZm9yQ29tcG9uZW50cy5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVmID0gY29tcG9uZW50LmRhdGFzZXQucmVmO1xyXG4gICAgICAgIGlmICghJHJlZnNbcmVmXSkge1xyXG4gICAgICAgICAgJHJlZnNbcmVmXSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkcmVmc1tyZWZdLnB1c2goY29tcG9uZW50LiR2bSB8fCBjb21wb25lbnQpO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuICRyZWZzXHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUxpbmsgKGV2ZW50KSB7XHJcbiAgY29uc3Qge1xyXG4gICAgdnVlUGlkLFxyXG4gICAgdnVlT3B0aW9uc1xyXG4gIH0gPSBldmVudC5kZXRhaWwgfHwgZXZlbnQudmFsdWU7IC8vIGRldGFpbCDmmK/lvq7kv6EsdmFsdWUg5piv55m+5bqmKGRpcGF0Y2gpXHJcblxyXG4gIGxldCBwYXJlbnRWbTtcclxuXHJcbiAgaWYgKHZ1ZVBpZCkge1xyXG4gICAgcGFyZW50Vm0gPSBmaW5kVm1CeVZ1ZUlkKHRoaXMuJHZtLCB2dWVQaWQpO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFwYXJlbnRWbSkge1xyXG4gICAgcGFyZW50Vm0gPSB0aGlzLiR2bTtcclxuICB9XHJcblxyXG4gIHZ1ZU9wdGlvbnMucGFyZW50ID0gcGFyZW50Vm07XHJcbn1cclxuXHJcbmNvbnN0IG1vY2tzID0gWydub2RlSWQnLCAnY29tcG9uZW50TmFtZSddO1xyXG5cclxuZnVuY3Rpb24gaXNQYWdlICgpIHtcclxuICByZXR1cm4gIXRoaXMub3duZXJJZFxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0UmVsYXRpb24gKGRldGFpbCkge1xyXG4gIHRoaXMuZGlzcGF0Y2goJ19fbCcsIGRldGFpbCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlQXBwICh2bSkge1xyXG4gIC8vIOeZvuW6piBvblNob3cg56uf54S25Lya5ZyoIG9uTGF1bmNoIOS5i+WJjVxyXG4gIGNvbnN0IGFwcE9wdGlvbnMgPSBwYXJzZUJhc2VBcHAodm0sIHtcclxuICAgIG1vY2tzLFxyXG4gICAgaW5pdFJlZnNcclxuICB9KTtcclxuICBhcHBPcHRpb25zLm9uU2hvdyA9IGZ1bmN0aW9uIG9uU2hvdyAoYXJncykge1xyXG4gICAgaWYgKCF0aGlzLiR2bSkge1xyXG4gICAgICB0aGlzLm9uTGF1bmNoKGFyZ3MpO1xyXG4gICAgfVxyXG4gICAgdGhpcy4kdm0uX19jYWxsX2hvb2soJ29uU2hvdycsIGFyZ3MpO1xyXG4gIH07XHJcbiAgcmV0dXJuIGFwcE9wdGlvbnNcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQXBwICh2bSkge1xyXG4gIEFwcChwYXJzZUFwcCh2bSkpO1xyXG4gIHJldHVybiB2bVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUJhc2VDb21wb25lbnQgKHZ1ZUNvbXBvbmVudE9wdGlvbnMsIHtcclxuICBpc1BhZ2UsXHJcbiAgaW5pdFJlbGF0aW9uXHJcbn0gPSB7fSkge1xyXG4gIGNvbnN0IFtWdWVDb21wb25lbnQsIHZ1ZU9wdGlvbnNdID0gaW5pdFZ1ZUNvbXBvbmVudChWdWUsIHZ1ZUNvbXBvbmVudE9wdGlvbnMpO1xyXG5cclxuICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgbXVsdGlwbGVTbG90czogdHJ1ZSxcclxuICAgIGFkZEdsb2JhbENsYXNzOiB0cnVlLFxyXG4gICAgLi4uKHZ1ZU9wdGlvbnMub3B0aW9ucyB8fCB7fSlcclxuICB9O1xyXG5cclxuICBjb25zdCBjb21wb25lbnRPcHRpb25zID0ge1xyXG4gICAgb3B0aW9ucyxcclxuICAgIGRhdGE6IGluaXREYXRhKHZ1ZU9wdGlvbnMsIFZ1ZS5wcm90b3R5cGUpLFxyXG4gICAgYmVoYXZpb3JzOiBpbml0QmVoYXZpb3JzKHZ1ZU9wdGlvbnMsIGluaXRCZWhhdmlvciksXHJcbiAgICBwcm9wZXJ0aWVzOiBpbml0UHJvcGVydGllcyh2dWVPcHRpb25zLnByb3BzLCBmYWxzZSwgdnVlT3B0aW9ucy5fX2ZpbGUpLFxyXG4gICAgbGlmZXRpbWVzOiB7XHJcbiAgICAgIGF0dGFjaGVkICgpIHtcclxuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5wcm9wZXJ0aWVzO1xyXG5cclxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgbXBUeXBlOiBpc1BhZ2UuY2FsbCh0aGlzKSA/ICdwYWdlJyA6ICdjb21wb25lbnQnLFxyXG4gICAgICAgICAgbXBJbnN0YW5jZTogdGhpcyxcclxuICAgICAgICAgIHByb3BzRGF0YTogcHJvcGVydGllc1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluaXRWdWVJZHMocHJvcGVydGllcy52dWVJZCwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIOWkhOeQhueItuWtkOWFs+ezu1xyXG4gICAgICAgIGluaXRSZWxhdGlvbi5jYWxsKHRoaXMsIHtcclxuICAgICAgICAgIHZ1ZVBpZDogdGhpcy5fJHZ1ZVBpZCxcclxuICAgICAgICAgIHZ1ZU9wdGlvbnM6IG9wdGlvbnNcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g5Yid5aeL5YyWIHZ1ZSDlrp7kvotcclxuICAgICAgICB0aGlzLiR2bSA9IG5ldyBWdWVDb21wb25lbnQob3B0aW9ucyk7XHJcblxyXG4gICAgICAgIC8vIOWkhOeQhiRzbG90cywkc2NvcGVkU2xvdHPvvIjmmoLkuI3mlK/mjIHliqjmgIHlj5jljJYkc2xvdHPvvIlcclxuICAgICAgICBpbml0U2xvdHModGhpcy4kdm0sIHByb3BlcnRpZXMudnVlU2xvdHMpO1xyXG5cclxuICAgICAgICAvLyDop6blj5HpppbmrKEgc2V0RGF0YVxyXG4gICAgICAgIHRoaXMuJHZtLiRtb3VudCgpO1xyXG4gICAgICB9LFxyXG4gICAgICByZWFkeSAoKSB7XHJcbiAgICAgICAgLy8g5b2T57uE5Lu2IHByb3BzIOm7mOiupOWAvOS4uiB0cnVl77yM5Yid5aeL5YyW5pe25Lyg5YWlIGZhbHNlIOS8muWvvOiHtCBjcmVhdGVkLHJlYWR5IOinpuWPkSwg5L2GIGF0dGFjaGVkIOS4jeinpuWPkVxyXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVycy53ZWl4aW4ucXEuY29tL2NvbW11bml0eS9kZXZlbG9wL2RvYy8wMDA2NmFlMjg0NGNjMGY4ZWI4ODNlMmE1NTc4MDBcclxuICAgICAgICBpZiAodGhpcy4kdm0pIHtcclxuICAgICAgICAgIHRoaXMuJHZtLl9pc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgdGhpcy4kdm0uX19jYWxsX2hvb2soJ21vdW50ZWQnKTtcclxuICAgICAgICAgIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvblJlYWR5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBkZXRhY2hlZCAoKSB7XHJcbiAgICAgICAgdGhpcy4kdm0gJiYgdGhpcy4kdm0uJGRlc3Ryb3koKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHBhZ2VMaWZldGltZXM6IHtcclxuICAgICAgc2hvdyAoYXJncykge1xyXG4gICAgICAgIHRoaXMuJHZtICYmIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvblBhZ2VTaG93JywgYXJncyk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGhpZGUgKCkge1xyXG4gICAgICAgIHRoaXMuJHZtICYmIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvblBhZ2VIaWRlJyk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHJlc2l6ZSAoc2l6ZSkge1xyXG4gICAgICAgIHRoaXMuJHZtICYmIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvblBhZ2VSZXNpemUnLCBzaXplKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgX19sOiBoYW5kbGVMaW5rLFxyXG4gICAgICBfX2U6IGhhbmRsZUV2ZW50XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodnVlT3B0aW9ucy53eHNDYWxsTWV0aG9kcykpIHtcclxuICAgIHZ1ZU9wdGlvbnMud3hzQ2FsbE1ldGhvZHMuZm9yRWFjaChjYWxsTWV0aG9kID0+IHtcclxuICAgICAgY29tcG9uZW50T3B0aW9ucy5tZXRob2RzW2NhbGxNZXRob2RdID0gZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kdm1bY2FsbE1ldGhvZF0oYXJncylcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzUGFnZSkge1xyXG4gICAgcmV0dXJuIGNvbXBvbmVudE9wdGlvbnNcclxuICB9XHJcbiAgcmV0dXJuIFtjb21wb25lbnRPcHRpb25zLCBWdWVDb21wb25lbnRdXHJcbn1cclxuXHJcbmNvbnN0IG5ld0xpZmVjeWNsZSA9IHN3YW4uY2FuSVVzZSgnbGlmZWN5Y2xlLTItMCcpO1xyXG5cclxuZnVuY3Rpb24gcGFyc2VDb21wb25lbnQgKHZ1ZU9wdGlvbnMpIHtcclxuICBjb25zdCBjb21wb25lbnRPcHRpb25zID0gcGFyc2VCYXNlQ29tcG9uZW50KHZ1ZU9wdGlvbnMsIHtcclxuICAgIGlzUGFnZSxcclxuICAgIGluaXRSZWxhdGlvblxyXG4gIH0pO1xyXG5cclxuICAvLyDlhbPkuo7nmb7luqblsI/nqIvluo/nlJ/lkb3lkajmnJ/nmoTor7TmmI4o57uE5Lu25L2c5Li66aG16Z2i5pe2KTpcclxuICAvLyBsaWZldGltZXM6YXR0YWNoZWQgLS0+IG1ldGhvZHM6b25TaG93IC0tPiBtZXRob2RzOm9uTG9hZCAtLT4gbWV0aG9kczpvblJlYWR5XHJcbiAgLy8g6L+Z6YeM5Zyo5by65Yi25bCGb25TaG935oyq5Yiwb25Mb2Fk5LmL5ZCO6Kem5Y+RLOWPpuWkluS4gOWkhOS/ruaUueWcqHBhZ2UtcGFyc2VyLmpzXHJcbiAgY29uc3Qgb2xkQXR0YWNoZWQgPSBjb21wb25lbnRPcHRpb25zLmxpZmV0aW1lcy5hdHRhY2hlZDtcclxuICBjb21wb25lbnRPcHRpb25zLmxpZmV0aW1lcy5hdHRhY2hlZCA9IGZ1bmN0aW9uIGF0dGFjaGVkICgpIHtcclxuICAgIG9sZEF0dGFjaGVkLmNhbGwodGhpcyk7XHJcbiAgICBpZiAoaXNQYWdlLmNhbGwodGhpcykpIHsgLy8g55m+5bqmIG9uTG9hZCDlnKggYXR0YWNoZWQg5LmL5YmN6Kem5Y+RXHJcbiAgICAgIC8vIOeZvuW6piDlvZPnu4Tku7bkvZzkuLrpobXpnaLml7YgcGFnZWluc3RhbmNjZSDkuI3mmK/ljp/mnaXnu4Tku7bnmoQgaW5zdGFuY2VcclxuICAgICAgdGhpcy5wYWdlaW5zdGFuY2UuJHZtID0gdGhpcy4kdm07XHJcbiAgICAgIGlmIChoYXNPd24odGhpcy5wYWdlaW5zdGFuY2UsICdfJGFyZ3MnKSkge1xyXG4gICAgICAgIHRoaXMuJHZtLiRtcC5xdWVyeSA9IHRoaXMucGFnZWluc3RhbmNlLl8kYXJncztcclxuICAgICAgICB0aGlzLiR2bS5fX2NhbGxfaG9vaygnb25Mb2FkJywgdGhpcy5wYWdlaW5zdGFuY2UuXyRhcmdzKTtcclxuICAgICAgICB0aGlzLiR2bS5fX2NhbGxfaG9vaygnb25TaG93Jyk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMucGFnZWluc3RhbmNlLl8kYXJncztcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8g55m+5bqm5bCP56iL5bqP57uE5Lu25LiN6Kem5Y+RbWV0aG9kc+WGheeahG9uUmVhZHlcclxuICAgICAgaWYgKHRoaXMuJHZtKSB7XHJcbiAgICAgICAgdGhpcy4kdm0uX2lzTW91bnRlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy4kdm0uX19jYWxsX2hvb2soJ21vdW50ZWQnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGlmIChuZXdMaWZlY3ljbGUpIHtcclxuICAgIGRlbGV0ZSBjb21wb25lbnRPcHRpb25zLmxpZmV0aW1lcy5yZWFkeTtcclxuICAgIGNvbXBvbmVudE9wdGlvbnMubWV0aG9kcy5vblJlYWR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAodGhpcy4kdm0pIHtcclxuICAgICAgICB0aGlzLiR2bS5faXNNb3VudGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLiR2bS5fX2NhbGxfaG9vaygnbW91bnRlZCcpO1xyXG4gICAgICAgIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvblJlYWR5Jyk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRPcHRpb25zLm1lc3NhZ2VzID0ge1xyXG4gICAgX19sOiBjb21wb25lbnRPcHRpb25zLm1ldGhvZHMuX19sXHJcbiAgfTtcclxuICBkZWxldGUgY29tcG9uZW50T3B0aW9ucy5tZXRob2RzLl9fbDtcclxuXHJcbiAgcmV0dXJuIGNvbXBvbmVudE9wdGlvbnNcclxufVxyXG5cclxuY29uc3QgaG9va3MkMSA9IFtcclxuICAnb25TaG93JyxcclxuICAnb25IaWRlJyxcclxuICAnb25VbmxvYWQnXHJcbl07XHJcblxyXG5ob29rcyQxLnB1c2goLi4uUEFHRV9FVkVOVF9IT09LUyk7XHJcblxyXG5mdW5jdGlvbiBwYXJzZUJhc2VQYWdlICh2dWVQYWdlT3B0aW9ucywge1xyXG4gIGlzUGFnZSxcclxuICBpbml0UmVsYXRpb25cclxufSkge1xyXG4gIGNvbnN0IHBhZ2VPcHRpb25zID0gcGFyc2VDb21wb25lbnQodnVlUGFnZU9wdGlvbnMpO1xyXG5cclxuICBpbml0SG9va3MocGFnZU9wdGlvbnMubWV0aG9kcywgaG9va3MkMSwgdnVlUGFnZU9wdGlvbnMpO1xyXG5cclxuICBwYWdlT3B0aW9ucy5tZXRob2RzLm9uTG9hZCA9IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICB0aGlzLiR2bS4kbXAucXVlcnkgPSBhcmdzOyAvLyDlhbzlrrkgbXB2dWVcclxuICAgIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvbkxvYWQnLCBhcmdzKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gcGFnZU9wdGlvbnNcclxufVxyXG5cclxuZnVuY3Rpb24gZGV0YWNoZWQgKCR2bSkge1xyXG4gICR2bS4kY2hpbGRyZW4uZm9yRWFjaChjaGlsZFZtID0+IHtcclxuICAgIGNoaWxkVm0uJHNjb3BlLmRldGFjaGVkKCk7XHJcbiAgfSk7XHJcbiAgJHZtLiRzY29wZS5kZXRhY2hlZCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvblBhZ2VVbmxvYWQgKCR2bSkge1xyXG4gICR2bS4kZGVzdHJveSgpO1xyXG4gICR2bS4kY2hpbGRyZW4uZm9yRWFjaChjaGlsZFZtID0+IHtcclxuICAgIGRldGFjaGVkKGNoaWxkVm0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZVBhZ2UgKHZ1ZVBhZ2VPcHRpb25zKSB7XHJcbiAgY29uc3QgcGFnZU9wdGlvbnMgPSBwYXJzZUJhc2VQYWdlKHZ1ZVBhZ2VPcHRpb25zLCB7XHJcbiAgICBpc1BhZ2UsXHJcbiAgICBpbml0UmVsYXRpb25cclxuICB9KTtcclxuXHJcbiAgLy8g57qg5q2j55m+5bqm5bCP56iL5bqP55Sf5ZG95ZGo5pyfbWV0aG9kczpvblNob3flnKhtZXRob2RzOm9uTG9hZOS5i+WJjeinpuWPkeeahOmXrumimFxyXG4gIHBhZ2VPcHRpb25zLm1ldGhvZHMub25TaG93ID0gZnVuY3Rpb24gb25TaG93ICgpIHtcclxuICAgIGlmICh0aGlzLiR2bSAmJiB0aGlzLiR2bS4kbXAucXVlcnkpIHtcclxuICAgICAgdGhpcy4kdm0uX19jYWxsX2hvb2soJ29uU2hvdycpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHBhZ2VPcHRpb25zLm1ldGhvZHMub25Mb2FkID0gZnVuY3Rpb24gb25Mb2FkIChhcmdzKSB7XHJcbiAgICAvLyDnmb7luqYgb25Mb2FkIOWcqCBhdHRhY2hlZCDkuYvliY3op6blj5HvvIzlhYjlrZjlgqggYXJncywg5ZyoIGF0dGFjaGVkIOmHjOi+ueinpuWPkSBvbkxvYWRcclxuICAgIGlmICh0aGlzLiR2bSkge1xyXG4gICAgICB0aGlzLiR2bS4kbXAucXVlcnkgPSBhcmdzO1xyXG4gICAgICB0aGlzLiR2bS5fX2NhbGxfaG9vaygnb25Mb2FkJywgYXJncyk7XHJcbiAgICAgIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvblNob3cnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucGFnZWluc3RhbmNlLl8kYXJncyA9IGFyZ3M7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcGFnZU9wdGlvbnMubWV0aG9kcy5vblVubG9hZCA9IGZ1bmN0aW9uIG9uVW5sb2FkICgpIHtcclxuICAgIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvblVubG9hZCcpO1xyXG4gICAgb25QYWdlVW5sb2FkKHRoaXMuJHZtKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gcGFnZU9wdGlvbnNcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUGFnZSAodnVlUGFnZU9wdGlvbnMpIHtcclxuICB7XHJcbiAgICByZXR1cm4gQ29tcG9uZW50KHBhcnNlUGFnZSh2dWVQYWdlT3B0aW9ucykpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZ1ZU9wdGlvbnMpIHtcclxuICB7XHJcbiAgICByZXR1cm4gQ29tcG9uZW50KHBhcnNlQ29tcG9uZW50KHZ1ZU9wdGlvbnMpKVxyXG4gIH1cclxufVxyXG5cclxudG9kb3MuZm9yRWFjaCh0b2RvQXBpID0+IHtcclxuICBwcm90b2NvbHNbdG9kb0FwaV0gPSBmYWxzZTtcclxufSk7XHJcblxyXG5jYW5JVXNlcy5mb3JFYWNoKGNhbklVc2VBcGkgPT4ge1xyXG4gIGNvbnN0IGFwaU5hbWUgPSBwcm90b2NvbHNbY2FuSVVzZUFwaV0gJiYgcHJvdG9jb2xzW2NhbklVc2VBcGldLm5hbWUgPyBwcm90b2NvbHNbY2FuSVVzZUFwaV0ubmFtZVxyXG4gICAgOiBjYW5JVXNlQXBpO1xyXG4gIGlmICghc3dhbi5jYW5JVXNlKGFwaU5hbWUpKSB7XHJcbiAgICBwcm90b2NvbHNbY2FuSVVzZUFwaV0gPSBmYWxzZTtcclxuICB9XHJcbn0pO1xyXG5cclxubGV0IHVuaSA9IHt9O1xyXG5cclxuaWYgKHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgXCJtcC1iYWlkdVwiICE9PSAnYXBwLXBsdXMnKSB7XHJcbiAgdW5pID0gbmV3IFByb3h5KHt9LCB7XHJcbiAgICBnZXQgKHRhcmdldCwgbmFtZSkge1xyXG4gICAgICBpZiAodGFyZ2V0W25hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldFtuYW1lXVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChiYXNlQXBpW25hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2VBcGlbbmFtZV1cclxuICAgICAgfVxyXG4gICAgICBpZiAoYXBpW25hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeShuYW1lLCBhcGlbbmFtZV0pXHJcbiAgICAgIH1cclxuICAgICAge1xyXG4gICAgICAgIGlmIChleHRyYUFwaVtuYW1lXSkge1xyXG4gICAgICAgICAgcmV0dXJuIHByb21pc2lmeShuYW1lLCBleHRyYUFwaVtuYW1lXSlcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRvZG9BcGlzW25hbWVdKSB7XHJcbiAgICAgICAgICByZXR1cm4gcHJvbWlzaWZ5KG5hbWUsIHRvZG9BcGlzW25hbWVdKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoZXZlbnRBcGlbbmFtZV0pIHtcclxuICAgICAgICByZXR1cm4gZXZlbnRBcGlbbmFtZV1cclxuICAgICAgfVxyXG4gICAgICBpZiAoIWhhc093bihzd2FuLCBuYW1lKSAmJiAhaGFzT3duKHByb3RvY29scywgbmFtZSkpIHtcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcHJvbWlzaWZ5KG5hbWUsIHdyYXBwZXIobmFtZSwgc3dhbltuYW1lXSkpXHJcbiAgICB9LFxyXG4gICAgc2V0ICh0YXJnZXQsIG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG4gIH0pO1xyXG59IGVsc2Uge1xyXG4gIE9iamVjdC5rZXlzKGJhc2VBcGkpLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICB1bmlbbmFtZV0gPSBiYXNlQXBpW25hbWVdO1xyXG4gIH0pO1xyXG5cclxuICB7XHJcbiAgICBPYmplY3Qua2V5cyh0b2RvQXBpcykuZm9yRWFjaChuYW1lID0+IHtcclxuICAgICAgdW5pW25hbWVdID0gcHJvbWlzaWZ5KG5hbWUsIHRvZG9BcGlzW25hbWVdKTtcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmtleXMoZXh0cmFBcGkpLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICAgIHVuaVtuYW1lXSA9IHByb21pc2lmeShuYW1lLCB0b2RvQXBpc1tuYW1lXSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIE9iamVjdC5rZXlzKGV2ZW50QXBpKS5mb3JFYWNoKG5hbWUgPT4ge1xyXG4gICAgdW5pW25hbWVdID0gZXZlbnRBcGlbbmFtZV07XHJcbiAgfSk7XHJcblxyXG4gIE9iamVjdC5rZXlzKGFwaSkuZm9yRWFjaChuYW1lID0+IHtcclxuICAgIHVuaVtuYW1lXSA9IHByb21pc2lmeShuYW1lLCBhcGlbbmFtZV0pO1xyXG4gIH0pO1xyXG5cclxuICBPYmplY3Qua2V5cyhzd2FuKS5mb3JFYWNoKG5hbWUgPT4ge1xyXG4gICAgaWYgKGhhc093bihzd2FuLCBuYW1lKSB8fCBoYXNPd24ocHJvdG9jb2xzLCBuYW1lKSkge1xyXG4gICAgICB1bmlbbmFtZV0gPSBwcm9taXNpZnkobmFtZSwgd3JhcHBlcihuYW1lLCBzd2FuW25hbWVdKSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbnN3YW4uY3JlYXRlQXBwID0gY3JlYXRlQXBwO1xyXG5zd2FuLmNyZWF0ZVBhZ2UgPSBjcmVhdGVQYWdlO1xyXG5zd2FuLmNyZWF0ZUNvbXBvbmVudCA9IGNyZWF0ZUNvbXBvbmVudDtcclxuXHJcbnZhciB1bmkkMSA9IHVuaTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVuaSQxO1xyXG5leHBvcnQgeyBjcmVhdGVBcHAsIGNyZWF0ZUNvbXBvbmVudCwgY3JlYXRlUGFnZSB9O1xyXG4iLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSwgLyogdnVlLWNsaSBvbmx5ICovXG4gIGNvbXBvbmVudHMsIC8vIGZpeGVkIGJ5IHh4eHh4eCBhdXRvIGNvbXBvbmVudHNcbiAgcmVuZGVyanMgLy8gZml4ZWQgYnkgeHh4eHh4IHJlbmRlcmpzXG4pIHtcbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyBmaXhlZCBieSB4eHh4eHggYXV0byBjb21wb25lbnRzXG4gIGlmIChjb21wb25lbnRzKSB7XG4gICAgaWYgKCFvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICAgIG9wdGlvbnMuY29tcG9uZW50cyA9IHt9XG4gICAgfVxuICAgIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICAgZm9yICh2YXIgbmFtZSBpbiBjb21wb25lbnRzKSB7XG4gICAgICBpZiAoaGFzT3duLmNhbGwoY29tcG9uZW50cywgbmFtZSkgJiYgIWhhc093bi5jYWxsKG9wdGlvbnMuY29tcG9uZW50cywgbmFtZSkpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50c1tuYW1lXVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBmaXhlZCBieSB4eHh4eHggcmVuZGVyanNcbiAgaWYgKHJlbmRlcmpzKSB7XG4gICAgKHJlbmRlcmpzLmJlZm9yZUNyZWF0ZSB8fCAocmVuZGVyanMuYmVmb3JlQ3JlYXRlID0gW10pKS51bnNoaWZ0KGZ1bmN0aW9uKCkge1xuICAgICAgdGhpc1tyZW5kZXJqcy5fX21vZHVsZV0gPSB0aGlzXG4gICAgfSk7XG4gICAgKG9wdGlvbnMubWl4aW5zIHx8IChvcHRpb25zLm1peGlucyA9IFtdKSkucHVzaChyZW5kZXJqcylcbiAgfVxuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcbmltcG9ydCBWdWV4IGZyb20gJ3Z1ZXgnXHJcblxyXG5WdWUudXNlKFZ1ZXgpXHJcblxyXG5jb25zdCBzdG9yZSA9IG5ldyBWdWV4LlN0b3JlKHtcclxuXHRzdGF0ZToge1xyXG5cdFx0LyoqXHJcblx0XHQgKiDmmK/lkKbpnIDopoHlvLrliLbnmbvlvZVcclxuXHRcdCAqL1xyXG5cdFx0Zm9yY2VkTG9naW46IHRydWUsXHJcblx0XHRoYXNMb2dpbjogZmFsc2UsXHJcblx0XHR1c2VyTmFtZTogXCJcIixcclxuXHRcdHBob25lOlwiXCJcclxuXHR9LFxyXG5cdG11dGF0aW9uczoge1xyXG5cdFx0bG9naW4oc3RhdGUsIHBob25lKSB7XHJcblx0XHRcdHN0YXRlLnBob25lID0gcGhvbmU7XHJcblx0XHRcdHN0YXRlLmhhc0xvZ2luID0gdHJ1ZTtcclxuXHRcdH0sXHJcblx0XHRsb2dvdXQoc3RhdGUpIHtcclxuXHRcdFx0c3RhdGUucGhvbmUgPSBcIlwiO1xyXG5cdFx0XHRzdGF0ZS5oYXNMb2dpbiA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdH1cclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHN0b3JlXHJcbiIsIi8qIG1lc2Nyb2xsXHJcbiAqIHZlcnNpb24gMS4yLjVcclxuICogMjAyMC0wMy0xNSB3ZW5qdVxyXG4gKiBodHRwOi8vd3d3Lm1lc2Nyb2xsLmNvbVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1lU2Nyb2xsKG9wdGlvbnMsIGlzU2Nyb2xsQm9keSkge1xyXG5cdGxldCBtZSA9IHRoaXM7XHJcblx0bWUudmVyc2lvbiA9ICcxLjIuNSc7IC8vIG1lc2Nyb2xs54mI5pys5Y+3XHJcblx0bWUub3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIOmFjee9rlxyXG5cdG1lLmlzU2Nyb2xsQm9keSA9IGlzU2Nyb2xsQm9keSB8fCBmYWxzZTsgLy8g5rua5Yqo5Yy65Z+f5piv5ZCm5Li65Y6f55Sf6aG16Z2i5rua5YqoOyDpu5jorqTkuLpzY3JvbGwtdmlld1xyXG5cclxuXHRtZS5pc0Rvd25TY3JvbGxpbmcgPSBmYWxzZTsgLy8g5piv5ZCm5Zyo5omn6KGM5LiL5ouJ5Yi35paw55qE5Zue6LCDXHJcblx0bWUuaXNVcFNjcm9sbGluZyA9IGZhbHNlOyAvLyDmmK/lkKblnKjmiafooYzkuIrmi4nliqDovb3nmoTlm57osINcclxuXHRsZXQgaGFzRG93bkNhbGxiYWNrID0gbWUub3B0aW9ucy5kb3duICYmIG1lLm9wdGlvbnMuZG93bi5jYWxsYmFjazsgLy8g5piv5ZCm6YWN572u5LqGZG93bueahGNhbGxiYWNrXHJcblxyXG5cdC8vIOWIneWni+WMluS4i+aLieWIt+aWsFxyXG5cdG1lLmluaXREb3duU2Nyb2xsKCk7XHJcblx0Ly8g5Yid5aeL5YyW5LiK5ouJ5Yqg6L29LOWImeWIneWni+WMllxyXG5cdG1lLmluaXRVcFNjcm9sbCgpO1xyXG5cclxuXHQvLyDoh6rliqjliqDovb1cclxuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyAvLyDlvoXkuLvnur/nqIvmiafooYzlrozmr5Xlho3miafooYws6YG/5YWNbmV3IE1lU2Nyb2xs5pyq5Yid5aeL5YyWLOWcqOWbnuiwg+iOt+WPluS4jeWIsG1lc2Nyb2xs55qE5a6e5L6LXHJcblx0XHQvLyDoh6rliqjop6blj5HkuIvmi4nliLfmlrAgKOWPquaciemFjee9ruS6hmRvd27nmoRjYWxsYmFja+aJjeiHquWKqOinpuWPkeS4i+aLieWIt+aWsClcclxuXHRcdGlmIChtZS5vcHREb3duLnVzZSAmJiBtZS5vcHREb3duLmF1dG8gJiYgaGFzRG93bkNhbGxiYWNrKSB7XHJcblx0XHRcdGlmIChtZS5vcHREb3duLmF1dG9TaG93TG9hZGluZykge1xyXG5cdFx0XHRcdG1lLnRyaWdnZXJEb3duU2Nyb2xsKCk7IC8vIOaYvuekuuS4i+aLiei/m+W6pizmiafooYzkuIvmi4nlm57osINcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRtZS5vcHREb3duLmNhbGxiYWNrICYmIG1lLm9wdERvd24uY2FsbGJhY2sobWUpOyAvLyDkuI3mmL7npLrkuIvmi4nov5vluqYs55u05o6l5omn6KGM5LiL5ouJ5Zue6LCDXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdC8vIOiHquWKqOinpuWPkeS4iuaLieWKoOi9vVxyXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHsgLy8g5bu25pe256Gu5L+d5YWI5omn6KGMZG93bueahGNhbGxiYWNrLOWGjeaJp+ihjHVw55qEY2FsbGJhY2ss5Zug5Li66YOo5YiG5bCP56iL5bqPZW1pdOaYr+W8guatpSzkvJrlr7zoh7Rpc1VwQXV0b0xvYWTliKTmlq3mnInor69cclxuXHRcdFx0bWUub3B0VXAudXNlICYmIG1lLm9wdFVwLmF1dG8gJiYgIW1lLmlzVXBBdXRvTG9hZCAmJiBtZS50cmlnZ2VyVXBTY3JvbGwoKTtcclxuXHRcdH0sIDEwMClcclxuXHR9LCAzMCk7IC8vIOmcgOiuqW1lLm9wdERvd24uaW5pdGVk5ZKMbWUub3B0VXAuaW5pdGVk5YWI5omn6KGMXHJcbn1cclxuXHJcbi8qIOmFjee9ruWPguaVsDrkuIvmi4nliLfmlrAgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLmV4dGVuZERvd25TY3JvbGwgPSBmdW5jdGlvbihvcHREb3duKSB7XHJcblx0Ly8g5LiL5ouJ5Yi35paw55qE6YWN572uXHJcblx0TWVTY3JvbGwuZXh0ZW5kKG9wdERvd24sIHtcclxuXHRcdHVzZTogdHJ1ZSwgLy8g5piv5ZCm5ZCv55So5LiL5ouJ5Yi35pawOyDpu5jorqR0cnVlXHJcblx0XHRhdXRvOiB0cnVlLCAvLyDmmK/lkKblnKjliJ3lp4vljJblrozmr5XkuYvlkI7oh6rliqjmiafooYzkuIvmi4nliLfmlrDnmoTlm57osIM7IOm7mOiupHRydWVcclxuXHRcdG5hdGl2ZTogZmFsc2UsIC8vIOaYr+WQpuS9v+eUqOezu+e7n+iHquW4pueahOS4i+aLieWIt+aWsDsg6buY6K6kZmFsc2U7IOS7hW1lc2Nyb2xsLWJvZHnnlJ/mlYggKOWAvOS4unRydWXml7Ys6L+Y6ZyA5ZyocGFnZXPphY3nva5lbmFibGVQdWxsRG93blJlZnJlc2g6dHJ1ZTvor6bor7flj4LogINtZXNjcm9sbC1uYXRpdmXnmoTmoYjkvospXHJcblx0XHRhdXRvU2hvd0xvYWRpbmc6IGZhbHNlLCAvLyDlpoLmnpzorr7nva5hdXRvPXRydWUo5Zyo5Yid5aeL5YyW5a6M5q+V5LmL5ZCO6Ieq5Yqo5omn6KGM5LiL5ouJ5Yi35paw55qE5Zue6LCDKSzpgqPkuYjmmK/lkKbmmL7npLrkuIvmi4nliLfmlrDnmoTov5vluqY7IOm7mOiupGZhbHNlXHJcblx0XHRpc0xvY2s6IGZhbHNlLCAvLyDmmK/lkKbplIHlrprkuIvmi4nliLfmlrAs6buY6K6kZmFsc2U7XHJcblx0XHRvZmZzZXQ6IDgwLCAvLyDlnKjliJfooajpobbpg6gs5LiL5ouJ5aSn5LqOODBweCzmnb7miYvljbPlj6/op6blj5HkuIvmi4nliLfmlrDnmoTlm57osINcclxuXHRcdHN0YXJ0VG9wOiAxMDAsIC8vIHNjcm9sbC12aWV35rua5Yqo5Yiw6aG26YOo5pe2LOatpOaXtueahHNjcm9sbC10b3DkuI3kuIDlrprkuLowLCDmraTlgLznlKjkuo7mjqfliLbmnIDlpKfnmoTor6/lt65cclxuXHRcdGZwczogODAsIC8vIOS4i+aLieiKgua1gSAo5YC86LaK5aSn5q+P56eS5Yi35paw6aKR546H6LaK6auYKVxyXG5cdFx0aW5PZmZzZXRSYXRlOiAxLCAvLyDlnKjliJfooajpobbpg6gs5LiL5ouJ55qE6Led56a75bCP5LqOb2Zmc2V05pe2LOaUueWPmOS4i+aLieWMuuWfn+mrmOW6puavlOS+izvlgLzlsI/kuo4x5LiU6LaK5o6l6L+RMCzpq5jluqblj5jljJbotorlsI8s6KGo546w5Li66LaK5b6A5LiL6LaK6Zq+5ouJXHJcblx0XHRvdXRPZmZzZXRSYXRlOiAwLjIsIC8vIOWcqOWIl+ihqOmhtumDqCzkuIvmi4nnmoTot53nprvlpKfkuo5vZmZzZXTml7Ys5pS55Y+Y5LiL5ouJ5Yy65Z+f6auY5bqm5q+U5L6LO+WAvOWwj+S6jjHkuJTotormjqXov5EwLOmrmOW6puWPmOWMlui2iuWwjyzooajnjrDkuLrotorlvoDkuIvotorpmr7mi4lcclxuXHRcdGJvdHRvbU9mZnNldDogMjAsIC8vIOW9k+aJi+aMh3RvdWNobW92ZeS9jee9ruWcqOi3neemu2JvZHnlupXpg6gyMHB46IyD5Zu05YaF55qE5pe25YCZ57uT5p2f5LiK5ouJ5Yi35pawLOmBv+WFjVdlYnZpZXfltYzlpZflr7zoh7R0b3VjaGVuZOS6i+S7tuS4jeaJp+ihjFxyXG5cdFx0bWluQW5nbGU6IDQ1LCAvLyDlkJHkuIvmu5HliqjmnIDlsJHlgY/np7vnmoTop5LluqYs5Y+W5YC85Yy66Ze0ICBbMCw5MF076buY6K6kNDXluqYs5Y2z5ZCR5LiL5ruR5Yqo55qE6KeS5bqm5aSn5LqONDXluqbliJnop6blj5HkuIvmi4k76ICM5bCP5LqONDXluqYs5bCG5LiN6Kem5Y+R5LiL5ouJLOmBv+WFjeS4juW3puWPs+a7keWKqOeahOi9ruaSreetiee7hOS7tuWGsueqgTtcclxuXHRcdHRleHRJbk9mZnNldDogJ+S4i+aLieWIt+aWsCcsIC8vIOS4i+aLieeahOi3neemu+WcqG9mZnNldOiMg+WbtOWGheeahOaPkOekuuaWh+acrFxyXG5cdFx0dGV4dE91dE9mZnNldDogJ+mHiuaUvuabtOaWsCcsIC8vIOS4i+aLieeahOi3neemu+Wkp+S6jm9mZnNldOiMg+WbtOeahOaPkOekuuaWh+acrFxyXG5cdFx0dGV4dExvYWRpbmc6ICfliqDovb3kuK0gLi4uJywgLy8g5Yqg6L295Lit55qE5o+Q56S65paH5pysXHJcblx0XHRiZ0NvbG9yOiBcInRyYW5zcGFyZW50XCIsIC8vIOiDjOaZr+minOiJsiAo5bu66K6u5ZyocGFnZXMuanNvbuS4reWGjeiuvue9ruS4gOS4i2JhY2tncm91bmRDb2xvclRvcClcclxuXHRcdHRleHRDb2xvcjogXCJncmF5XCIsIC8vIOaWh+acrOminOiJsiAo5b2TYmdDb2xvcumFjee9ruS6huminOiJsizogIx0ZXh0Q29sb3LmnKrphY3nva7ml7Ys5YiZdGV4dENvbG9y5Lya6buY6K6k5Li655m96ImyKVxyXG5cdFx0aW5pdGVkOiBudWxsLCAvLyDkuIvmi4nliLfmlrDliJ3lp4vljJblrozmr5XnmoTlm57osINcclxuXHRcdGluT2Zmc2V0OiBudWxsLCAvLyDkuIvmi4nnmoTot53nprvov5vlhaVvZmZzZXTojIPlm7TlhoXpgqPkuIDliLvnmoTlm57osINcclxuXHRcdG91dE9mZnNldDogbnVsbCwgLy8g5LiL5ouJ55qE6Led56a75aSn5LqOb2Zmc2V06YKj5LiA5Yi755qE5Zue6LCDXHJcblx0XHRvbk1vdmluZzogbnVsbCwgLy8g5LiL5ouJ6L+H56iL5Lit55qE5Zue6LCDLOa7keWKqOi/h+eoi+S4gOebtOWcqOaJp+ihjDsgcmF0ZeS4i+aLieWMuuWfn+W9k+WJjemrmOW6puS4juaMh+Wumui3neemu+eahOavlOWAvChpbk9mZnNldDogcmF0ZTwxOyBvdXRPZmZzZXQ6IHJhdGU+PTEpOyBkb3duSGlnaHTlvZPliY3kuIvmi4nljLrln5/nmoTpq5jluqZcclxuXHRcdGJlZm9yZUxvYWRpbmc6IG51bGwsIC8vIOWHhuWkh+inpuWPkeS4i+aLieWIt+aWsOeahOWbnuiwgzog5aaC5p6ccmV0dXJuIHRydWUs5bCG5LiN6Kem5Y+Rc2hvd0xvYWRpbmflkoxjYWxsYmFja+Wbnuiwgzsg5bi455So5p2l5a6M5YWo6Ieq5a6a5LmJ5LiL5ouJ5Yi35pawLCDlj4LogIPmoYjkvovjgJDmt5jlrp0gdjYuOC4w44CRXHJcblx0XHRzaG93TG9hZGluZzogbnVsbCwgLy8g5pi+56S65LiL5ouJ5Yi35paw6L+b5bqm55qE5Zue6LCDXHJcblx0XHRhZnRlckxvYWRpbmc6IG51bGwsIC8vIOWHhuWkh+e7k+adn+S4i+aLieeahOWbnuiwgy4g6L+U5Zue57uT5p2f5LiL5ouJ55qE5bu25pe25omn6KGM5pe26Ze0LOm7mOiupDBtczsg5bi455So5LqO57uT5p2f5LiL5ouJ5LmL5YmN5YaN5pi+56S65Y+m5aSW5LiA5bCP5q615Yqo55S7LOaJjeWOu+makOiXj+S4i+aLieWIt+aWsOeahOWcuuaZrywg5Y+C6ICD5qGI5L6L44CQZG90SnVtcOOAkVxyXG5cdFx0ZW5kRG93blNjcm9sbDogbnVsbCwgLy8g57uT5p2f5LiL5ouJ5Yi35paw55qE5Zue6LCDXHJcblx0XHRjYWxsYmFjazogZnVuY3Rpb24obWVzY3JvbGwpIHtcclxuXHRcdFx0Ly8g5LiL5ouJ5Yi35paw55qE5Zue6LCDO+m7mOiupOmHjee9ruS4iuaLieWKoOi9veWIl+ihqOS4uuesrOS4gOmhtVxyXG5cdFx0XHRtZXNjcm9sbC5yZXNldFVwU2Nyb2xsKCk7XHJcblx0XHR9XHJcblx0fSlcclxufVxyXG5cclxuLyog6YWN572u5Y+C5pWwOuS4iuaLieWKoOi9vSAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZXh0ZW5kVXBTY3JvbGwgPSBmdW5jdGlvbihvcHRVcCkge1xyXG5cdC8vIOS4iuaLieWKoOi9veeahOmFjee9rlxyXG5cdE1lU2Nyb2xsLmV4dGVuZChvcHRVcCwge1xyXG5cdFx0dXNlOiB0cnVlLCAvLyDmmK/lkKblkK/nlKjkuIrmi4nliqDovb07IOm7mOiupHRydWVcclxuXHRcdGF1dG86IHRydWUsIC8vIOaYr+WQpuWcqOWIneWni+WMluWujOavleS5i+WQjuiHquWKqOaJp+ihjOS4iuaLieWKoOi9veeahOWbnuiwgzsg6buY6K6kdHJ1ZVxyXG5cdFx0aXNMb2NrOiBmYWxzZSwgLy8g5piv5ZCm6ZSB5a6a5LiK5ouJ5Yqg6L29LOm7mOiupGZhbHNlO1xyXG5cdFx0aXNCb3RoOiB0cnVlLCAvLyDkuIrmi4nliqDovb3ml7Ys5aaC5p6c5ruR5Yqo5Yiw5YiX6KGo6aG26YOo5piv5ZCm5Y+v5Lul5ZCM5pe26Kem5Y+R5LiL5ouJ5Yi35pawO+m7mOiupHRydWUs5Lik6ICF5Y+v5ZCM5pe26Kem5Y+RO1xyXG5cdFx0aXNCb3VuY2U6IGZhbHNlLCAvLyDpu5jorqTnpoHmraLmqaHnmq7nrYvnmoTlm57lvLnmlYjmnpwsIOW/heivu+S6i+mhuTogaHR0cDovL3d3dy5tZXNjcm9sbC5jb20vcWEuaHRtbD92PTE5MDcyNSNxMjVcclxuXHRcdGNhbGxiYWNrOiBudWxsLCAvLyDkuIrmi4nliqDovb3nmoTlm57osIM7ZnVuY3Rpb24ocGFnZSxtZXNjcm9sbCl7IH1cclxuXHRcdHBhZ2U6IHtcclxuXHRcdFx0bnVtOiAwLCAvLyDlvZPliY3pobXnoIEs6buY6K6kMCzlm57osIPkuYvliY3kvJrliqAxLOWNs2NhbGxiYWNrKHBhZ2Up5Lya5LuOMeW8gOWni1xyXG5cdFx0XHRzaXplOiAxMCwgLy8g5q+P6aG15pWw5o2u55qE5pWw6YePXHJcblx0XHRcdHRpbWU6IG51bGwgLy8g5Yqg6L2956ys5LiA6aG15pWw5o2u5pyN5Yqh5Zmo6L+U5Zue55qE5pe26Ze0OyDpmLLmraLnlKjmiLfnv7vpobXml7Ys5ZCO5Y+w5paw5aKe5LqG5pWw5o2u5LuO6ICM5a+86Ie05LiL5LiA6aG15pWw5o2u6YeN5aSNO1xyXG5cdFx0fSxcclxuXHRcdG5vTW9yZVNpemU6IDUsIC8vIOWmguaenOWIl+ihqOW3suaXoOaVsOaNrizlj6/orr7nva7liJfooajnmoTmgLvmlbDph4/opoHlpKfkuo7nrYnkuo415p2h5omN5pi+56S65peg5pu05aSa5pWw5o2uO+mBv+WFjeWIl+ihqOaVsOaNrui/h+WwkSjmr5TlpoLlj6rmnInkuIDmnaHmlbDmja4pLOaYvuekuuaXoOabtOWkmuaVsOaNruS8muS4jeWlveeci1xyXG5cdFx0b2Zmc2V0OiA4MCwgLy8g6Led5bqV6YOo5aSa6L+c5pe2LOinpuWPkXVwQ2FsbGJhY2tcclxuXHRcdHRleHRMb2FkaW5nOiAn5Yqg6L295LitIC4uLicsIC8vIOWKoOi9veS4reeahOaPkOekuuaWh+acrFxyXG5cdFx0dGV4dE5vTW9yZTogJ+ayoeacieabtOWkmuS6hicsIC8vIOayoeacieabtOWkmuaVsOaNrueahOaPkOekuuaWh+acrFxyXG5cdFx0YmdDb2xvcjogXCJ0cmFuc3BhcmVudFwiLCAvLyDog4zmma/popzoibIgKOW7uuiuruWcqHBhZ2VzLmpzb27kuK3lho3orr7nva7kuIDkuItiYWNrZ3JvdW5kQ29sb3JCb3R0b20pXHJcblx0XHR0ZXh0Q29sb3I6IFwiZ3JheVwiLCAvLyDmlofmnKzpopzoibIgKOW9k2JnQ29sb3LphY3nva7kuobpopzoibIs6ICMdGV4dENvbG9y5pyq6YWN572u5pe2LOWImXRleHRDb2xvcuS8mum7mOiupOS4uueZveiJsilcclxuXHRcdGluaXRlZDogbnVsbCwgLy8g5Yid5aeL5YyW5a6M5q+V55qE5Zue6LCDXHJcblx0XHRzaG93TG9hZGluZzogbnVsbCwgLy8g5pi+56S65Yqg6L295Lit55qE5Zue6LCDXHJcblx0XHRzaG93Tm9Nb3JlOiBudWxsLCAvLyDmmL7npLrml6Dmm7TlpJrmlbDmja7nmoTlm57osINcclxuXHRcdGhpZGVVcFNjcm9sbDogbnVsbCwgLy8g6ZqQ6JeP5LiK5ouJ5Yqg6L2955qE5Zue6LCDXHJcblx0XHRlcnJEaXN0YW5jZTogNjAsIC8vIGVuZEVycueahOaXtuWAmemcgOW+gOS4iua7keWKqOS4gOautei3neemuyzkvb/lhbblvoDkuIvmu5Hliqjml7blho3mrKHop6blj5FvblJlYWNoQm90dG9tLOS7hW1lc2Nyb2xsLWJvZHnnlJ/mlYhcclxuXHRcdHRvVG9wOiB7XHJcblx0XHRcdC8vIOWbnuWIsOmhtumDqOaMiemSrizpnIDphY3nva5zcmPmiY3mmL7npLpcclxuXHRcdFx0c3JjOiBudWxsLCAvLyDlm77niYfot6/lvoQs6buY6K6kbnVsbCAo57ud5a+56Lev5b6E5oiW572R57uc5Zu+KVxyXG5cdFx0XHRvZmZzZXQ6IDEwMDAsIC8vIOWIl+ihqOa7muWKqOWkmuWwkei3neemu+aJjeaYvuekuuWbnuWIsOmhtumDqOaMiemSrizpu5jorqQxMDAwXHJcblx0XHRcdGR1cmF0aW9uOiAzMDAsIC8vIOWbnuWIsOmhtumDqOeahOWKqOeUu+aXtumVvyzpu5jorqQzMDBtcyAo5b2T5YC85Li6MOaIljMwMOWImeS9v+eUqOezu+e7n+iHquW4puWbnuWIsOmhtumDqCzmm7TmtYHnlYU7IOWFtuS7luWAvOWImemAmui/h3N0ZXDmqKHmi58s6YOo5YiG5py65Z6L5Y+v6IO95LiN5aSf5rWB55WFLOaJgOS7pemdnueJueauiuaDheWGteS4jeW7uuiuruS/ruaUueatpOmhuSlcclxuXHRcdFx0YnRuQ2xpY2s6IG51bGwsIC8vIOeCueWHu+aMiemSrueahOWbnuiwg1xyXG5cdFx0XHRvblNob3c6IG51bGwsIC8vIOaYr+WQpuaYvuekuueahOWbnuiwg1xyXG5cdFx0XHR6SW5kZXg6IDk5OTAsIC8vIGZpeGVk5a6a5L2Nei1pbmRleOWAvFxyXG5cdFx0XHRsZWZ0OiBudWxsLCAvLyDliLDlt6bovrnnmoTot53nprssIOm7mOiupG51bGwuIOatpOmhueacieWAvOaXtixyaWdodOS4jeeUn+aViC4gKOaUr+aMgTIwLCBcIjIwcnB4XCIsIFwiMjBweFwiLCBcIjIwJVwi5qC85byP55qE5YC8LCDlhbbkuK3nuq/mlbDlrZfliJnpu5jorqTljZXkvY1ycHgpXHJcblx0XHRcdHJpZ2h0OiAyMCwgLy8g5Yiw5Y+z6L6555qE6Led56a7LCDpu5jorqQyMCAo5pSv5oyBMjAsIFwiMjBycHhcIiwgXCIyMHB4XCIsIFwiMjAlXCLmoLzlvI/nmoTlgLwsIOWFtuS4ree6r+aVsOWtl+WImem7mOiupOWNleS9jXJweClcclxuXHRcdFx0Ym90dG9tOiAxMjAsIC8vIOWIsOW6lemDqOeahOi3neemuywg6buY6K6kMTIwICjmlK/mjIEyMCwgXCIyMHJweFwiLCBcIjIwcHhcIiwgXCIyMCVcIuagvOW8j+eahOWAvCwg5YW25Lit57qv5pWw5a2X5YiZ6buY6K6k5Y2V5L2NcnB4KVxyXG5cdFx0XHRzYWZlYXJlYTogZmFsc2UsIC8vIGJvdHRvbeeahOWBj+enu+mHj+aYr+WQpuWKoOS4iuW6lemDqOWuieWFqOWMuueahOi3neemuywg6buY6K6kZmFsc2UsIOmcgOimgemAgumFjWlQaG9uZVjml7bkvb/nlKggKOWFt+S9k+eahOeVjOmdouWmguaenOS4jemFjee9ruatpOmhuSzliJnlj5bmnKx2dWXnmoRzYWZlYXJlYeWAvClcclxuXHRcdFx0d2lkdGg6IDcyLCAvLyDlm57liLDpobbpg6jlm77moIfnmoTlrr3luqYsIOm7mOiupDcyICjmlK/mjIEyMCwgXCIyMHJweFwiLCBcIjIwcHhcIiwgXCIyMCVcIuagvOW8j+eahOWAvCwg5YW25Lit57qv5pWw5a2X5YiZ6buY6K6k5Y2V5L2NcnB4KVxyXG5cdFx0XHRyYWRpdXM6IFwiNTAlXCIgLy8g5ZyG6KeSLCDpu5jorqRcIjUwJVwiICjmlK/mjIEyMCwgXCIyMHJweFwiLCBcIjIwcHhcIiwgXCIyMCVcIuagvOW8j+eahOWAvCwg5YW25Lit57qv5pWw5a2X5YiZ6buY6K6k5Y2V5L2NcnB4KVxyXG5cdFx0fSxcclxuXHRcdGVtcHR5OiB7XHJcblx0XHRcdHVzZTogdHJ1ZSwgLy8g5piv5ZCm5pi+56S656m65biD5bGAXHJcblx0XHRcdGljb246IG51bGwsIC8vIOWbvuagh+i3r+W+hFxyXG5cdFx0XHR0aXA6ICd+IOaaguaXoOebuOWFs+aVsOaNriB+JywgLy8g5o+Q56S6XHJcblx0XHRcdGJ0blRleHQ6ICcnLCAvLyDmjInpkq5cclxuXHRcdFx0YnRuQ2xpY2s6IG51bGwsIC8vIOeCueWHu+aMiemSrueahOWbnuiwg1xyXG5cdFx0XHRvblNob3c6IG51bGwsIC8vIOaYr+WQpuaYvuekuueahOWbnuiwg1xyXG5cdFx0XHRmaXhlZDogZmFsc2UsIC8vIOaYr+WQpuS9v+eUqGZpeGVk5a6a5L2NLOm7mOiupGZhbHNlOyDphY3nva5maXhlZOS4unRydWUs5Lul5LiL55qEdG9w5ZKMekluZGV45omN55Sf5pWIICh0cmFuc2Zvcm3kvJrkvb9maXhlZOWkseaViCzmnIDnu4jkvJrpmY3nuqfkuLphYnNvbHV0ZSlcclxuXHRcdFx0dG9wOiBcIjEwMHJweFwiLCAvLyBmaXhlZOWumuS9jeeahHRvcOWAvCAo5a6M5pW055qE5Y2V5L2N5YC8LOWmgiBcIjEwJVwiOyBcIjEwMHJweFwiKVxyXG5cdFx0XHR6SW5kZXg6IDk5IC8vIGZpeGVk5a6a5L2Nei1pbmRleOWAvFxyXG5cdFx0fSxcclxuXHRcdG9uU2Nyb2xsOiBmYWxzZSAvLyDmmK/lkKbnm5HlkKzmu5rliqjkuovku7ZcclxuXHR9KVxyXG59XHJcblxyXG4vKiDphY3nva7lj4LmlbAgKi9cclxuTWVTY3JvbGwuZXh0ZW5kID0gZnVuY3Rpb24odXNlck9wdGlvbiwgZGVmYXVsdE9wdGlvbikge1xyXG5cdGlmICghdXNlck9wdGlvbikgcmV0dXJuIGRlZmF1bHRPcHRpb247XHJcblx0Zm9yIChsZXQga2V5IGluIGRlZmF1bHRPcHRpb24pIHtcclxuXHRcdGlmICh1c2VyT3B0aW9uW2tleV0gPT0gbnVsbCkge1xyXG5cdFx0XHRsZXQgZGVmID0gZGVmYXVsdE9wdGlvbltrZXldO1xyXG5cdFx0XHRpZiAoZGVmICE9IG51bGwgJiYgdHlwZW9mIGRlZiA9PT0gJ29iamVjdCcpIHtcclxuXHRcdFx0XHR1c2VyT3B0aW9uW2tleV0gPSBNZVNjcm9sbC5leHRlbmQoe30sIGRlZik7IC8vIOa3seW6puWMuemFjVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHVzZXJPcHRpb25ba2V5XSA9IGRlZjtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgdXNlck9wdGlvbltrZXldID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRNZVNjcm9sbC5leHRlbmQodXNlck9wdGlvbltrZXldLCBkZWZhdWx0T3B0aW9uW2tleV0pOyAvLyDmt7HluqbljLnphY1cclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIHVzZXJPcHRpb247XHJcbn1cclxuXHJcbi8qIOeugOWNleWIpOaWreaYr+WQpumFjee9ruS6huminOiJsiAo6Z2e6YCP5piOLOmdnueZveiJsikgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLmhhc0NvbG9yID0gZnVuY3Rpb24oY29sb3IpIHtcclxuXHRpZiAoIWNvbG9yKSByZXR1cm4gZmFsc2U7XHJcblx0bGV0IGMgPSBjb2xvci50b0xvd2VyQ2FzZSgpO1xyXG5cdHJldHVybiBjICE9IFwiI2ZmZlwiICYmIGMgIT0gXCIjZmZmZmZmXCIgJiYgYyAhPSBcInRyYW5zcGFyZW50XCIgJiYgYyAhPSBcIndoaXRlXCJcclxufVxyXG5cclxuLyogLS0tLS0tLeWIneWni+WMluS4i+aLieWIt+aWsC0tLS0tLS0gKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLmluaXREb3duU2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcblx0bGV0IG1lID0gdGhpcztcclxuXHQvLyDphY3nva7lj4LmlbBcclxuXHRtZS5vcHREb3duID0gbWUub3B0aW9ucy5kb3duIHx8IHt9O1xyXG5cdGlmICghbWUub3B0RG93bi50ZXh0Q29sb3IgJiYgbWUuaGFzQ29sb3IobWUub3B0RG93bi5iZ0NvbG9yKSkgbWUub3B0RG93bi50ZXh0Q29sb3IgPSBcIiNmZmZcIjsgLy8g5b2TYmdDb2xvcuacieWAvOS4lHRleHRDb2xvcuacquiuvue9rizliJl0ZXh0Q29sb3Lpu5jorqTnmb3oibJcclxuXHRtZS5leHRlbmREb3duU2Nyb2xsKG1lLm9wdERvd24pO1xyXG5cclxuXHQvLyDlpoLmnpzmmK9tZXNjcm9sbC1ib2R55LiU6YWN572u5LqGbmF0aXZlLOWImeemgeatouiHquWumuS5ieeahOS4i+aLieWIt+aWsFxyXG5cdGlmIChtZS5pc1Njcm9sbEJvZHkgJiYgbWUub3B0RG93bi5uYXRpdmUpIHtcclxuXHRcdG1lLm9wdERvd24udXNlID0gZmFsc2VcclxuXHR9IGVsc2Uge1xyXG5cdFx0bWUub3B0RG93bi5uYXRpdmUgPSBmYWxzZSAvLyDku4VtZXNjcm9sbC1ib2R55pSv5oyBLG1lc2Nyb2xsLXVuaeS4jeaUr+aMgVxyXG5cdH1cclxuXHJcblx0bWUuZG93bkhpZ2h0ID0gMDsgLy8g5LiL5ouJ5Yy65Z+f55qE6auY5bqmXHJcblxyXG5cdC8vIOWcqOmhtemdouS4reWKoOWFpeS4i+aLieW4g+WxgFxyXG5cdGlmIChtZS5vcHREb3duLnVzZSAmJiBtZS5vcHREb3duLmluaXRlZCkge1xyXG5cdFx0Ly8g5Yid5aeL5YyW5a6M5q+V55qE5Zue6LCDXHJcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyAvLyDlvoXkuLvnur/nqIvmiafooYzlrozmr5Xlho3miafooYws6YG/5YWNbmV3IE1lU2Nyb2xs5pyq5Yid5aeL5YyWLOWcqOWbnuiwg+iOt+WPluS4jeWIsG1lc2Nyb2xs55qE5a6e5L6LXHJcblx0XHRcdG1lLm9wdERvd24uaW5pdGVkKG1lKTtcclxuXHRcdH0sIDApXHJcblx0fVxyXG59XHJcblxyXG4vKiDliJfooah0b3VjaHN0YXJ05LqL5Lu2ICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS50b3VjaHN0YXJ0RXZlbnQgPSBmdW5jdGlvbihlKSB7XHJcblx0aWYgKCF0aGlzLm9wdERvd24udXNlKSByZXR1cm47XHJcblxyXG5cdHRoaXMuc3RhcnRQb2ludCA9IHRoaXMuZ2V0UG9pbnQoZSk7IC8vIOiusOW9lei1t+eCuVxyXG5cdHRoaXMuc3RhcnRUb3AgPSB0aGlzLmdldFNjcm9sbFRvcCgpOyAvLyDorrDlvZXmraTml7bnmoTmu5rliqjmnaHkvY3nva5cclxuXHR0aGlzLmxhc3RQb2ludCA9IHRoaXMuc3RhcnRQb2ludDsgLy8g6YeN572u5LiK5qyhbW92ZeeahOeCuVxyXG5cdHRoaXMubWF4VG91Y2htb3ZlWSA9IHRoaXMuZ2V0Qm9keUhlaWdodCgpIC0gdGhpcy5vcHREb3duLmJvdHRvbU9mZnNldDsgLy8g5omL5oyH6Kem5pG455qE5pyA5aSn6IyD5Zu0KOWGmeWcqHRvdWNoc3RhcnTpgb/lhY1ib2R56I635Y+W6auY5bqm5Li6MOeahOaDheWGtSlcclxuXHR0aGlzLmluVG91Y2hlbmQgPSBmYWxzZTsgLy8g5qCH6K6w5LiN5pivdG91Y2hlbmRcclxufVxyXG5cclxuLyog5YiX6KGodG91Y2htb3Zl5LqL5Lu2ICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS50b3VjaG1vdmVFdmVudCA9IGZ1bmN0aW9uKGUpIHtcclxuXHJcblxyXG5cclxuXHJcblx0aWYgKCF0aGlzLm9wdERvd24udXNlKSByZXR1cm47XHJcblx0aWYgKCF0aGlzLnN0YXJ0UG9pbnQpIHJldHVybjtcclxuXHRsZXQgbWUgPSB0aGlzO1xyXG5cclxuXHQvLyDoioLmtYFcclxuXHRsZXQgdCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cdGlmIChtZS5tb3ZlVGltZSAmJiB0IC0gbWUubW92ZVRpbWUgPCBtZS5tb3ZlVGltZURpZmYpIHsgLy8g5bCP5LqO6IqC5rWB5pe26Ze0LOWImeS4jeWkhOeQhlxyXG5cdFx0cmV0dXJuO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRtZS5tb3ZlVGltZSA9IHRcclxuXHRcdGlmICghbWUubW92ZVRpbWVEaWZmKSBtZS5tb3ZlVGltZURpZmYgPSAxMDAwIC8gbWUub3B0RG93bi5mcHNcclxuXHR9XHJcblxyXG5cdGxldCBzY3JvbGxUb3AgPSBtZS5nZXRTY3JvbGxUb3AoKTsgLy8g5b2T5YmN5rua5Yqo5p2h55qE6Led56a7XHJcblx0bGV0IGN1clBvaW50ID0gbWUuZ2V0UG9pbnQoZSk7IC8vIOW9k+WJjeeCuVxyXG5cclxuXHRsZXQgbW92ZVkgPSBjdXJQb2ludC55IC0gbWUuc3RhcnRQb2ludC55OyAvLyDlkozotbfngrnmr5Qs56e75Yqo55qE6Led56a7LOWkp+S6jjDlkJHkuIvmi4ks5bCP5LqOMOWQkeS4iuaLiVxyXG5cclxuXHQvLyDlkJHkuIvmi4kgJiYg5Zyo6aG26YOoXHJcblx0Ly8gbWVzY3JvbGwtYm9keSznm7TmjqXliKTlrprlnKjpobbpg6jljbPlj69cclxuXHQvLyBzY3JvbGwtdmlld+WcqOa7muWKqOaXtuS4jeS8muinpuWPkXRvdWNobW92ZSzlvZPop6bpobYv5bqVL+W3pi/lj7Pml7Ys5omN5Lya6Kem5Y+RdG91Y2htb3ZlXHJcblx0Ly8gc2Nyb2xsLXZpZXfmu5rliqjliLDpobbpg6jml7Ysc2Nyb2xsVG9w5LiN5LiA5a6a5Li6MDsg5ZyoaU9T55qEQVBQ5Litc2Nyb2xsVG9w5Y+v6IO95Li66LSf5pWwLOS4jeS4gOWumuWSjHN0YXJ0VG9w55u4562JXHJcblx0aWYgKG1vdmVZID4gMCAmJiAoXHJcblx0XHRcdChtZS5pc1Njcm9sbEJvZHkgJiYgc2Nyb2xsVG9wIDw9IDApIHx8XHJcblx0XHRcdCghbWUuaXNTY3JvbGxCb2R5ICYmIChzY3JvbGxUb3AgPD0gMCB8fCAoc2Nyb2xsVG9wIDw9IG1lLm9wdERvd24uc3RhcnRUb3AgJiYgc2Nyb2xsVG9wID09PSBtZS5zdGFydFRvcCkpKVxyXG5cdFx0KSkge1xyXG5cdFx0Ly8g5Y+v5LiL5ouJ55qE5p2h5Lu2XHJcblx0XHRpZiAoIW1lLmluVG91Y2hlbmQgJiYgIW1lLmlzRG93blNjcm9sbGluZyAmJiAhbWUub3B0RG93bi5pc0xvY2sgJiYgKCFtZS5pc1VwU2Nyb2xsaW5nIHx8IChtZS5pc1VwU2Nyb2xsaW5nICYmXHJcblx0XHRcdFx0bWUub3B0VXAuaXNCb3RoKSkpIHtcclxuXHJcblx0XHRcdC8vIOS4i+aLieeahOinkuW6puaYr+WQpuWcqOmFjee9rueahOiMg+WbtOWGhVxyXG5cdFx0XHRsZXQgYW5nbGUgPSBtZS5nZXRBbmdsZShtZS5sYXN0UG9pbnQsIGN1clBvaW50KTsgLy8g5Lik54K55LmL6Ze055qE6KeS5bqmLOWMuumXtCBbMCw5MF1cclxuXHRcdFx0aWYgKGFuZ2xlIDwgbWUub3B0RG93bi5taW5BbmdsZSkgcmV0dXJuOyAvLyDlpoLmnpzlsI/kuo7phY3nva7nmoTop5LluqYs5YiZ5LiN5b6A5LiL5omn6KGM5LiL5ouJ5Yi35pawXHJcblxyXG5cdFx0XHQvLyDlpoLmnpzmiYvmjIfnmoTkvY3nva7otoXov4fphY3nva7nmoTot53nprss5YiZ5o+Q5YmN57uT5p2f5LiL5ouJLOmBv+WFjVdlYnZpZXfltYzlpZflr7zoh7R0b3VjaGVuZOaXoOazleinpuWPkVxyXG5cdFx0XHRpZiAobWUubWF4VG91Y2htb3ZlWSA+IDAgJiYgY3VyUG9pbnQueSA+PSBtZS5tYXhUb3VjaG1vdmVZKSB7XHJcblx0XHRcdFx0bWUuaW5Ub3VjaGVuZCA9IHRydWU7IC8vIOagh+iusOaJp+ihjHRvdWNoZW5kXHJcblx0XHRcdFx0bWUudG91Y2hlbmRFdmVudCgpOyAvLyDmj5DliY3op6blj5F0b3VjaGVuZFxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHJcblxyXG5cclxuXHRcdFx0bWUucHJldmVudERlZmF1bHQoZSk7IC8vIOmYu+atoum7mOiupOS6i+S7tlxyXG5cclxuXHRcdFx0bGV0IGRpZmYgPSBjdXJQb2ludC55IC0gbWUubGFzdFBvaW50Lnk7IC8vIOWSjOS4iuasoeavlCznp7vliqjnmoTot53nprsgKOWkp+S6jjDlkJHkuIss5bCP5LqOMOWQkeS4iilcclxuXHJcblx0XHRcdC8vIOS4i+aLiei3neemuyAgPCDmjIflrprot53nprtcclxuXHRcdFx0aWYgKG1lLmRvd25IaWdodCA8IG1lLm9wdERvd24ub2Zmc2V0KSB7XHJcblx0XHRcdFx0aWYgKG1lLm1vdmV0eXBlICE9PSAxKSB7XHJcblx0XHRcdFx0XHRtZS5tb3ZldHlwZSA9IDE7IC8vIOWKoOWFpeagh+iusCzkv53or4Hlj6rmiafooYzkuIDmrKFcclxuXHRcdFx0XHRcdG1lLm9wdERvd24uaW5PZmZzZXQgJiYgbWUub3B0RG93bi5pbk9mZnNldChtZSk7IC8vIOi/m+WFpeaMh+Wumui3neemu+iMg+WbtOWGhemCo+S4gOWIu+eahOWbnuiwgyzlj6rmiafooYzkuIDmrKFcclxuXHRcdFx0XHRcdG1lLmlzTW92ZURvd24gPSB0cnVlOyAvLyDmoIforrDkuIvmi4nljLrln5/pq5jluqbmlLnlj5gs5ZyodG91Y2hlbmTph43nva7lm57mnaVcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bWUuZG93bkhpZ2h0ICs9IGRpZmYgKiBtZS5vcHREb3duLmluT2Zmc2V0UmF0ZTsgLy8g6LaK5b6A5LiLLOmrmOW6puWPmOWMlui2iuWwj1xyXG5cclxuXHRcdFx0XHQvLyDmjIflrprot53nprsgIDw9IOS4i+aLiei3neemu1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGlmIChtZS5tb3ZldHlwZSAhPT0gMikge1xyXG5cdFx0XHRcdFx0bWUubW92ZXR5cGUgPSAyOyAvLyDliqDlhaXmoIforrAs5L+d6K+B5Y+q5omn6KGM5LiA5qyhXHJcblx0XHRcdFx0XHRtZS5vcHREb3duLm91dE9mZnNldCAmJiBtZS5vcHREb3duLm91dE9mZnNldChtZSk7IC8vIOS4i+aLiei2hei/h+aMh+Wumui3neemu+mCo+S4gOWIu+eahOWbnuiwgyzlj6rmiafooYzkuIDmrKFcclxuXHRcdFx0XHRcdG1lLmlzTW92ZURvd24gPSB0cnVlOyAvLyDmoIforrDkuIvmi4nljLrln5/pq5jluqbmlLnlj5gs5ZyodG91Y2hlbmTph43nva7lm57mnaVcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGRpZmYgPiAwKSB7IC8vIOWQkeS4i+aLiVxyXG5cdFx0XHRcdFx0bWUuZG93bkhpZ2h0ICs9IE1hdGgucm91bmQoZGlmZiAqIG1lLm9wdERvd24ub3V0T2Zmc2V0UmF0ZSk7IC8vIOi2iuW+gOS4iyzpq5jluqblj5jljJbotorlsI9cclxuXHRcdFx0XHR9IGVsc2UgeyAvLyDlkJHkuIrmlLZcclxuXHRcdFx0XHRcdG1lLmRvd25IaWdodCArPSBkaWZmOyAvLyDlkJHkuIrmlLblm57pq5jluqYs5YiZ5ZCR5LiK5ruR5aSa5bCR5pS25aSa5bCR6auY5bqmXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsZXQgcmF0ZSA9IG1lLmRvd25IaWdodCAvIG1lLm9wdERvd24ub2Zmc2V0OyAvLyDkuIvmi4nljLrln5/lvZPliY3pq5jluqbkuI7mjIflrprot53nprvnmoTmr5TlgLxcclxuXHRcdFx0bWUub3B0RG93bi5vbk1vdmluZyAmJiBtZS5vcHREb3duLm9uTW92aW5nKG1lLCByYXRlLCBtZS5kb3duSGlnaHQpOyAvLyDkuIvmi4nov4fnqIvkuK3nmoTlm57osIMs5LiA55u05Zyo5omn6KGMXHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRtZS5sYXN0UG9pbnQgPSBjdXJQb2ludDsgLy8g6K6w5b2V5pys5qyh56e75Yqo55qE54K5XHJcbn1cclxuXHJcbi8qIOWIl+ihqHRvdWNoZW5k5LqL5Lu2ICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS50b3VjaGVuZEV2ZW50ID0gZnVuY3Rpb24oZSkge1xyXG5cdGlmICghdGhpcy5vcHREb3duLnVzZSkgcmV0dXJuO1xyXG5cdC8vIOWmguaenOS4i+aLieWMuuWfn+mrmOW6puW3suaUueWPmCzliJnpnIDph43nva7lm57mnaVcclxuXHRpZiAodGhpcy5pc01vdmVEb3duKSB7XHJcblx0XHRpZiAodGhpcy5kb3duSGlnaHQgPj0gdGhpcy5vcHREb3duLm9mZnNldCkge1xyXG5cdFx0XHQvLyDnrKblkIjop6blj5HliLfmlrDnmoTmnaHku7ZcclxuXHRcdFx0dGhpcy50cmlnZ2VyRG93blNjcm9sbCgpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8g5LiN56ym5ZCI55qE6K+dIOWImemHjee9rlxyXG5cdFx0XHR0aGlzLmRvd25IaWdodCA9IDA7XHJcblx0XHRcdHRoaXMub3B0RG93bi5lbmREb3duU2Nyb2xsICYmIHRoaXMub3B0RG93bi5lbmREb3duU2Nyb2xsKHRoaXMpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5tb3ZldHlwZSA9IDA7XHJcblx0XHR0aGlzLmlzTW92ZURvd24gPSBmYWxzZTtcclxuXHR9IGVsc2UgaWYgKCF0aGlzLmlzU2Nyb2xsQm9keSAmJiB0aGlzLmdldFNjcm9sbFRvcCgpID09PSB0aGlzLnN0YXJ0VG9wKSB7IC8vIHNjcm9sbC12aWV35Yiw6aG2L+W3pi/lj7Mv5bqV55qE5ruR5Yqo5LqL5Lu2XHJcblx0XHRsZXQgaXNTY3JvbGxVcCA9IHRoaXMuZ2V0UG9pbnQoZSkueSAtIHRoaXMuc3RhcnRQb2ludC55IDwgMDsgLy8g5ZKM6LW354K55q+ULOenu+WKqOeahOi3neemuyzlpKfkuo4w5ZCR5LiL5ouJLOWwj+S6jjDlkJHkuIrmi4lcclxuXHRcdC8vIOS4iua7kVxyXG5cdFx0aWYgKGlzU2Nyb2xsVXApIHtcclxuXHRcdFx0Ly8g6ZyA5qOA5p+l5ruR5Yqo55qE6KeS5bqmXHJcblx0XHRcdGxldCBhbmdsZSA9IHRoaXMuZ2V0QW5nbGUodGhpcy5nZXRQb2ludChlKSwgdGhpcy5zdGFydFBvaW50KTsgLy8g5Lik54K55LmL6Ze055qE6KeS5bqmLOWMuumXtCBbMCw5MF1cclxuXHRcdFx0aWYgKGFuZ2xlID4gODApIHtcclxuXHRcdFx0XHQvLyDmo4Dmn6Xlubbop6blj5HkuIrmi4lcclxuXHRcdFx0XHR0aGlzLnRyaWdnZXJVcFNjcm9sbCh0cnVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuLyog5qC55o2u54K55Ye75ruR5Yqo5LqL5Lu26I635Y+W56ys5LiA5Liq5omL5oyH55qE5Z2Q5qCHICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uKGUpIHtcclxuXHRpZiAoIWUpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHg6IDAsXHJcblx0XHRcdHk6IDBcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKGUudG91Y2hlcyAmJiBlLnRvdWNoZXNbMF0pIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHg6IGUudG91Y2hlc1swXS5wYWdlWCxcclxuXHRcdFx0eTogZS50b3VjaGVzWzBdLnBhZ2VZXHJcblx0XHR9XHJcblx0fSBlbHNlIGlmIChlLmNoYW5nZWRUb3VjaGVzICYmIGUuY2hhbmdlZFRvdWNoZXNbMF0pIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHg6IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVgsXHJcblx0XHRcdHk6IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVlcclxuXHRcdH1cclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0eDogZS5jbGllbnRYLFxyXG5cdFx0XHR5OiBlLmNsaWVudFlcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbi8qIOiuoeeul+S4pOeCueS5i+mXtOeahOinkuW6pjog5Yy66Ze0IFswLDkwXSovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5nZXRBbmdsZSA9IGZ1bmN0aW9uKHAxLCBwMikge1xyXG5cdGxldCB4ID0gTWF0aC5hYnMocDEueCAtIHAyLngpO1xyXG5cdGxldCB5ID0gTWF0aC5hYnMocDEueSAtIHAyLnkpO1xyXG5cdGxldCB6ID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xyXG5cdGxldCBhbmdsZSA9IDA7XHJcblx0aWYgKHogIT09IDApIHtcclxuXHRcdGFuZ2xlID0gTWF0aC5hc2luKHkgLyB6KSAvIE1hdGguUEkgKiAxODA7XHJcblx0fVxyXG5cdHJldHVybiBhbmdsZVxyXG59XHJcblxyXG4vKiDop6blj5HkuIvmi4nliLfmlrAgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnRyaWdnZXJEb3duU2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcblx0aWYgKHRoaXMub3B0RG93bi5iZWZvcmVMb2FkaW5nICYmIHRoaXMub3B0RG93bi5iZWZvcmVMb2FkaW5nKHRoaXMpKSB7XHJcblx0XHQvL3JldHVybiB0cnVl5YiZ5aSE5LqO5a6M5YWo6Ieq5a6a5LmJ54q25oCBXHJcblx0fSBlbHNlIHtcclxuXHRcdHRoaXMuc2hvd0Rvd25TY3JvbGwoKTsgLy8g5LiL5ouJ5Yi35paw5LitLi4uXHJcblx0XHR0aGlzLm9wdERvd24uY2FsbGJhY2sgJiYgdGhpcy5vcHREb3duLmNhbGxiYWNrKHRoaXMpOyAvLyDmiafooYzlm57osIMs6IGU572R5Yqg6L295pWw5o2uXHJcblx0fVxyXG59XHJcblxyXG4vKiDmmL7npLrkuIvmi4nov5vluqbluIPlsYAgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnNob3dEb3duU2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcblx0dGhpcy5pc0Rvd25TY3JvbGxpbmcgPSB0cnVlOyAvLyDmoIforrDkuIvmi4nkuK1cclxuXHRpZiAodGhpcy5vcHREb3duLm5hdGl2ZSkge1xyXG5cdFx0dW5pLnN0YXJ0UHVsbERvd25SZWZyZXNoKCk7IC8vIOezu+e7n+iHquW4pueahOS4i+aLieWIt+aWsFxyXG5cdFx0dGhpcy5vcHREb3duLnNob3dMb2FkaW5nICYmIHRoaXMub3B0RG93bi5zaG93TG9hZGluZyh0aGlzLCAwKTsgLy8g5LuN6Kem5Y+Rc2hvd0xvYWRpbmcs5Zug5Li65LiK5ouJ5Yqg6L2955So5YiwXHJcblx0fSBlbHNlIHtcclxuXHRcdHRoaXMuZG93bkhpZ2h0ID0gdGhpcy5vcHREb3duLm9mZnNldDsgLy8g5pu05paw5LiL5ouJ5Yy65Z+f6auY5bqmXHJcblx0XHR0aGlzLm9wdERvd24uc2hvd0xvYWRpbmcgJiYgdGhpcy5vcHREb3duLnNob3dMb2FkaW5nKHRoaXMsIHRoaXMuZG93bkhpZ2h0KTsgLy8g5LiL5ouJ5Yi35paw5LitLi4uXHJcblx0fVxyXG59XHJcblxyXG4vKiDmmL7npLrns7vnu5/oh6rluKbnmoTkuIvmi4nliLfmlrDml7bpnIDopoHlpITnkIbnmoTkuJrliqEgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLm9uUHVsbERvd25SZWZyZXNoID0gZnVuY3Rpb24oKSB7XHJcblx0dGhpcy5pc0Rvd25TY3JvbGxpbmcgPSB0cnVlOyAvLyDmoIforrDkuIvmi4nkuK1cclxuXHR0aGlzLm9wdERvd24uc2hvd0xvYWRpbmcgJiYgdGhpcy5vcHREb3duLnNob3dMb2FkaW5nKHRoaXMsIDApOyAvLyDku43op6blj5FzaG93TG9hZGluZyzlm6DkuLrkuIrmi4nliqDovb3nlKjliLBcclxuXHR0aGlzLm9wdERvd24uY2FsbGJhY2sgJiYgdGhpcy5vcHREb3duLmNhbGxiYWNrKHRoaXMpOyAvLyDmiafooYzlm57osIMs6IGU572R5Yqg6L295pWw5o2uXHJcbn1cclxuXHJcbi8qIOe7k+adn+S4i+aLieWIt+aWsCAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZW5kRG93blNjcm9sbCA9IGZ1bmN0aW9uKCkge1xyXG5cdGlmICh0aGlzLm9wdERvd24ubmF0aXZlKSB7IC8vIOe7k+adn+WOn+eUn+S4i+aLieWIt+aWsFxyXG5cdFx0dGhpcy5pc0Rvd25TY3JvbGxpbmcgPSBmYWxzZTtcclxuXHRcdHRoaXMub3B0RG93bi5lbmREb3duU2Nyb2xsICYmIHRoaXMub3B0RG93bi5lbmREb3duU2Nyb2xsKHRoaXMpO1xyXG5cdFx0dW5pLnN0b3BQdWxsRG93blJlZnJlc2goKTtcclxuXHRcdHJldHVyblxyXG5cdH1cclxuXHRsZXQgbWUgPSB0aGlzO1xyXG5cdC8vIOe7k+adn+S4i+aLieWIt+aWsOeahOaWueazlVxyXG5cdGxldCBlbmRTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuXHRcdG1lLmRvd25IaWdodCA9IDA7XHJcblx0XHRtZS5pc0Rvd25TY3JvbGxpbmcgPSBmYWxzZTtcclxuXHRcdG1lLm9wdERvd24uZW5kRG93blNjcm9sbCAmJiBtZS5vcHREb3duLmVuZERvd25TY3JvbGwobWUpO1xyXG5cdFx0IW1lLmlzU2Nyb2xsQm9keSAmJiBtZS5zZXRTY3JvbGxIZWlnaHQoMCkgLy8gc2Nyb2xsLXZpZXfph43nva7mu5rliqjljLrln58s5L2/5pWw5o2u5LiN5ruh5bGP5pe25LuN5Y+v5qOA5p+l6Kem5Y+R57+76aG1XHJcblx0fVxyXG5cdC8vIOe7k+adn+S4i+aLieWIt+aWsOaXtueahOWbnuiwg1xyXG5cdGxldCBkZWxheSA9IDA7XHJcblx0aWYgKG1lLm9wdERvd24uYWZ0ZXJMb2FkaW5nKSBkZWxheSA9IG1lLm9wdERvd24uYWZ0ZXJMb2FkaW5nKG1lKTsgLy8g57uT5p2f5LiL5ouJ5Yi35paw55qE5bu25pe2LOWNleS9jW1zXHJcblx0aWYgKHR5cGVvZiBkZWxheSA9PT0gJ251bWJlcicgJiYgZGVsYXkgPiAwKSB7XHJcblx0XHRzZXRUaW1lb3V0KGVuZFNjcm9sbCwgZGVsYXkpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRlbmRTY3JvbGwoKTtcclxuXHR9XHJcbn1cclxuXHJcbi8qIOmUgeWumuS4i+aLieWIt+aWsDppc0xvY2s9dHVyZSxudWxs6ZSB5a6aO2lzTG9jaz1mYWxzZeino+mUgSAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUubG9ja0Rvd25TY3JvbGwgPSBmdW5jdGlvbihpc0xvY2spIHtcclxuXHRpZiAoaXNMb2NrID09IG51bGwpIGlzTG9jayA9IHRydWU7XHJcblx0dGhpcy5vcHREb3duLmlzTG9jayA9IGlzTG9jaztcclxufVxyXG5cclxuLyog6ZSB5a6a5LiK5ouJ5Yqg6L29OmlzTG9jaz10dXJlLG51bGzplIHlrpo7aXNMb2NrPWZhbHNl6Kej6ZSBICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5sb2NrVXBTY3JvbGwgPSBmdW5jdGlvbihpc0xvY2spIHtcclxuXHRpZiAoaXNMb2NrID09IG51bGwpIGlzTG9jayA9IHRydWU7XHJcblx0dGhpcy5vcHRVcC5pc0xvY2sgPSBpc0xvY2s7XHJcbn1cclxuXHJcbi8qIC0tLS0tLS3liJ3lp4vljJbkuIrmi4nliqDovb0tLS0tLS0tICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5pbml0VXBTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuXHRsZXQgbWUgPSB0aGlzO1xyXG5cdC8vIOmFjee9ruWPguaVsFxyXG5cdG1lLm9wdFVwID0gbWUub3B0aW9ucy51cCB8fCB7XHJcblx0XHR1c2U6IGZhbHNlXHJcblx0fVxyXG5cdGlmICghbWUub3B0VXAudGV4dENvbG9yICYmIG1lLmhhc0NvbG9yKG1lLm9wdFVwLmJnQ29sb3IpKSBtZS5vcHRVcC50ZXh0Q29sb3IgPSBcIiNmZmZcIjsgLy8g5b2TYmdDb2xvcuacieWAvOS4lHRleHRDb2xvcuacquiuvue9rizliJl0ZXh0Q29sb3Lpu5jorqTnmb3oibJcclxuXHRtZS5leHRlbmRVcFNjcm9sbChtZS5vcHRVcCk7XHJcblxyXG5cdGlmICghbWUub3B0VXAuaXNCb3VuY2UpIG1lLnNldEJvdW5jZShmYWxzZSk7IC8vIOS4jeWFgeiuuGJvdW5jZeaXtizpnIDnpoHmraJ3aW5kb3fnmoR0b3VjaG1vdmXkuovku7ZcclxuXHJcblx0aWYgKG1lLm9wdFVwLnVzZSA9PT0gZmFsc2UpIHJldHVybjsgLy8g6YWN572u5LiN5L2/55So5LiK5ouJ5Yqg6L295pe2LOWImeS4jeWIneWni+WMluS4iuaLieW4g+WxgFxyXG5cdG1lLm9wdFVwLmhhc05leHQgPSB0cnVlOyAvLyDlpoLmnpzkvb/nlKjkuIrmi4ks5YiZ6buY6K6k5pyJ5LiL5LiA6aG1XHJcblx0bWUuc3RhcnROdW0gPSBtZS5vcHRVcC5wYWdlLm51bSArIDE7IC8vIOiusOW9lXBhZ2XlvIDlp4vnmoTpobXnoIFcclxuXHJcblx0Ly8g5Yid5aeL5YyW5a6M5q+V55qE5Zue6LCDXHJcblx0aWYgKG1lLm9wdFVwLmluaXRlZCkge1xyXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHsgLy8g5b6F5Li757q/56iL5omn6KGM5a6M5q+V5YaN5omn6KGMLOmBv+WFjW5ldyBNZVNjcm9sbOacquWIneWni+WMlizlnKjlm57osIPojrflj5bkuI3liLBtZXNjcm9sbOeahOWunuS+i1xyXG5cdFx0XHRtZS5vcHRVcC5pbml0ZWQobWUpO1xyXG5cdFx0fSwgMClcclxuXHR9XHJcbn1cclxuXHJcbi8q5rua5Yqo5Yiw5bqV6YOo55qE5LqL5Lu2ICjku4VtZXNjcm9sbC1ib2R555Sf5pWIKSovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5vblJlYWNoQm90dG9tID0gZnVuY3Rpb24oKSB7XHJcblx0aWYgKHRoaXMuaXNTY3JvbGxCb2R5ICYmICF0aGlzLmlzVXBTY3JvbGxpbmcpIHsgLy8g5Y+q6IO95pSv5oyB5LiL5ouJ5Yi35paw55qE5pe25YCZ5ZCM5pe25Y+v5Lul6Kem5Y+R5LiK5ouJ5Yqg6L29LOWQpuWImea7muWKqOWIsOW6lemDqOWwsemcgOimgeS4iua7keS4gOeCueaJjeiDveinpuWPkW9uUmVhY2hCb3R0b21cclxuXHRcdGlmICghdGhpcy5vcHRVcC5pc0xvY2sgJiYgdGhpcy5vcHRVcC5oYXNOZXh0KSB7XHJcblx0XHRcdHRoaXMudHJpZ2dlclVwU2Nyb2xsKCk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG4vKuWIl+ihqOa7muWKqOS6i+S7tiAo5LuFbWVzY3JvbGwtYm9keeeUn+aViCkqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUub25QYWdlU2Nyb2xsID0gZnVuY3Rpb24oZSkge1xyXG5cdGlmICghdGhpcy5pc1Njcm9sbEJvZHkpIHJldHVybjtcclxuXHJcblx0Ly8g5pu05paw5rua5Yqo5p2h55qE5L2N572uICjkuLvopoHnlKjkuo7liKTmlq3kuIvmi4nliLfmlrDml7Ys5rua5Yqo5p2h5piv5ZCm5Zyo6aG26YOoKVxyXG5cdHRoaXMuc2V0U2Nyb2xsVG9wKGUuc2Nyb2xsVG9wKTtcclxuXHJcblx0Ly8g6aG26YOo5oyJ6ZKu55qE5pi+56S66ZqQ6JePXHJcblx0aWYgKGUuc2Nyb2xsVG9wID49IHRoaXMub3B0VXAudG9Ub3Aub2Zmc2V0KSB7XHJcblx0XHR0aGlzLnNob3dUb3BCdG4oKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dGhpcy5oaWRlVG9wQnRuKCk7XHJcblx0fVxyXG59XHJcblxyXG4vKuWIl+ihqOa7muWKqOS6i+S7tiovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5zY3JvbGwgPSBmdW5jdGlvbihlLCBvblNjcm9sbCkge1xyXG5cdC8vIOabtOaWsOa7muWKqOadoeeahOS9jee9rlxyXG5cdHRoaXMuc2V0U2Nyb2xsVG9wKGUuc2Nyb2xsVG9wKTtcclxuXHQvLyDmm7TmlrDmu5rliqjlhoXlrrnpq5jluqZcclxuXHR0aGlzLnNldFNjcm9sbEhlaWdodChlLnNjcm9sbEhlaWdodCk7XHJcblxyXG5cdC8vIOWQkeS4iua7kei/mOaYr+WQkeS4i+a7keWKqFxyXG5cdGlmICh0aGlzLnByZVNjcm9sbFkgPT0gbnVsbCkgdGhpcy5wcmVTY3JvbGxZID0gMDtcclxuXHR0aGlzLmlzU2Nyb2xsVXAgPSBlLnNjcm9sbFRvcCAtIHRoaXMucHJlU2Nyb2xsWSA+IDA7XHJcblx0dGhpcy5wcmVTY3JvbGxZID0gZS5zY3JvbGxUb3A7XHJcblxyXG5cdC8vIOS4iua7kSAmJiDmo4Dmn6Xlubbop6blj5HkuIrmi4lcclxuXHR0aGlzLmlzU2Nyb2xsVXAgJiYgdGhpcy50cmlnZ2VyVXBTY3JvbGwodHJ1ZSk7XHJcblxyXG5cdC8vIOmhtumDqOaMiemSrueahOaYvuekuumakOiXj1xyXG5cdGlmIChlLnNjcm9sbFRvcCA+PSB0aGlzLm9wdFVwLnRvVG9wLm9mZnNldCkge1xyXG5cdFx0dGhpcy5zaG93VG9wQnRuKCk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHRoaXMuaGlkZVRvcEJ0bigpO1xyXG5cdH1cclxuXHJcblx0Ly8g5ruR5Yqo55uR5ZCsXHJcblx0dGhpcy5vcHRVcC5vblNjcm9sbCAmJiBvblNjcm9sbCAmJiBvblNjcm9sbCgpXHJcbn1cclxuXHJcbi8qIOinpuWPkeS4iuaLieWKoOi9vSAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUudHJpZ2dlclVwU2Nyb2xsID0gZnVuY3Rpb24oaXNDaGVjaykge1xyXG5cdGlmICghdGhpcy5pc1VwU2Nyb2xsaW5nICYmIHRoaXMub3B0VXAudXNlICYmIHRoaXMub3B0VXAuY2FsbGJhY2spIHtcclxuXHRcdC8vIOaYr+WQpuagoemqjOWcqOW6lemDqDsg6buY6K6k5LiN5qCh6aqMXHJcblx0XHRpZiAoaXNDaGVjayA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRsZXQgY2FuVXAgPSBmYWxzZTtcclxuXHRcdFx0Ly8g6L+Y5pyJ5LiL5LiA6aG1ICYmIOayoeaciemUgeWumiAmJiDkuI3lnKjkuIvmi4nkuK1cclxuXHRcdFx0aWYgKHRoaXMub3B0VXAuaGFzTmV4dCAmJiAhdGhpcy5vcHRVcC5pc0xvY2sgJiYgIXRoaXMuaXNEb3duU2Nyb2xsaW5nKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMuZ2V0U2Nyb2xsQm90dG9tKCkgPD0gdGhpcy5vcHRVcC5vZmZzZXQpIHsgLy8g5Yiw5bqV6YOoXHJcblx0XHRcdFx0XHRjYW5VcCA9IHRydWU7IC8vIOagh+iusOWPr+S4iuaLiVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoY2FuVXAgPT09IGZhbHNlKSByZXR1cm47XHJcblx0XHR9XHJcblx0XHR0aGlzLnNob3dVcFNjcm9sbCgpOyAvLyDkuIrmi4nliqDovb3kuK0uLi5cclxuXHRcdHRoaXMub3B0VXAucGFnZS5udW0rKzsgLy8g6aKE5YWI5Yqg5LiA6aG1LOWmguaenOWksei0peWImeWHj+WbnlxyXG5cdFx0dGhpcy5pc1VwQXV0b0xvYWQgPSB0cnVlOyAvLyDmoIforrDkuIrmi4nlt7Lnu4/oh6rliqjmiafooYzov4cs6YG/5YWN5Yid5aeL5YyW5pe25aSa5qyh6Kem5Y+R5LiK5ouJ5Zue6LCDXHJcblx0XHR0aGlzLm51bSA9IHRoaXMub3B0VXAucGFnZS5udW07IC8vIOaKiuacgOaWsOeahOmhteaVsOi1i+WAvOWcqG1lc2Nyb2xs5LiKLOmBv+WFjeWvuXBhZ2XnmoTlvbHlk41cclxuXHRcdHRoaXMuc2l6ZSA9IHRoaXMub3B0VXAucGFnZS5zaXplOyAvLyDmiormnIDmlrDnmoTpobXnoIHotYvlgLzlnKhtZXNjcm9sbOS4iizpgb/lhY3lr7lwYWdl55qE5b2x5ZONXHJcblx0XHR0aGlzLnRpbWUgPSB0aGlzLm9wdFVwLnBhZ2UudGltZTsgLy8g5oqK5pyA5paw55qE6aG156CB6LWL5YC85ZyobWVzY3JvbGzkuIos6YG/5YWN5a+5cGFnZeeahOW9seWTjVxyXG5cdFx0dGhpcy5vcHRVcC5jYWxsYmFjayh0aGlzKTsgLy8g5omn6KGM5Zue6LCDLOiBlOe9keWKoOi9veaVsOaNrlxyXG5cdH1cclxufVxyXG5cclxuLyog5pi+56S65LiK5ouJ5Yqg6L295LitICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5zaG93VXBTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuXHR0aGlzLmlzVXBTY3JvbGxpbmcgPSB0cnVlOyAvLyDmoIforrDkuIrmi4nliqDovb3kuK1cclxuXHR0aGlzLm9wdFVwLnNob3dMb2FkaW5nICYmIHRoaXMub3B0VXAuc2hvd0xvYWRpbmcodGhpcyk7IC8vIOWbnuiwg1xyXG59XHJcblxyXG4vKiDmmL7npLrkuIrmi4nml6Dmm7TlpJrmlbDmja4gKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnNob3dOb01vcmUgPSBmdW5jdGlvbigpIHtcclxuXHRcclxuXHR0aGlzLm9wdFVwLmhhc05leHQgPSBmYWxzZTsgLy8g5qCH6K6w5peg5pu05aSa5pWw5o2uXHJcblx0dGhpcy5vcHRVcC5zaG93Tm9Nb3JlICYmIHRoaXMub3B0VXAuc2hvd05vTW9yZSh0aGlzKTsgLy8g5Zue6LCDXHJcbn1cclxuLyog5pi+56S65Yqg6L295aSx6LSlICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5zaG93RXJyID0gZnVuY3Rpb24oKSB7XHJcblx0dGhpcy5vcHRpb25zLnNob3dFcnIgJiYgdGhpcy5vcHRpb25zLnNob3dFcnIodGhpcyk7IC8vIOWbnuiwg1xyXG59XHJcbi8qIOmakOiXj+S4iuaLieWMuuWfnyoqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuaGlkZVVwU2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcblx0dGhpcy5vcHRVcC5oaWRlVXBTY3JvbGwgJiYgdGhpcy5vcHRVcC5oaWRlVXBTY3JvbGwodGhpcyk7IC8vIOWbnuiwg1xyXG59XHJcblxyXG4vKiDnu5PmnZ/kuIrmi4nliqDovb0gKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLmVuZFVwU2Nyb2xsID0gZnVuY3Rpb24oaXNTaG93Tm9Nb3JlKSB7XHJcblx0aWYgKGlzU2hvd05vTW9yZSAhPSBudWxsKSB7IC8vIGlzU2hvd05vTW9yZT1udWxsLOS4jeWkhOeQhuS4i+aLieeKtuaAgSzkuIvmi4nliLfmlrDnmoTml7blgJnosIPnlKhcclxuXHRcdGlmIChpc1Nob3dOb01vcmUpIHtcclxuXHRcdFx0dGhpcy5zaG93Tm9Nb3JlKCk7IC8vIGlzU2hvd05vTW9yZT10cnVlLOaYvuekuuaXoOabtOWkmuaVsOaNrlxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5oaWRlVXBTY3JvbGwoKTsgLy8gaXNTaG93Tm9Nb3JlPWZhbHNlLOmakOiXj+S4iuaLieWKoOi9vVxyXG5cdFx0fVxyXG5cdH1cclxuXHR0aGlzLmlzVXBTY3JvbGxpbmcgPSBmYWxzZTsgLy8g5qCH6K6w57uT5p2f5LiK5ouJ5Yqg6L29XHJcbn1cclxuXHJcbi8qIOmHjee9ruS4iuaLieWKoOi9veWIl+ihqOS4uuesrOS4gOmhtVxyXG4gKmlzU2hvd0xvYWRpbmcg5piv5ZCm5pi+56S66L+b5bqm5biD5bGAO1xyXG4gKiAxLum7mOiupG51bGws5LiN5Lyg5Y+CLOWImeaYvuekuuS4iuaLieWKoOi9veeahOi/m+W6puW4g+WxgFxyXG4gKiAyLuS8oOWPgnRydWUsIOWImeaYvuekuuS4i+aLieWIt+aWsOeahOi/m+W6puW4g+WxgFxyXG4gKiAzLuS8oOWPgmZhbHNlLOWImeS4jeaYvuekuuS4iuaLieWSjOS4i+aLieeahOi/m+W6piAo5bi455So5LqO6Z2Z6buY5pu05paw5YiX6KGo5pWw5o2uKVxyXG4gKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnJlc2V0VXBTY3JvbGwgPSBmdW5jdGlvbihpc1Nob3dMb2FkaW5nKSB7XHJcblx0aWYgKHRoaXMub3B0VXAgJiYgdGhpcy5vcHRVcC51c2UpIHtcclxuXHRcdGxldCBwYWdlID0gdGhpcy5vcHRVcC5wYWdlO1xyXG5cdFx0dGhpcy5wcmVQYWdlTnVtID0gcGFnZS5udW07IC8vIOe8k+WtmOmHjee9ruWJjeeahOmhteeggSzliqDovb3lpLHotKXlj6/pgIDlm55cclxuXHRcdHRoaXMucHJlUGFnZVRpbWUgPSBwYWdlLnRpbWU7IC8vIOe8k+WtmOmHjee9ruWJjeeahOaXtumXtCzliqDovb3lpLHotKXlj6/pgIDlm55cclxuXHRcdHBhZ2UubnVtID0gdGhpcy5zdGFydE51bTsgLy8g6YeN572u5Li656ys5LiA6aG1XHJcblx0XHRwYWdlLnRpbWUgPSBudWxsOyAvLyDph43nva7ml7bpl7TkuLrnqbpcclxuXHRcdGlmICghdGhpcy5pc0Rvd25TY3JvbGxpbmcgJiYgaXNTaG93TG9hZGluZyAhPT0gZmFsc2UpIHsgLy8g5aaC5p6c5LiN5piv5LiL5ouJ5Yi35paw6Kem5Y+R55qEcmVzZXRVcFNjcm9sbOW5tuS4lOS4jemFjee9ruWIl+ihqOmdmem7mOabtOaWsCzliJnmmL7npLrov5vluqY7XHJcblx0XHRcdGlmIChpc1Nob3dMb2FkaW5nID09IG51bGwpIHtcclxuXHRcdFx0XHR0aGlzLnJlbW92ZUVtcHR5KCk7IC8vIOenu+mZpOepuuW4g+WxgFxyXG5cdFx0XHRcdHRoaXMuc2hvd1VwU2Nyb2xsKCk7IC8vIOS4jeS8oOWPgizpu5jorqTmmL7npLrkuIrmi4nliqDovb3nmoTov5vluqbluIPlsYBcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLnNob3dEb3duU2Nyb2xsKCk7IC8vIOS8oHRydWUs5pi+56S65LiL5ouJ5Yi35paw55qE6L+b5bqm5biD5bGALOS4jea4heepuuWIl+ihqFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR0aGlzLmlzVXBBdXRvTG9hZCA9IHRydWU7IC8vIOagh+iusOS4iuaLieW3sue7j+iHquWKqOaJp+ihjOi/hyzpgb/lhY3liJ3lp4vljJbml7blpJrmrKHop6blj5HkuIrmi4nlm57osINcclxuXHRcdHRoaXMubnVtID0gcGFnZS5udW07IC8vIOaKiuacgOaWsOeahOmhteaVsOi1i+WAvOWcqG1lc2Nyb2xs5LiKLOmBv+WFjeWvuXBhZ2XnmoTlvbHlk41cclxuXHRcdHRoaXMuc2l6ZSA9IHBhZ2Uuc2l6ZTsgLy8g5oqK5pyA5paw55qE6aG156CB6LWL5YC85ZyobWVzY3JvbGzkuIos6YG/5YWN5a+5cGFnZeeahOW9seWTjVxyXG5cdFx0dGhpcy50aW1lID0gcGFnZS50aW1lOyAvLyDmiormnIDmlrDnmoTpobXnoIHotYvlgLzlnKhtZXNjcm9sbOS4iizpgb/lhY3lr7lwYWdl55qE5b2x5ZONXHJcblx0XHR0aGlzLm9wdFVwLmNhbGxiYWNrICYmIHRoaXMub3B0VXAuY2FsbGJhY2sodGhpcyk7IC8vIOaJp+ihjOS4iuaLieWbnuiwg1xyXG5cdH1cclxufVxyXG5cclxuLyog6K6+572ucGFnZS5udW3nmoTlgLwgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnNldFBhZ2VOdW0gPSBmdW5jdGlvbihudW0pIHtcclxuXHR0aGlzLm9wdFVwLnBhZ2UubnVtID0gbnVtIC0gMTtcclxufVxyXG5cclxuLyog6K6+572ucGFnZS5zaXpl55qE5YC8ICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5zZXRQYWdlU2l6ZSA9IGZ1bmN0aW9uKHNpemUpIHtcclxuXHR0aGlzLm9wdFVwLnBhZ2Uuc2l6ZSA9IHNpemU7XHJcbn1cclxuXHJcbi8qIOiBlOe9keWbnuiwg+aIkOWKnyznu5PmnZ/kuIvmi4nliLfmlrDlkozkuIrmi4nliqDovb1cclxuICogZGF0YVNpemU6IOW9k+WJjemhteeahOaVsOaNrumHjyjlv4XkvKApXHJcbiAqIHRvdGFsUGFnZTog5oC76aG15pWwKOW/heS8oClcclxuICogc3lzdGltZTog5pyN5Yqh5Zmo5pe26Ze0ICjlj6/nqbopXHJcbiAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZW5kQnlQYWdlID0gZnVuY3Rpb24oZGF0YVNpemUsIHRvdGFsUGFnZSwgc3lzdGltZSkge1xyXG5cdGxldCBoYXNOZXh0O1xyXG5cdGlmICh0aGlzLm9wdFVwLnVzZSAmJiB0b3RhbFBhZ2UgIT0gbnVsbCkgaGFzTmV4dCA9IHRoaXMub3B0VXAucGFnZS5udW0gPCB0b3RhbFBhZ2U7IC8vIOaYr+WQpui/mOacieS4i+S4gOmhtVxyXG5cdHRoaXMuZW5kU3VjY2VzcyhkYXRhU2l6ZSwgaGFzTmV4dCwgc3lzdGltZSk7XHJcbn1cclxuXHJcbi8qIOiBlOe9keWbnuiwg+aIkOWKnyznu5PmnZ/kuIvmi4nliLfmlrDlkozkuIrmi4nliqDovb1cclxuICogZGF0YVNpemU6IOW9k+WJjemhteeahOaVsOaNrumHjyjlv4XkvKApXHJcbiAqIHRvdGFsU2l6ZTog5YiX6KGo5omA5pyJ5pWw5o2u5oC75pWw6YePKOW/heS8oClcclxuICogc3lzdGltZTog5pyN5Yqh5Zmo5pe26Ze0ICjlj6/nqbopXHJcbiAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZW5kQnlTaXplID0gZnVuY3Rpb24oZGF0YVNpemUsIHRvdGFsU2l6ZSwgc3lzdGltZSkge1xyXG5cdGxldCBoYXNOZXh0O1xyXG5cdGlmICh0aGlzLm9wdFVwLnVzZSAmJiB0b3RhbFNpemUgIT0gbnVsbCkge1xyXG5cdFx0bGV0IGxvYWRTaXplID0gKHRoaXMub3B0VXAucGFnZS5udW0gLSAxKSAqIHRoaXMub3B0VXAucGFnZS5zaXplICsgZGF0YVNpemU7IC8vIOW3suWKoOi9veeahOaVsOaNruaAu+aVsFxyXG5cdFx0aGFzTmV4dCA9IGxvYWRTaXplIDwgdG90YWxTaXplOyAvLyDmmK/lkKbov5jmnInkuIvkuIDpobVcclxuXHR9XHJcblx0dGhpcy5lbmRTdWNjZXNzKGRhdGFTaXplLCBoYXNOZXh0LCBzeXN0aW1lKTtcclxufVxyXG5cclxuLyog6IGU572R5Zue6LCD5oiQ5YqfLOe7k+adn+S4i+aLieWIt+aWsOWSjOS4iuaLieWKoOi9vVxyXG4gKiBkYXRhU2l6ZTog5b2T5YmN6aG155qE5pWw5o2u5Liq5pWwKOS4jeaYr+aJgOaciemhteeahOaVsOaNruaAu+WSjCks55So5LqO5LiK5ouJ5Yqg6L295Yik5pat5piv5ZCm6L+Y5pyJ5LiL5LiA6aG1LuWmguaenOS4jeS8oCzliJnkvJrliKTmlq3ov5jmnInkuIvkuIDpobVcclxuICogaGFzTmV4dDog5piv5ZCm6L+Y5pyJ5LiL5LiA6aG1LOW4g+WwlOexu+WeizvnlKjmnaXop6PlhrPov5nkuKrlsI/pl67popg65q+U5aaC5YiX6KGo5YWx5pyJMjDmnaHmlbDmja4s5q+P6aG15Yqg6L29MTDmnaEs5YWxMumhtS7lpoLmnpzlj6rmoLnmja5kYXRhU2l6ZeWIpOaWrSzliJnpnIDnv7vliLDnrKzkuInpobXmiY3kvJrnn6XpgZPml6Dmm7TlpJrmlbDmja4s5aaC5p6c5Lyg5LqGaGFzTmV4dCzliJnnv7vliLDnrKzkuozpobXljbPlj6/mmL7npLrml6Dmm7TlpJrmlbDmja4uXHJcbiAqIHN5c3RpbWU6IOacjeWKoeWZqOaXtumXtCjlj6/nqbopO+eUqOadpeino+WGs+i/meS4quWwj+mXrumimDrlvZPlh4blpIfnv7vkuIvkuIDpobXml7Ys5pWw5o2u5bqT5paw5aKe5LqG5Yeg5p2h6K6w5b2VLOatpOaXtue/u+S4i+S4gOmhtSzliY3pnaLnmoTlh6DmnaHmlbDmja7kvJrlkozkuIrkuIDpobXnmoTph43lpI076L+Z6YeM5Lyg5YWl5LqGc3lzdGltZSzpgqPkuYh1cENhbGxiYWNr55qEcGFnZS50aW1l5bCx5Lya5pyJ5YC8LOaKinBhZ2UudGltZeS8oOe7meacjeWKoeWZqCzorqnlkI7lj7Dov4fmu6TmlrDliqDlhaXnmoTpgqPlh6DmnaHorrDlvZVcclxuICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5lbmRTdWNjZXNzID0gZnVuY3Rpb24oZGF0YVNpemUsIGhhc05leHQsIHN5c3RpbWUpIHtcclxuXHRsZXQgbWUgPSB0aGlzO1xyXG5cdC8vIOe7k+adn+S4iuaLieWKoOi9vVxyXG5cdGlmIChtZS5vcHRVcC51c2UpIHtcclxuXHRcdGxldCBpc1Nob3dOb01vcmU7IC8vIOaYr+WQpuW3suaXoOabtOWkmuaVsOaNrlxyXG5cdFx0aWYgKGRhdGFTaXplICE9IG51bGwpIHtcclxuXHRcdFx0bGV0IHBhZ2VOdW0gPSBtZS5vcHRVcC5wYWdlLm51bTsgLy8g5b2T5YmN6aG156CBXHJcblx0XHRcdGxldCBwYWdlU2l6ZSA9IG1lLm9wdFVwLnBhZ2Uuc2l6ZTsgLy8g5q+P6aG16ZW/5bqmXHJcblx0XHRcdC8vIOWmguaenOaYr+esrOS4gOmhtVxyXG5cdFx0XHRpZiAocGFnZU51bSA9PT0gMSkge1xyXG5cdFx0XHRcdGlmIChzeXN0aW1lKSBtZS5vcHRVcC5wYWdlLnRpbWUgPSBzeXN0aW1lOyAvLyDorr7nva7liqDovb3liJfooajmlbDmja7nrKzkuIDpobXnmoTml7bpl7RcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoZGF0YVNpemUgPCBwYWdlU2l6ZSB8fCBoYXNOZXh0ID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdC8vIOi/lOWbnueahOaVsOaNruS4jea7oeS4gOmhteaXtizliJnor7TmmI7lt7Lml6Dmm7TlpJrmlbDmja5cclxuXHRcdFx0XHRtZS5vcHRVcC5oYXNOZXh0ID0gZmFsc2U7XHJcblx0XHRcdFx0aWYgKGRhdGFTaXplID09PSAwICYmIHBhZ2VOdW0gPT09IDEpIHtcclxuXHRcdFx0XHRcdC8vIOWmguaenOesrOS4gOmhteaXoOS7u+S9leaVsOaNruS4lOmFjee9ruS6huepuuW4g+WxgFxyXG5cdFx0XHRcdFx0aXNTaG93Tm9Nb3JlID0gZmFsc2U7XHJcblx0XHRcdFx0XHRtZS5zaG93RW1wdHkoKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8g5oC75YiX6KGo5pWw5bCR5LqO6YWN572u55qE5pWw6YePLOWImeS4jeaYvuekuuaXoOabtOWkmuaVsOaNrlxyXG5cdFx0XHRcdFx0bGV0IGFsbERhdGFTaXplID0gKHBhZ2VOdW0gLSAxKSAqIHBhZ2VTaXplICsgZGF0YVNpemU7XHJcblx0XHRcdFx0XHRpZiAoYWxsRGF0YVNpemUgPCBtZS5vcHRVcC5ub01vcmVTaXplKSB7XHJcblx0XHRcdFx0XHRcdGlzU2hvd05vTW9yZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0aXNTaG93Tm9Nb3JlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdG1lLnJlbW92ZUVtcHR5KCk7IC8vIOenu+mZpOepuuW4g+WxgFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyDov5jmnInkuIvkuIDpobVcclxuXHRcdFx0XHRpc1Nob3dOb01vcmUgPSBmYWxzZTtcclxuXHRcdFx0XHRtZS5vcHRVcC5oYXNOZXh0ID0gdHJ1ZTtcclxuXHRcdFx0XHRtZS5yZW1vdmVFbXB0eSgpOyAvLyDnp7vpmaTnqbrluIPlsYBcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIOmakOiXj+S4iuaLiVxyXG5cdFx0bWUuZW5kVXBTY3JvbGwoaXNTaG93Tm9Nb3JlKTtcclxuXHR9XHJcblx0Ly8g57uT5p2f5LiL5ouJ5Yi35pawXHJcblx0aWYgKG1lLmlzRG93blNjcm9sbGluZykge1xyXG5cdFx0dGhpcy5vcHRVcC5wYWdlLm51bSA9IDE7XHJcblx0XHRtZS5lbmREb3duU2Nyb2xsKCk7XHJcblx0fTtcclxufVxyXG5cclxuLyog5Zue6LCD5aSx6LSlLOe7k+adn+S4i+aLieWIt+aWsOWSjOS4iuaLieWKoOi9vSAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZW5kRXJyID0gZnVuY3Rpb24oZXJyRGlzdGFuY2UpIHtcclxuXHQvLyDnu5PmnZ/kuIvmi4ks5Zue6LCD5aSx6LSl6YeN572u5Zue5Y6f5p2l55qE6aG156CB5ZKM5pe26Ze0XHJcblx0aWYgKHRoaXMuaXNEb3duU2Nyb2xsaW5nKSB7XHJcblx0XHRsZXQgcGFnZSA9IHRoaXMub3B0VXAucGFnZTtcclxuXHRcdGlmIChwYWdlICYmIHRoaXMucHJlUGFnZU51bSkge1xyXG5cdFx0XHRwYWdlLm51bSA9IHRoaXMucHJlUGFnZU51bTtcclxuXHRcdFx0cGFnZS50aW1lID0gdGhpcy5wcmVQYWdlVGltZTtcclxuXHRcdH1cclxuXHRcdHRoaXMuZW5kRG93blNjcm9sbCgpO1xyXG5cdFx0dGhpcy5zaG93RXJyKCk7XHJcblx0fVxyXG5cdC8vIOe7k+adn+S4iuaLiSzlm57osIPlpLHotKXph43nva7lm57ljp/mnaXnmoTpobXnoIFcclxuXHRpZiAodGhpcy5pc1VwU2Nyb2xsaW5nKSB7XHJcblx0XHR0aGlzLm9wdFVwLnBhZ2UubnVtLS07XHJcblx0XHR0aGlzLmVuZFVwU2Nyb2xsKGZhbHNlKTtcclxuXHRcdHRoaXMuc2hvd0VycigpO1xyXG5cdFx0Ly8g5aaC5p6c5pivbWVzY3JvbGwtYm9keSzliJnpnIDlvoDlm57mu5rkuIDlrprot53nprtcclxuXHRcdGlmICh0aGlzLmlzU2Nyb2xsQm9keSAmJiBlcnJEaXN0YW5jZSAhPT0gMCkgeyAvLyDkuI3lpITnkIYwXHJcblx0XHRcdGlmICghZXJyRGlzdGFuY2UpIGVyckRpc3RhbmNlID0gdGhpcy5vcHRVcC5lcnJEaXN0YW5jZTsgLy8g5LiN5LygLOWImeWPlum7mOiupFxyXG5cdFx0XHR0aGlzLnNjcm9sbFRvKHRoaXMuZ2V0U2Nyb2xsVG9wKCkgLSBlcnJEaXN0YW5jZSwgMCkgLy8g5b6A5LiK5Zue5rua55qE6Led56a7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG4vKiDmmL7npLrnqbrluIPlsYAgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnNob3dFbXB0eSA9IGZ1bmN0aW9uKCkge1xyXG5cdHRoaXMub3B0VXAuZW1wdHkudXNlICYmIHRoaXMub3B0VXAuZW1wdHkub25TaG93ICYmIHRoaXMub3B0VXAuZW1wdHkub25TaG93KHRydWUpXHJcbn1cclxuXHJcbi8qIOenu+mZpOepuuW4g+WxgCAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUucmVtb3ZlRW1wdHkgPSBmdW5jdGlvbigpIHtcclxuXHR0aGlzLm9wdFVwLmVtcHR5LnVzZSAmJiB0aGlzLm9wdFVwLmVtcHR5Lm9uU2hvdyAmJiB0aGlzLm9wdFVwLmVtcHR5Lm9uU2hvdyhmYWxzZSlcclxufVxyXG5cclxuLyog5pi+56S65Zue5Yiw6aG26YOo55qE5oyJ6ZKuICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5zaG93VG9wQnRuID0gZnVuY3Rpb24oKSB7XHJcblx0aWYgKCF0aGlzLnRvcEJ0blNob3cpIHtcclxuXHRcdHRoaXMudG9wQnRuU2hvdyA9IHRydWU7XHJcblx0XHR0aGlzLm9wdFVwLnRvVG9wLm9uU2hvdyAmJiB0aGlzLm9wdFVwLnRvVG9wLm9uU2hvdyh0cnVlKTtcclxuXHR9XHJcbn1cclxuXHJcbi8qIOmakOiXj+WbnuWIsOmhtumDqOeahOaMiemSriAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuaGlkZVRvcEJ0biA9IGZ1bmN0aW9uKCkge1xyXG5cdGlmICh0aGlzLnRvcEJ0blNob3cpIHtcclxuXHRcdHRoaXMudG9wQnRuU2hvdyA9IGZhbHNlO1xyXG5cdFx0dGhpcy5vcHRVcC50b1RvcC5vblNob3cgJiYgdGhpcy5vcHRVcC50b1RvcC5vblNob3coZmFsc2UpO1xyXG5cdH1cclxufVxyXG5cclxuLyog6I635Y+W5rua5Yqo5p2h55qE5L2N572uICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5nZXRTY3JvbGxUb3AgPSBmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcy5zY3JvbGxUb3AgfHwgMFxyXG59XHJcblxyXG4vKiDorrDlvZXmu5rliqjmnaHnmoTkvY3nva4gKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnNldFNjcm9sbFRvcCA9IGZ1bmN0aW9uKHkpIHtcclxuXHR0aGlzLnNjcm9sbFRvcCA9IHk7XHJcbn1cclxuXHJcbi8qIOa7muWKqOWIsOaMh+WumuS9jee9riAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuc2Nyb2xsVG8gPSBmdW5jdGlvbih5LCB0KSB7XHJcblx0dGhpcy5teVNjcm9sbFRvICYmIHRoaXMubXlTY3JvbGxUbyh5LCB0KSAvLyBzY3JvbGx2aWV36ZyA6Ieq5a6a5LmJ5Zue5Yiw6aG26YOo5pa55rOVXHJcbn1cclxuXHJcbi8qIOiHquWumuS5iXNjcm9sbFRvICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5yZXNldFNjcm9sbFRvID0gZnVuY3Rpb24obXlTY3JvbGxUbykge1xyXG5cdHRoaXMubXlTY3JvbGxUbyA9IG15U2Nyb2xsVG9cclxufVxyXG5cclxuLyog5rua5Yqo5p2h5Yiw5bqV6YOo55qE6Led56a7ICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5nZXRTY3JvbGxCb3R0b20gPSBmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcy5nZXRTY3JvbGxIZWlnaHQoKSAtIHRoaXMuZ2V0Q2xpZW50SGVpZ2h0KCkgLSB0aGlzLmdldFNjcm9sbFRvcCgpXHJcbn1cclxuXHJcbi8qIOiuoeatpeWZqFxyXG4gc3Rhcjog5byA5aeL5YC8XHJcbiBlbmQ6IOe7k+adn+WAvFxyXG4gY2FsbGJhY2soc3RlcCx0aW1lcik6IOWbnuiwg3N0ZXDlgLws6K6h5q2l5ZmodGltZXIs5Y+v6Ieq6KGM6YCa6L+Hd2luZG93LmNsZWFySW50ZXJ2YWwodGltZXIp57uT5p2f6K6h5q2l5ZmoO1xyXG4gdDog6K6h5q2l5pe26ZW/LOS8oDDliJnnm7TmjqXlm57osINlbmTlgLw75LiN5Lyg5YiZ6buY6K6kMzAwbXNcclxuIHJhdGU6IOWRqOacnzvkuI3kvKDliJnpu5jorqQzMG1z6K6h5q2l5LiA5qyhXHJcbiAqICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5nZXRTdGVwID0gZnVuY3Rpb24oc3RhciwgZW5kLCBjYWxsYmFjaywgdCwgcmF0ZSkge1xyXG5cdGxldCBkaWZmID0gZW5kIC0gc3RhcjsgLy8g5beu5YC8XHJcblx0aWYgKHQgPT09IDAgfHwgZGlmZiA9PT0gMCkge1xyXG5cdFx0Y2FsbGJhY2sgJiYgY2FsbGJhY2soZW5kKTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0dCA9IHQgfHwgMzAwOyAvLyDml7bplb8gMzAwbXNcclxuXHRyYXRlID0gcmF0ZSB8fCAzMDsgLy8g5ZGo5pyfIDMwbXNcclxuXHRsZXQgY291bnQgPSB0IC8gcmF0ZTsgLy8g5qyh5pWwXHJcblx0bGV0IHN0ZXAgPSBkaWZmIC8gY291bnQ7IC8vIOatpemVv1xyXG5cdGxldCBpID0gMDsgLy8g6K6h5pWwXHJcblx0bGV0IHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoaSA8IGNvdW50IC0gMSkge1xyXG5cdFx0XHRzdGFyICs9IHN0ZXA7XHJcblx0XHRcdGNhbGxiYWNrICYmIGNhbGxiYWNrKHN0YXIsIHRpbWVyKTtcclxuXHRcdFx0aSsrO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y2FsbGJhY2sgJiYgY2FsbGJhY2soZW5kLCB0aW1lcik7IC8vIOacgOWQjuS4gOasoeebtOaOpeiuvue9rmVuZCzpgb/lhY3orqHnrpfor6/lt65cclxuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0aW1lcik7XHJcblx0XHR9XHJcblx0fSwgcmF0ZSk7XHJcbn1cclxuXHJcbi8qIOa7muWKqOWuueWZqOeahOmrmOW6piAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZ2V0Q2xpZW50SGVpZ2h0ID0gZnVuY3Rpb24oaXNSZWFsKSB7XHJcblx0bGV0IGggPSB0aGlzLmNsaWVudEhlaWdodCB8fCAwXHJcblx0aWYgKGggPT09IDAgJiYgaXNSZWFsICE9PSB0cnVlKSB7IC8vIOacquiOt+WPluWIsOWuueWZqOeahOmrmOW6pizlj6/kuLTml7blj5Zib2R555qE6auY5bqmICjlj6/og73kvJrmnInor6/lt64pXHJcblx0XHRoID0gdGhpcy5nZXRCb2R5SGVpZ2h0KClcclxuXHR9XHJcblx0cmV0dXJuIGhcclxufVxyXG5NZVNjcm9sbC5wcm90b3R5cGUuc2V0Q2xpZW50SGVpZ2h0ID0gZnVuY3Rpb24oaCkge1xyXG5cdHRoaXMuY2xpZW50SGVpZ2h0ID0gaDtcclxufVxyXG5cclxuLyog5rua5Yqo5YaF5a6555qE6auY5bqmICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcy5zY3JvbGxIZWlnaHQgfHwgMDtcclxufVxyXG5NZVNjcm9sbC5wcm90b3R5cGUuc2V0U2Nyb2xsSGVpZ2h0ID0gZnVuY3Rpb24oaCkge1xyXG5cdHRoaXMuc2Nyb2xsSGVpZ2h0ID0gaDtcclxufVxyXG5cclxuLyogYm9keeeahOmrmOW6piAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZ2V0Qm9keUhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzLmJvZHlIZWlnaHQgfHwgMDtcclxufVxyXG5NZVNjcm9sbC5wcm90b3R5cGUuc2V0Qm9keUhlaWdodCA9IGZ1bmN0aW9uKGgpIHtcclxuXHR0aGlzLmJvZHlIZWlnaHQgPSBoO1xyXG59XHJcblxyXG4vKiDpmLvmraLmtY/op4jlmajpu5jorqTmu5rliqjkuovku7YgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oZSkge1xyXG5cdC8vIOWwj+eoi+W6j+S4jeaUr+aMgWUucHJldmVudERlZmF1bHRcclxuXHQvLyBhcHDnmoRib3VuY2Xlj6rog73pgJrov4fphY3nva5wYWdlcy5qc29u55qEc3R5bGUuYXBwLXBsdXMuYm91bmNl5Li6XCJub25lXCLmnaXnpoHmraJcclxuXHQvLyBjYW5jZWxhYmxlOuaYr+WQpuWPr+S7peiiq+emgeeUqDsgZGVmYXVsdFByZXZlbnRlZDrmmK/lkKblt7Lnu4/ooqvnpoHnlKhcclxuXHRpZiAoZSAmJiBlLmNhbmNlbGFibGUgJiYgIWUuZGVmYXVsdFByZXZlbnRlZCkgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbn1cclxuXHJcbi8qIOaYr+WQpuWFgeiuuOS4i+aLieWbnuW8uSjmqaHnmq7nrYvmlYjmnpwpOyB0cnVl5oiWbnVsbOS4uuWFgeiuuDsgZmFsc2XnpoHmraJib3VuY2UgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnNldEJvdW5jZSA9IGZ1bmN0aW9uKGlzQm91bmNlKSB7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxufVxyXG4iLCIvLyDlhajlsYDphY3nva5cclxuLy8gbWVzY3JvbGwtYm9keSDlkowgbWVzY3JvbGwtdW5pIOmAmueUqFxyXG5jb25zdCBHbG9iYWxPcHRpb24gPSB7XHJcblx0ZG93bjoge1xyXG5cdFx0Ly8g5YW25LuWZG93bueahOmFjee9ruWPguaVsOS5n+WPr+S7peWGmSzov5nph4zlj6rlsZXnpLrkuobluLjnlKjnmoTphY3nva46XHJcblx0XHR0ZXh0SW5PZmZzZXQ6ICfkuIvmi4nliLfmlrAnLCAvLyDkuIvmi4nnmoTot53nprvlnKhvZmZzZXTojIPlm7TlhoXnmoTmj5DnpLrmlofmnKxcclxuXHRcdHRleHRPdXRPZmZzZXQ6ICfph4rmlL7mm7TmlrAnLCAvLyDkuIvmi4nnmoTot53nprvlpKfkuo5vZmZzZXTojIPlm7TnmoTmj5DnpLrmlofmnKxcclxuXHRcdHRleHRMb2FkaW5nOiAn5Yqg6L295LitIC4uLicsIC8vIOWKoOi9veS4reeahOaPkOekuuaWh+acrFxyXG5cdFx0YmdDb2xvcjonI0Y4RjhGOCcsXHJcblx0XHR0ZXh0Q29sb3I6JyM5MDkzOTknLFxyXG5cdFx0b2Zmc2V0OiA4MCwgLy8g5Zyo5YiX6KGo6aG26YOoLOS4i+aLieWkp+S6jjgwcHgs5p2+5omL5Y2z5Y+v6Kem5Y+R5LiL5ouJ5Yi35paw55qE5Zue6LCDXHJcblx0XHRuYXRpdmU6IGZhbHNlIC8vIOaYr+WQpuS9v+eUqOezu+e7n+iHquW4pueahOS4i+aLieWIt+aWsDsg6buY6K6kZmFsc2U7IOS7heWcqG1lc2Nyb2xsLWJvZHnnlJ/mlYggKOWAvOS4unRydWXml7Ys6L+Y6ZyA5ZyocGFnZXPphY3nva5lbmFibGVQdWxsRG93blJlZnJlc2g6dHJ1ZTvor6bor7flj4LogINtZXNjcm9sbC1uYXRpdmXnmoTmoYjkvospXHJcblx0fSxcclxuXHR1cDoge1xyXG5cdFx0Ly8g5YW25LuWdXDnmoTphY3nva7lj4LmlbDkuZ/lj6/ku6Xlhpks6L+Z6YeM5Y+q5bGV56S65LqG5bi455So55qE6YWN572uOlxyXG5cdFx0dGV4dExvYWRpbmc6ICfliqDovb3kuK0gLi4uJywgLy8g5Yqg6L295Lit55qE5o+Q56S65paH5pysXHJcblx0XHR0ZXh0Tm9Nb3JlOiAn5rKh5pyJ5pu05aSa5LqGJywgLy8g5rKh5pyJ5pu05aSa5pWw5o2u55qE5o+Q56S65paH5pysXHJcblx0XHR0ZXh0RXJyOiBcIuWKoOi9veWksei0pVwiLFxyXG5cdFx0b2Zmc2V0OiA4MCwgLy8g6Led5bqV6YOo5aSa6L+c5pe2LOinpuWPkXVwQ2FsbGJhY2tcclxuXHRcdGlzQm91bmNlOiBmYWxzZSwgLy8g6buY6K6k56aB5q2i5qmh55qu562L55qE5Zue5by55pWI5p6cLCDlv4Xor7vkuovpobk6IGh0dHA6Ly93d3cubWVzY3JvbGwuY29tL3FhLmh0bWw/dj0xOTA3MjUjcTI1XHJcblx0XHR0b1RvcDoge1xyXG5cdFx0XHQvLyDlm57liLDpobbpg6jmjInpkq4s6ZyA6YWN572uc3Jj5omN5pi+56S6XHJcblx0XHRcdHNyYzogXCJodHRwOi8vd3d3Lm1lc2Nyb2xsLmNvbS9pbWcvbWVzY3JvbGwtdG90b3AucG5nP3Y9MVwiLCAvLyDlm77niYfot6/lvoQgKOW7uuiuruaUvuWFpXN0YXRpY+ebruW9lSwg5aaCIC9zdGF0aWMvaW1nL21lc2Nyb2xsLXRvdG9wLnBuZyApXHJcblx0XHRcdG9mZnNldDogMTAwMCwgLy8g5YiX6KGo5rua5Yqo5aSa5bCR6Led56a75omN5pi+56S65Zue5Yiw6aG26YOo5oyJ6ZKuLOm7mOiupDEwMDBweFxyXG5cdFx0XHRyaWdodDogMjAsIC8vIOWIsOWPs+i+ueeahOi3neemuywg6buY6K6kMjAgKOaUr+aMgVwiMjBycHhcIiwgXCIyMHB4XCIsIFwiMjAlXCLmoLzlvI/nmoTlgLwsIOe6r+aVsOWtl+WImem7mOiupOWNleS9jXJweClcclxuXHRcdFx0Ym90dG9tOiAxMjAsIC8vIOWIsOW6lemDqOeahOi3neemuywg6buY6K6kMTIwICjmlK/mjIFcIjIwcnB4XCIsIFwiMjBweFwiLCBcIjIwJVwi5qC85byP55qE5YC8LCDnuq/mlbDlrZfliJnpu5jorqTljZXkvY1ycHgpXHJcblx0XHRcdHdpZHRoOiA3MiAvLyDlm57liLDpobbpg6jlm77moIfnmoTlrr3luqYsIOm7mOiupDcyICjmlK/mjIFcIjIwcnB4XCIsIFwiMjBweFwiLCBcIjIwJVwi5qC85byP55qE5YC8LCDnuq/mlbDlrZfliJnpu5jorqTljZXkvY1ycHgpXHJcblx0XHR9LFxyXG5cdFx0ZW1wdHk6IHtcclxuXHRcdFx0dXNlOiB0cnVlLCAvLyDmmK/lkKbmmL7npLrnqbrluIPlsYBcclxuXHRcdFx0aWNvbjogXCJodHRwOi8vd3d3Lm1lc2Nyb2xsLmNvbS9pbWcvbWVzY3JvbGwtZW1wdHkucG5nP3Y9MVwiLCAvLyDlm77moIfot6/lvoQgKOW7uuiuruaUvuWFpXN0YXRpY+ebruW9lSwg5aaCIC9zdGF0aWMvaW1nL21lc2Nyb2xsLWVtcHR5LnBuZyApXHJcblx0XHRcdHRpcDogJ34g5pqC5peg55u45YWz5pWw5o2uIH4nIC8vIOaPkOekulxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2xvYmFsT3B0aW9uXHJcbiIsIi8qKlxuICogdnVleCB2My4wLjFcbiAqIChjKSAyMDE3IEV2YW4gWW91XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xudmFyIGFwcGx5TWl4aW4gPSBmdW5jdGlvbiAoVnVlKSB7XG4gIHZhciB2ZXJzaW9uID0gTnVtYmVyKFZ1ZS52ZXJzaW9uLnNwbGl0KCcuJylbMF0pO1xuXG4gIGlmICh2ZXJzaW9uID49IDIpIHtcbiAgICBWdWUubWl4aW4oeyBiZWZvcmVDcmVhdGU6IHZ1ZXhJbml0IH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG92ZXJyaWRlIGluaXQgYW5kIGluamVjdCB2dWV4IGluaXQgcHJvY2VkdXJlXG4gICAgLy8gZm9yIDEueCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgICB2YXIgX2luaXQgPSBWdWUucHJvdG90eXBlLl9pbml0O1xuICAgIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgICAgIG9wdGlvbnMuaW5pdCA9IG9wdGlvbnMuaW5pdFxuICAgICAgICA/IFt2dWV4SW5pdF0uY29uY2F0KG9wdGlvbnMuaW5pdClcbiAgICAgICAgOiB2dWV4SW5pdDtcbiAgICAgIF9pbml0LmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWdWV4IGluaXQgaG9vaywgaW5qZWN0ZWQgaW50byBlYWNoIGluc3RhbmNlcyBpbml0IGhvb2tzIGxpc3QuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHZ1ZXhJbml0ICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gICAgLy8gc3RvcmUgaW5qZWN0aW9uXG4gICAgaWYgKG9wdGlvbnMuc3RvcmUpIHtcbiAgICAgIHRoaXMuJHN0b3JlID0gdHlwZW9mIG9wdGlvbnMuc3RvcmUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBvcHRpb25zLnN0b3JlKClcbiAgICAgICAgOiBvcHRpb25zLnN0b3JlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQuJHN0b3JlKSB7XG4gICAgICB0aGlzLiRzdG9yZSA9IG9wdGlvbnMucGFyZW50LiRzdG9yZTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBkZXZ0b29sSG9vayA9XG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG5mdW5jdGlvbiBkZXZ0b29sUGx1Z2luIChzdG9yZSkge1xuICBpZiAoIWRldnRvb2xIb29rKSB7IHJldHVybiB9XG5cbiAgc3RvcmUuX2RldnRvb2xIb29rID0gZGV2dG9vbEhvb2s7XG5cbiAgZGV2dG9vbEhvb2suZW1pdCgndnVleDppbml0Jywgc3RvcmUpO1xuXG4gIGRldnRvb2xIb29rLm9uKCd2dWV4OnRyYXZlbC10by1zdGF0ZScsIGZ1bmN0aW9uICh0YXJnZXRTdGF0ZSkge1xuICAgIHN0b3JlLnJlcGxhY2VTdGF0ZSh0YXJnZXRTdGF0ZSk7XG4gIH0pO1xuXG4gIHN0b3JlLnN1YnNjcmliZShmdW5jdGlvbiAobXV0YXRpb24sIHN0YXRlKSB7XG4gICAgZGV2dG9vbEhvb2suZW1pdCgndnVleDptdXRhdGlvbicsIG11dGF0aW9uLCBzdGF0ZSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgZmlyc3QgaXRlbSB0aGF0IHBhc3MgdGhlIHRlc3RcbiAqIGJ5IHNlY29uZCBhcmd1bWVudCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZcbiAqIEByZXR1cm4geyp9XG4gKi9cbi8qKlxuICogRGVlcCBjb3B5IHRoZSBnaXZlbiBvYmplY3QgY29uc2lkZXJpbmcgY2lyY3VsYXIgc3RydWN0dXJlLlxuICogVGhpcyBmdW5jdGlvbiBjYWNoZXMgYWxsIG5lc3RlZCBvYmplY3RzIGFuZCBpdHMgY29waWVzLlxuICogSWYgaXQgZGV0ZWN0cyBjaXJjdWxhciBzdHJ1Y3R1cmUsIHVzZSBjYWNoZWQgY29weSB0byBhdm9pZCBpbmZpbml0ZSBsb29wLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IGNhY2hlXG4gKiBAcmV0dXJuIHsqfVxuICovXG5cblxuLyoqXG4gKiBmb3JFYWNoIGZvciBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZm9yRWFjaFZhbHVlIChvYmosIGZuKSB7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmbihvYmpba2V5XSwga2V5KTsgfSk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gdmFsICYmIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG5mdW5jdGlvbiBhc3NlcnQgKGNvbmRpdGlvbiwgbXNnKSB7XG4gIGlmICghY29uZGl0aW9uKSB7IHRocm93IG5ldyBFcnJvcigoXCJbdnVleF0gXCIgKyBtc2cpKSB9XG59XG5cbnZhciBNb2R1bGUgPSBmdW5jdGlvbiBNb2R1bGUgKHJhd01vZHVsZSwgcnVudGltZSkge1xuICB0aGlzLnJ1bnRpbWUgPSBydW50aW1lO1xuICB0aGlzLl9jaGlsZHJlbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX3Jhd01vZHVsZSA9IHJhd01vZHVsZTtcbiAgdmFyIHJhd1N0YXRlID0gcmF3TW9kdWxlLnN0YXRlO1xuICB0aGlzLnN0YXRlID0gKHR5cGVvZiByYXdTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHJhd1N0YXRlKCkgOiByYXdTdGF0ZSkgfHwge307XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDEgPSB7IG5hbWVzcGFjZWQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDEubmFtZXNwYWNlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIXRoaXMuX3Jhd01vZHVsZS5uYW1lc3BhY2VkXG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmFkZENoaWxkID0gZnVuY3Rpb24gYWRkQ2hpbGQgKGtleSwgbW9kdWxlKSB7XG4gIHRoaXMuX2NoaWxkcmVuW2tleV0gPSBtb2R1bGU7XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKGtleSkge1xuICBkZWxldGUgdGhpcy5fY2hpbGRyZW5ba2V5XTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZ2V0Q2hpbGQgPSBmdW5jdGlvbiBnZXRDaGlsZCAoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9jaGlsZHJlbltrZXldXG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAocmF3TW9kdWxlKSB7XG4gIHRoaXMuX3Jhd01vZHVsZS5uYW1lc3BhY2VkID0gcmF3TW9kdWxlLm5hbWVzcGFjZWQ7XG4gIGlmIChyYXdNb2R1bGUuYWN0aW9ucykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zID0gcmF3TW9kdWxlLmFjdGlvbnM7XG4gIH1cbiAgaWYgKHJhd01vZHVsZS5tdXRhdGlvbnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zID0gcmF3TW9kdWxlLm11dGF0aW9ucztcbiAgfVxuICBpZiAocmF3TW9kdWxlLmdldHRlcnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycyA9IHJhd01vZHVsZS5nZXR0ZXJzO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hDaGlsZCA9IGZ1bmN0aW9uIGZvckVhY2hDaGlsZCAoZm4pIHtcbiAgZm9yRWFjaFZhbHVlKHRoaXMuX2NoaWxkcmVuLCBmbik7XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hHZXR0ZXIgPSBmdW5jdGlvbiBmb3JFYWNoR2V0dGVyIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLmdldHRlcnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLmdldHRlcnMsIGZuKTtcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoQWN0aW9uID0gZnVuY3Rpb24gZm9yRWFjaEFjdGlvbiAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zLCBmbik7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaE11dGF0aW9uID0gZnVuY3Rpb24gZm9yRWFjaE11dGF0aW9uIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zLCBmbik7XG4gIH1cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBNb2R1bGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG52YXIgTW9kdWxlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIE1vZHVsZUNvbGxlY3Rpb24gKHJhd1Jvb3RNb2R1bGUpIHtcbiAgLy8gcmVnaXN0ZXIgcm9vdCBtb2R1bGUgKFZ1ZXguU3RvcmUgb3B0aW9ucylcbiAgdGhpcy5yZWdpc3RlcihbXSwgcmF3Um9vdE1vZHVsZSwgZmFsc2UpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobW9kdWxlLCBrZXkpIHtcbiAgICByZXR1cm4gbW9kdWxlLmdldENoaWxkKGtleSlcbiAgfSwgdGhpcy5yb290KVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0TmFtZXNwYWNlID0gZnVuY3Rpb24gZ2V0TmFtZXNwYWNlIChwYXRoKSB7XG4gIHZhciBtb2R1bGUgPSB0aGlzLnJvb3Q7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBrZXkpIHtcbiAgICBtb2R1bGUgPSBtb2R1bGUuZ2V0Q2hpbGQoa2V5KTtcbiAgICByZXR1cm4gbmFtZXNwYWNlICsgKG1vZHVsZS5uYW1lc3BhY2VkID8ga2V5ICsgJy8nIDogJycpXG4gIH0sICcnKVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlJDEgKHJhd1Jvb3RNb2R1bGUpIHtcbiAgdXBkYXRlKFtdLCB0aGlzLnJvb3QsIHJhd1Jvb3RNb2R1bGUpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlciAocGF0aCwgcmF3TW9kdWxlLCBydW50aW1lKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgaWYgKCBydW50aW1lID09PSB2b2lkIDAgKSBydW50aW1lID0gdHJ1ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCByYXdNb2R1bGUpO1xuICB9XG5cbiAgdmFyIG5ld01vZHVsZSA9IG5ldyBNb2R1bGUocmF3TW9kdWxlLCBydW50aW1lKTtcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgdGhpcy5yb290ID0gbmV3TW9kdWxlO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgcGFyZW50LmFkZENoaWxkKHBhdGhbcGF0aC5sZW5ndGggLSAxXSwgbmV3TW9kdWxlKTtcbiAgfVxuXG4gIC8vIHJlZ2lzdGVyIG5lc3RlZCBtb2R1bGVzXG4gIGlmIChyYXdNb2R1bGUubW9kdWxlcykge1xuICAgIGZvckVhY2hWYWx1ZShyYXdNb2R1bGUubW9kdWxlcywgZnVuY3Rpb24gKHJhd0NoaWxkTW9kdWxlLCBrZXkpIHtcbiAgICAgIHRoaXMkMS5yZWdpc3RlcihwYXRoLmNvbmNhdChrZXkpLCByYXdDaGlsZE1vZHVsZSwgcnVudGltZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyIChwYXRoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gIHZhciBrZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIGlmICghcGFyZW50LmdldENoaWxkKGtleSkucnVudGltZSkgeyByZXR1cm4gfVxuXG4gIHBhcmVudC5yZW1vdmVDaGlsZChrZXkpO1xufTtcblxuZnVuY3Rpb24gdXBkYXRlIChwYXRoLCB0YXJnZXRNb2R1bGUsIG5ld01vZHVsZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gdXBkYXRlIHRhcmdldCBtb2R1bGVcbiAgdGFyZ2V0TW9kdWxlLnVwZGF0ZShuZXdNb2R1bGUpO1xuXG4gIC8vIHVwZGF0ZSBuZXN0ZWQgbW9kdWxlc1xuICBpZiAobmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICAgIGlmICghdGFyZ2V0TW9kdWxlLmdldENoaWxkKGtleSkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIlt2dWV4XSB0cnlpbmcgdG8gYWRkIGEgbmV3IG1vZHVsZSAnXCIgKyBrZXkgKyBcIicgb24gaG90IHJlbG9hZGluZywgXCIgK1xuICAgICAgICAgICAgJ21hbnVhbCByZWxvYWQgaXMgbmVlZGVkJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUoXG4gICAgICAgIHBhdGguY29uY2F0KGtleSksXG4gICAgICAgIHRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpLFxuICAgICAgICBuZXdNb2R1bGUubW9kdWxlc1trZXldXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgZnVuY3Rpb25Bc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24nXG59O1xuXG52YXIgb2JqZWN0QXNzZXJ0ID0ge1xuICBhc3NlcnQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmhhbmRsZXIgPT09ICdmdW5jdGlvbicpOyB9LFxuICBleHBlY3RlZDogJ2Z1bmN0aW9uIG9yIG9iamVjdCB3aXRoIFwiaGFuZGxlclwiIGZ1bmN0aW9uJ1xufTtcblxudmFyIGFzc2VydFR5cGVzID0ge1xuICBnZXR0ZXJzOiBmdW5jdGlvbkFzc2VydCxcbiAgbXV0YXRpb25zOiBmdW5jdGlvbkFzc2VydCxcbiAgYWN0aW9uczogb2JqZWN0QXNzZXJ0XG59O1xuXG5mdW5jdGlvbiBhc3NlcnRSYXdNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSkge1xuICBPYmplY3Qua2V5cyhhc3NlcnRUeXBlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFyYXdNb2R1bGVba2V5XSkgeyByZXR1cm4gfVxuXG4gICAgdmFyIGFzc2VydE9wdGlvbnMgPSBhc3NlcnRUeXBlc1trZXldO1xuXG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZVtrZXldLCBmdW5jdGlvbiAodmFsdWUsIHR5cGUpIHtcbiAgICAgIGFzc2VydChcbiAgICAgICAgYXNzZXJ0T3B0aW9ucy5hc3NlcnQodmFsdWUpLFxuICAgICAgICBtYWtlQXNzZXJ0aW9uTWVzc2FnZShwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBhc3NlcnRPcHRpb25zLmV4cGVjdGVkKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VBc3NlcnRpb25NZXNzYWdlIChwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBleHBlY3RlZCkge1xuICB2YXIgYnVmID0ga2V5ICsgXCIgc2hvdWxkIGJlIFwiICsgZXhwZWN0ZWQgKyBcIiBidXQgXFxcIlwiICsga2V5ICsgXCIuXCIgKyB0eXBlICsgXCJcXFwiXCI7XG4gIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICBidWYgKz0gXCIgaW4gbW9kdWxlIFxcXCJcIiArIChwYXRoLmpvaW4oJy4nKSkgKyBcIlxcXCJcIjtcbiAgfVxuICBidWYgKz0gXCIgaXMgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsdWUpKSArIFwiLlwiO1xuICByZXR1cm4gYnVmXG59XG5cbnZhciBWdWU7IC8vIGJpbmQgb24gaW5zdGFsbFxuXG52YXIgU3RvcmUgPSBmdW5jdGlvbiBTdG9yZSAob3B0aW9ucykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgLy8gQXV0byBpbnN0YWxsIGlmIGl0IGlzIG5vdCBkb25lIHlldCBhbmQgYHdpbmRvd2AgaGFzIGBWdWVgLlxuICAvLyBUbyBhbGxvdyB1c2VycyB0byBhdm9pZCBhdXRvLWluc3RhbGxhdGlvbiBpbiBzb21lIGNhc2VzLFxuICAvLyB0aGlzIGNvZGUgc2hvdWxkIGJlIHBsYWNlZCBoZXJlLiBTZWUgIzczMVxuICBpZiAoIVZ1ZSAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVnVlKSB7XG4gICAgaW5zdGFsbCh3aW5kb3cuVnVlKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KFZ1ZSwgXCJtdXN0IGNhbGwgVnVlLnVzZShWdWV4KSBiZWZvcmUgY3JlYXRpbmcgYSBzdG9yZSBpbnN0YW5jZS5cIik7XG4gICAgYXNzZXJ0KHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJywgXCJ2dWV4IHJlcXVpcmVzIGEgUHJvbWlzZSBwb2x5ZmlsbCBpbiB0aGlzIGJyb3dzZXIuXCIpO1xuICAgIGFzc2VydCh0aGlzIGluc3RhbmNlb2YgU3RvcmUsIFwiU3RvcmUgbXVzdCBiZSBjYWxsZWQgd2l0aCB0aGUgbmV3IG9wZXJhdG9yLlwiKTtcbiAgfVxuXG4gIHZhciBwbHVnaW5zID0gb3B0aW9ucy5wbHVnaW5zOyBpZiAoIHBsdWdpbnMgPT09IHZvaWQgMCApIHBsdWdpbnMgPSBbXTtcbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0OyBpZiAoIHN0cmljdCA9PT0gdm9pZCAwICkgc3RyaWN0ID0gZmFsc2U7XG5cbiAgdmFyIHN0YXRlID0gb3B0aW9ucy5zdGF0ZTsgaWYgKCBzdGF0ZSA9PT0gdm9pZCAwICkgc3RhdGUgPSB7fTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHN0YXRlID0gc3RhdGUoKSB8fCB7fTtcbiAgfVxuXG4gIC8vIHN0b3JlIGludGVybmFsIHN0YXRlXG4gIHRoaXMuX2NvbW1pdHRpbmcgPSBmYWxzZTtcbiAgdGhpcy5fYWN0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzID0gW107XG4gIHRoaXMuX211dGF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX3dyYXBwZWRHZXR0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fbW9kdWxlcyA9IG5ldyBNb2R1bGVDb2xsZWN0aW9uKG9wdGlvbnMpO1xuICB0aGlzLl9tb2R1bGVzTmFtZXNwYWNlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcbiAgdGhpcy5fd2F0Y2hlclZNID0gbmV3IFZ1ZSgpO1xuXG4gIC8vIGJpbmQgY29tbWl0IGFuZCBkaXNwYXRjaCB0byBzZWxmXG4gIHZhciBzdG9yZSA9IHRoaXM7XG4gIHZhciByZWYgPSB0aGlzO1xuICB2YXIgZGlzcGF0Y2ggPSByZWYuZGlzcGF0Y2g7XG4gIHZhciBjb21taXQgPSByZWYuY29tbWl0O1xuICB0aGlzLmRpc3BhdGNoID0gZnVuY3Rpb24gYm91bmREaXNwYXRjaCAodHlwZSwgcGF5bG9hZCkge1xuICAgIHJldHVybiBkaXNwYXRjaC5jYWxsKHN0b3JlLCB0eXBlLCBwYXlsb2FkKVxuICB9O1xuICB0aGlzLmNvbW1pdCA9IGZ1bmN0aW9uIGJvdW5kQ29tbWl0ICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbW1pdC5jYWxsKHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBvcHRpb25zKVxuICB9O1xuXG4gIC8vIHN0cmljdCBtb2RlXG4gIHRoaXMuc3RyaWN0ID0gc3RyaWN0O1xuXG4gIC8vIGluaXQgcm9vdCBtb2R1bGUuXG4gIC8vIHRoaXMgYWxzbyByZWN1cnNpdmVseSByZWdpc3RlcnMgYWxsIHN1Yi1tb2R1bGVzXG4gIC8vIGFuZCBjb2xsZWN0cyBhbGwgbW9kdWxlIGdldHRlcnMgaW5zaWRlIHRoaXMuX3dyYXBwZWRHZXR0ZXJzXG4gIGluc3RhbGxNb2R1bGUodGhpcywgc3RhdGUsIFtdLCB0aGlzLl9tb2R1bGVzLnJvb3QpO1xuXG4gIC8vIGluaXRpYWxpemUgdGhlIHN0b3JlIHZtLCB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHJlYWN0aXZpdHlcbiAgLy8gKGFsc28gcmVnaXN0ZXJzIF93cmFwcGVkR2V0dGVycyBhcyBjb21wdXRlZCBwcm9wZXJ0aWVzKVxuICByZXNldFN0b3JlVk0odGhpcywgc3RhdGUpO1xuXG4gIC8vIGFwcGx5IHBsdWdpbnNcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHsgcmV0dXJuIHBsdWdpbih0aGlzJDEpOyB9KTtcblxuICBpZiAoVnVlLmNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xQbHVnaW4odGhpcyk7XG4gIH1cbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IHN0YXRlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5zdGF0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl92bS5fZGF0YS4kJHN0YXRlXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuc3RhdGUuc2V0ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQoZmFsc2UsIFwiVXNlIHN0b3JlLnJlcGxhY2VTdGF0ZSgpIHRvIGV4cGxpY2l0IHJlcGxhY2Ugc3RvcmUgc3RhdGUuXCIpO1xuICB9XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuY29tbWl0ID0gZnVuY3Rpb24gY29tbWl0IChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGNvbW1pdFxuICB2YXIgcmVmID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgIHZhciBwYXlsb2FkID0gcmVmLnBheWxvYWQ7XG4gICAgdmFyIG9wdGlvbnMgPSByZWYub3B0aW9ucztcblxuICB2YXIgbXV0YXRpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fbXV0YXRpb25zW3R5cGVdO1xuICBpZiAoIWVudHJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIGVudHJ5LmZvckVhY2goZnVuY3Rpb24gY29tbWl0SXRlcmF0b3IgKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIocGF5bG9hZCk7XG4gICAgfSk7XG4gIH0pO1xuICB0aGlzLl9zdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1YihtdXRhdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG5cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBvcHRpb25zICYmIG9wdGlvbnMuc2lsZW50XG4gICkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIFwiW3Z1ZXhdIG11dGF0aW9uIHR5cGU6IFwiICsgdHlwZSArIFwiLiBTaWxlbnQgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQuIFwiICtcbiAgICAgICdVc2UgdGhlIGZpbHRlciBmdW5jdGlvbmFsaXR5IGluIHRoZSB2dWUtZGV2dG9vbHMnXG4gICAgKTtcbiAgfVxufTtcblxuU3RvcmUucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2ggKF90eXBlLCBfcGF5bG9hZCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vIGNoZWNrIG9iamVjdC1zdHlsZSBkaXNwYXRjaFxuICB2YXIgcmVmID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQpO1xuICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gICAgdmFyIHBheWxvYWQgPSByZWYucGF5bG9hZDtcblxuICB2YXIgYWN0aW9uID0geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkIH07XG4gIHZhciBlbnRyeSA9IHRoaXMuX2FjdGlvbnNbdHlwZV07XG4gIGlmICghZW50cnkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBhY3Rpb24gdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIoYWN0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcblxuICByZXR1cm4gZW50cnkubGVuZ3RoID4gMVxuICAgID8gUHJvbWlzZS5hbGwoZW50cnkubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBoYW5kbGVyKHBheWxvYWQpOyB9KSlcbiAgICA6IGVudHJ5WzBdKHBheWxvYWQpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlIChmbikge1xuICByZXR1cm4gZ2VuZXJpY1N1YnNjcmliZShmbiwgdGhpcy5fc3Vic2NyaWJlcnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUuc3Vic2NyaWJlQWN0aW9uID0gZnVuY3Rpb24gc3Vic2NyaWJlQWN0aW9uIChmbikge1xuICByZXR1cm4gZ2VuZXJpY1N1YnNjcmliZShmbiwgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbiB3YXRjaCAoZ2V0dGVyLCBjYiwgb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBnZXR0ZXIgPT09ICdmdW5jdGlvbicsIFwic3RvcmUud2F0Y2ggb25seSBhY2NlcHRzIGEgZnVuY3Rpb24uXCIpO1xuICB9XG4gIHJldHVybiB0aGlzLl93YXRjaGVyVk0uJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldHRlcih0aGlzJDEuc3RhdGUsIHRoaXMkMS5nZXR0ZXJzKTsgfSwgY2IsIG9wdGlvbnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVwbGFjZVN0YXRlID0gZnVuY3Rpb24gcmVwbGFjZVN0YXRlIChzdGF0ZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHRoaXMkMS5fdm0uX2RhdGEuJCRzdGF0ZSA9IHN0YXRlO1xuICB9KTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyTW9kdWxlIChwYXRoLCByYXdNb2R1bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICAgIGFzc2VydChwYXRoLmxlbmd0aCA+IDAsICdjYW5ub3QgcmVnaXN0ZXIgdGhlIHJvb3QgbW9kdWxlIGJ5IHVzaW5nIHJlZ2lzdGVyTW9kdWxlLicpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy5yZWdpc3RlcihwYXRoLCByYXdNb2R1bGUpO1xuICBpbnN0YWxsTW9kdWxlKHRoaXMsIHRoaXMuc3RhdGUsIHBhdGgsIHRoaXMuX21vZHVsZXMuZ2V0KHBhdGgpLCBvcHRpb25zLnByZXNlcnZlU3RhdGUpO1xuICAvLyByZXNldCBzdG9yZSB0byB1cGRhdGUgZ2V0dGVycy4uLlxuICByZXNldFN0b3JlVk0odGhpcywgdGhpcy5zdGF0ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUudW5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJNb2R1bGUgKHBhdGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy51bnJlZ2lzdGVyKHBhdGgpO1xuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZSh0aGlzJDEuc3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBWdWUuZGVsZXRlKHBhcmVudFN0YXRlLCBwYXRoW3BhdGgubGVuZ3RoIC0gMV0pO1xuICB9KTtcbiAgcmVzZXRTdG9yZSh0aGlzKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5ob3RVcGRhdGUgPSBmdW5jdGlvbiBob3RVcGRhdGUgKG5ld09wdGlvbnMpIHtcbiAgdGhpcy5fbW9kdWxlcy51cGRhdGUobmV3T3B0aW9ucyk7XG4gIHJlc2V0U3RvcmUodGhpcywgdHJ1ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuX3dpdGhDb21taXQgPSBmdW5jdGlvbiBfd2l0aENvbW1pdCAoZm4pIHtcbiAgdmFyIGNvbW1pdHRpbmcgPSB0aGlzLl9jb21taXR0aW5nO1xuICB0aGlzLl9jb21taXR0aW5nID0gdHJ1ZTtcbiAgZm4oKTtcbiAgdGhpcy5fY29tbWl0dGluZyA9IGNvbW1pdHRpbmc7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3RvcmUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuZnVuY3Rpb24gZ2VuZXJpY1N1YnNjcmliZSAoZm4sIHN1YnMpIHtcbiAgaWYgKHN1YnMuaW5kZXhPZihmbikgPCAwKSB7XG4gICAgc3Vicy5wdXNoKGZuKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gc3Vicy5pbmRleE9mKGZuKTtcbiAgICBpZiAoaSA+IC0xKSB7XG4gICAgICBzdWJzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzZXRTdG9yZSAoc3RvcmUsIGhvdCkge1xuICBzdG9yZS5fYWN0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl9tdXRhdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBzdGF0ZSA9IHN0b3JlLnN0YXRlO1xuICAvLyBpbml0IGFsbCBtb2R1bGVzXG4gIGluc3RhbGxNb2R1bGUoc3RvcmUsIHN0YXRlLCBbXSwgc3RvcmUuX21vZHVsZXMucm9vdCwgdHJ1ZSk7XG4gIC8vIHJlc2V0IHZtXG4gIHJlc2V0U3RvcmVWTShzdG9yZSwgc3RhdGUsIGhvdCk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RvcmVWTSAoc3RvcmUsIHN0YXRlLCBob3QpIHtcbiAgdmFyIG9sZFZtID0gc3RvcmUuX3ZtO1xuXG4gIC8vIGJpbmQgc3RvcmUgcHVibGljIGdldHRlcnNcbiAgc3RvcmUuZ2V0dGVycyA9IHt9O1xuICB2YXIgd3JhcHBlZEdldHRlcnMgPSBzdG9yZS5fd3JhcHBlZEdldHRlcnM7XG4gIHZhciBjb21wdXRlZCA9IHt9O1xuICBmb3JFYWNoVmFsdWUod3JhcHBlZEdldHRlcnMsIGZ1bmN0aW9uIChmbiwga2V5KSB7XG4gICAgLy8gdXNlIGNvbXB1dGVkIHRvIGxldmVyYWdlIGl0cyBsYXp5LWNhY2hpbmcgbWVjaGFuaXNtXG4gICAgY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZuKHN0b3JlKTsgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3RvcmUuZ2V0dGVycywga2V5LCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLl92bVtrZXldOyB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSAvLyBmb3IgbG9jYWwgZ2V0dGVyc1xuICAgIH0pO1xuICB9KTtcblxuICAvLyB1c2UgYSBWdWUgaW5zdGFuY2UgdG8gc3RvcmUgdGhlIHN0YXRlIHRyZWVcbiAgLy8gc3VwcHJlc3Mgd2FybmluZ3MganVzdCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBhZGRlZFxuICAvLyBzb21lIGZ1bmt5IGdsb2JhbCBtaXhpbnNcbiAgdmFyIHNpbGVudCA9IFZ1ZS5jb25maWcuc2lsZW50O1xuICBWdWUuY29uZmlnLnNpbGVudCA9IHRydWU7XG4gIHN0b3JlLl92bSA9IG5ldyBWdWUoe1xuICAgIGRhdGE6IHtcbiAgICAgICQkc3RhdGU6IHN0YXRlXG4gICAgfSxcbiAgICBjb21wdXRlZDogY29tcHV0ZWRcbiAgfSk7XG4gIFZ1ZS5jb25maWcuc2lsZW50ID0gc2lsZW50O1xuXG4gIC8vIGVuYWJsZSBzdHJpY3QgbW9kZSBmb3IgbmV3IHZtXG4gIGlmIChzdG9yZS5zdHJpY3QpIHtcbiAgICBlbmFibGVTdHJpY3RNb2RlKHN0b3JlKTtcbiAgfVxuXG4gIGlmIChvbGRWbSkge1xuICAgIGlmIChob3QpIHtcbiAgICAgIC8vIGRpc3BhdGNoIGNoYW5nZXMgaW4gYWxsIHN1YnNjcmliZWQgd2F0Y2hlcnNcbiAgICAgIC8vIHRvIGZvcmNlIGdldHRlciByZS1ldmFsdWF0aW9uIGZvciBob3QgcmVsb2FkaW5nLlxuICAgICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBvbGRWbS5fZGF0YS4kJHN0YXRlID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBWdWUubmV4dFRpY2soZnVuY3Rpb24gKCkgeyByZXR1cm4gb2xkVm0uJGRlc3Ryb3koKTsgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zdGFsbE1vZHVsZSAoc3RvcmUsIHJvb3RTdGF0ZSwgcGF0aCwgbW9kdWxlLCBob3QpIHtcbiAgdmFyIGlzUm9vdCA9ICFwYXRoLmxlbmd0aDtcbiAgdmFyIG5hbWVzcGFjZSA9IHN0b3JlLl9tb2R1bGVzLmdldE5hbWVzcGFjZShwYXRoKTtcblxuICAvLyByZWdpc3RlciBpbiBuYW1lc3BhY2UgbWFwXG4gIGlmIChtb2R1bGUubmFtZXNwYWNlZCkge1xuICAgIHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV0gPSBtb2R1bGU7XG4gIH1cblxuICAvLyBzZXQgc3RhdGVcbiAgaWYgKCFpc1Jvb3QgJiYgIWhvdCkge1xuICAgIHZhciBwYXJlbnRTdGF0ZSA9IGdldE5lc3RlZFN0YXRlKHJvb3RTdGF0ZSwgcGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIHZhciBtb2R1bGVOYW1lID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIHN0b3JlLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICAgIFZ1ZS5zZXQocGFyZW50U3RhdGUsIG1vZHVsZU5hbWUsIG1vZHVsZS5zdGF0ZSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgbG9jYWwgPSBtb2R1bGUuY29udGV4dCA9IG1ha2VMb2NhbENvbnRleHQoc3RvcmUsIG5hbWVzcGFjZSwgcGF0aCk7XG5cbiAgbW9kdWxlLmZvckVhY2hNdXRhdGlvbihmdW5jdGlvbiAobXV0YXRpb24sIGtleSkge1xuICAgIHZhciBuYW1lc3BhY2VkVHlwZSA9IG5hbWVzcGFjZSArIGtleTtcbiAgICByZWdpc3Rlck11dGF0aW9uKHN0b3JlLCBuYW1lc3BhY2VkVHlwZSwgbXV0YXRpb24sIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hBY3Rpb24oZnVuY3Rpb24gKGFjdGlvbiwga2V5KSB7XG4gICAgdmFyIHR5cGUgPSBhY3Rpb24ucm9vdCA/IGtleSA6IG5hbWVzcGFjZSArIGtleTtcbiAgICB2YXIgaGFuZGxlciA9IGFjdGlvbi5oYW5kbGVyIHx8IGFjdGlvbjtcbiAgICByZWdpc3RlckFjdGlvbihzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaEdldHRlcihmdW5jdGlvbiAoZ2V0dGVyLCBrZXkpIHtcbiAgICB2YXIgbmFtZXNwYWNlZFR5cGUgPSBuYW1lc3BhY2UgKyBrZXk7XG4gICAgcmVnaXN0ZXJHZXR0ZXIoc3RvcmUsIG5hbWVzcGFjZWRUeXBlLCBnZXR0ZXIsIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hDaGlsZChmdW5jdGlvbiAoY2hpbGQsIGtleSkge1xuICAgIGluc3RhbGxNb2R1bGUoc3RvcmUsIHJvb3RTdGF0ZSwgcGF0aC5jb25jYXQoa2V5KSwgY2hpbGQsIGhvdCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIG1ha2UgbG9jYWxpemVkIGRpc3BhdGNoLCBjb21taXQsIGdldHRlcnMgYW5kIHN0YXRlXG4gKiBpZiB0aGVyZSBpcyBubyBuYW1lc3BhY2UsIGp1c3QgdXNlIHJvb3Qgb25lc1xuICovXG5mdW5jdGlvbiBtYWtlTG9jYWxDb250ZXh0IChzdG9yZSwgbmFtZXNwYWNlLCBwYXRoKSB7XG4gIHZhciBub05hbWVzcGFjZSA9IG5hbWVzcGFjZSA9PT0gJyc7XG5cbiAgdmFyIGxvY2FsID0ge1xuICAgIGRpc3BhdGNoOiBub05hbWVzcGFjZSA/IHN0b3JlLmRpc3BhdGNoIDogZnVuY3Rpb24gKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBhcmdzID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICAgIHZhciBwYXlsb2FkID0gYXJncy5wYXlsb2FkO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmdzLm9wdGlvbnM7XG4gICAgICB2YXIgdHlwZSA9IGFyZ3MudHlwZTtcblxuICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnJvb3QpIHtcbiAgICAgICAgdHlwZSA9IG5hbWVzcGFjZSArIHR5cGU7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzdG9yZS5fYWN0aW9uc1t0eXBlXSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbG9jYWwgYWN0aW9uIHR5cGU6IFwiICsgKGFyZ3MudHlwZSkgKyBcIiwgZ2xvYmFsIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaCh0eXBlLCBwYXlsb2FkKVxuICAgIH0sXG5cbiAgICBjb21taXQ6IG5vTmFtZXNwYWNlID8gc3RvcmUuY29tbWl0IDogZnVuY3Rpb24gKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBhcmdzID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICAgIHZhciBwYXlsb2FkID0gYXJncy5wYXlsb2FkO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmdzLm9wdGlvbnM7XG4gICAgICB2YXIgdHlwZSA9IGFyZ3MudHlwZTtcblxuICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnJvb3QpIHtcbiAgICAgICAgdHlwZSA9IG5hbWVzcGFjZSArIHR5cGU7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzdG9yZS5fbXV0YXRpb25zW3R5cGVdKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBsb2NhbCBtdXRhdGlvbiB0eXBlOiBcIiArIChhcmdzLnR5cGUpICsgXCIsIGdsb2JhbCB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdG9yZS5jb21taXQodHlwZSwgcGF5bG9hZCwgb3B0aW9ucyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIGdldHRlcnMgYW5kIHN0YXRlIG9iamVjdCBtdXN0IGJlIGdvdHRlbiBsYXppbHlcbiAgLy8gYmVjYXVzZSB0aGV5IHdpbGwgYmUgY2hhbmdlZCBieSB2bSB1cGRhdGVcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobG9jYWwsIHtcbiAgICBnZXR0ZXJzOiB7XG4gICAgICBnZXQ6IG5vTmFtZXNwYWNlXG4gICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuZ2V0dGVyczsgfVxuICAgICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1ha2VMb2NhbEdldHRlcnMoc3RvcmUsIG5hbWVzcGFjZSk7IH1cbiAgICB9LFxuICAgIHN0YXRlOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldE5lc3RlZFN0YXRlKHN0b3JlLnN0YXRlLCBwYXRoKTsgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGxvY2FsXG59XG5cbmZ1bmN0aW9uIG1ha2VMb2NhbEdldHRlcnMgKHN0b3JlLCBuYW1lc3BhY2UpIHtcbiAgdmFyIGdldHRlcnNQcm94eSA9IHt9O1xuXG4gIHZhciBzcGxpdFBvcyA9IG5hbWVzcGFjZS5sZW5ndGg7XG4gIE9iamVjdC5rZXlzKHN0b3JlLmdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAvLyBza2lwIGlmIHRoZSB0YXJnZXQgZ2V0dGVyIGlzIG5vdCBtYXRjaCB0aGlzIG5hbWVzcGFjZVxuICAgIGlmICh0eXBlLnNsaWNlKDAsIHNwbGl0UG9zKSAhPT0gbmFtZXNwYWNlKSB7IHJldHVybiB9XG5cbiAgICAvLyBleHRyYWN0IGxvY2FsIGdldHRlciB0eXBlXG4gICAgdmFyIGxvY2FsVHlwZSA9IHR5cGUuc2xpY2Uoc3BsaXRQb3MpO1xuXG4gICAgLy8gQWRkIGEgcG9ydCB0byB0aGUgZ2V0dGVycyBwcm94eS5cbiAgICAvLyBEZWZpbmUgYXMgZ2V0dGVyIHByb3BlcnR5IGJlY2F1c2VcbiAgICAvLyB3ZSBkbyBub3Qgd2FudCB0byBldmFsdWF0ZSB0aGUgZ2V0dGVycyBpbiB0aGlzIHRpbWUuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdldHRlcnNQcm94eSwgbG9jYWxUeXBlLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldHRlcnNbdHlwZV07IH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBnZXR0ZXJzUHJveHlcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJNdXRhdGlvbiAoc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKSB7XG4gIHZhciBlbnRyeSA9IHN0b3JlLl9tdXRhdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9tdXRhdGlvbnNbdHlwZV0gPSBbXSk7XG4gIGVudHJ5LnB1c2goZnVuY3Rpb24gd3JhcHBlZE11dGF0aW9uSGFuZGxlciAocGF5bG9hZCkge1xuICAgIGhhbmRsZXIuY2FsbChzdG9yZSwgbG9jYWwuc3RhdGUsIHBheWxvYWQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJBY3Rpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fYWN0aW9uc1t0eXBlXSB8fCAoc3RvcmUuX2FjdGlvbnNbdHlwZV0gPSBbXSk7XG4gIGVudHJ5LnB1c2goZnVuY3Rpb24gd3JhcHBlZEFjdGlvbkhhbmRsZXIgKHBheWxvYWQsIGNiKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuY2FsbChzdG9yZSwge1xuICAgICAgZGlzcGF0Y2g6IGxvY2FsLmRpc3BhdGNoLFxuICAgICAgY29tbWl0OiBsb2NhbC5jb21taXQsXG4gICAgICBnZXR0ZXJzOiBsb2NhbC5nZXR0ZXJzLFxuICAgICAgc3RhdGU6IGxvY2FsLnN0YXRlLFxuICAgICAgcm9vdEdldHRlcnM6IHN0b3JlLmdldHRlcnMsXG4gICAgICByb290U3RhdGU6IHN0b3JlLnN0YXRlXG4gICAgfSwgcGF5bG9hZCwgY2IpO1xuICAgIGlmICghaXNQcm9taXNlKHJlcykpIHtcbiAgICAgIHJlcyA9IFByb21pc2UucmVzb2x2ZShyZXMpO1xuICAgIH1cbiAgICBpZiAoc3RvcmUuX2RldnRvb2xIb29rKSB7XG4gICAgICByZXR1cm4gcmVzLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgc3RvcmUuX2RldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6ZXJyb3InLCBlcnIpO1xuICAgICAgICB0aHJvdyBlcnJcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXNcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlckdldHRlciAoc3RvcmUsIHR5cGUsIHJhd0dldHRlciwgbG9jYWwpIHtcbiAgaWYgKHN0b3JlLl93cmFwcGVkR2V0dGVyc1t0eXBlXSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBkdXBsaWNhdGUgZ2V0dGVyIGtleTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIHN0b3JlLl93cmFwcGVkR2V0dGVyc1t0eXBlXSA9IGZ1bmN0aW9uIHdyYXBwZWRHZXR0ZXIgKHN0b3JlKSB7XG4gICAgcmV0dXJuIHJhd0dldHRlcihcbiAgICAgIGxvY2FsLnN0YXRlLCAvLyBsb2NhbCBzdGF0ZVxuICAgICAgbG9jYWwuZ2V0dGVycywgLy8gbG9jYWwgZ2V0dGVyc1xuICAgICAgc3RvcmUuc3RhdGUsIC8vIHJvb3Qgc3RhdGVcbiAgICAgIHN0b3JlLmdldHRlcnMgLy8gcm9vdCBnZXR0ZXJzXG4gICAgKVxuICB9O1xufVxuXG5mdW5jdGlvbiBlbmFibGVTdHJpY3RNb2RlIChzdG9yZSkge1xuICBzdG9yZS5fdm0uJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEuJCRzdGF0ZSB9LCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGFzc2VydChzdG9yZS5fY29tbWl0dGluZywgXCJEbyBub3QgbXV0YXRlIHZ1ZXggc3RvcmUgc3RhdGUgb3V0c2lkZSBtdXRhdGlvbiBoYW5kbGVycy5cIik7XG4gICAgfVxuICB9LCB7IGRlZXA6IHRydWUsIHN5bmM6IHRydWUgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE5lc3RlZFN0YXRlIChzdGF0ZSwgcGF0aCkge1xuICByZXR1cm4gcGF0aC5sZW5ndGhcbiAgICA/IHBhdGgucmVkdWNlKGZ1bmN0aW9uIChzdGF0ZSwga2V5KSB7IHJldHVybiBzdGF0ZVtrZXldOyB9LCBzdGF0ZSlcbiAgICA6IHN0YXRlXG59XG5cbmZ1bmN0aW9uIHVuaWZ5T2JqZWN0U3R5bGUgKHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgaWYgKGlzT2JqZWN0KHR5cGUpICYmIHR5cGUudHlwZSkge1xuICAgIG9wdGlvbnMgPSBwYXlsb2FkO1xuICAgIHBheWxvYWQgPSB0eXBlO1xuICAgIHR5cGUgPSB0eXBlLnR5cGU7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydCh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycsIChcIkV4cGVjdHMgc3RyaW5nIGFzIHRoZSB0eXBlLCBidXQgZm91bmQgXCIgKyAodHlwZW9mIHR5cGUpICsgXCIuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQsIG9wdGlvbnM6IG9wdGlvbnMgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsIChfVnVlKSB7XG4gIGlmIChWdWUgJiYgX1Z1ZSA9PT0gVnVlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdbdnVleF0gYWxyZWFkeSBpbnN0YWxsZWQuIFZ1ZS51c2UoVnVleCkgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IG9uY2UuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgVnVlID0gX1Z1ZTtcbiAgYXBwbHlNaXhpbihWdWUpO1xufVxuXG52YXIgbWFwU3RhdGUgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgc3RhdGVzKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKHN0YXRlcykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZFN0YXRlICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuJHN0b3JlLnN0YXRlO1xuICAgICAgdmFyIGdldHRlcnMgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzO1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBTdGF0ZScsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUgPSBtb2R1bGUuY29udGV4dC5zdGF0ZTtcbiAgICAgICAgZ2V0dGVycyA9IG1vZHVsZS5jb250ZXh0LmdldHRlcnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5jYWxsKHRoaXMsIHN0YXRlLCBnZXR0ZXJzKVxuICAgICAgICA6IHN0YXRlW3ZhbF1cbiAgICB9O1xuICAgIC8vIG1hcmsgdnVleCBnZXR0ZXIgZm9yIGRldnRvb2xzXG4gICAgcmVzW2tleV0udnVleCA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxudmFyIG1hcE11dGF0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBtdXRhdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAobXV0YXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkTXV0YXRpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIHZhciBjb21taXQgPSB0aGlzLiRzdG9yZS5jb21taXQ7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcE11dGF0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY29tbWl0ID0gbW9kdWxlLmNvbnRleHQuY29tbWl0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuYXBwbHkodGhpcywgW2NvbW1pdF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGNvbW1pdC5hcHBseSh0aGlzLiRzdG9yZSwgW3ZhbF0uY29uY2F0KGFyZ3MpKVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxudmFyIG1hcEdldHRlcnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgZ2V0dGVycykge1xuICB2YXIgcmVzID0ge307XG4gIG5vcm1hbGl6ZU1hcChnZXR0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHZhbCA9IG5hbWVzcGFjZSArIHZhbDtcbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZEdldHRlciAoKSB7XG4gICAgICBpZiAobmFtZXNwYWNlICYmICFnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcEdldHRlcnMnLCBuYW1lc3BhY2UpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgISh2YWwgaW4gdGhpcy4kc3RvcmUuZ2V0dGVycykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBnZXR0ZXI6IFwiICsgdmFsKSk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbdmFsXVxuICAgIH07XG4gICAgLy8gbWFyayB2dWV4IGdldHRlciBmb3IgZGV2dG9vbHNcbiAgICByZXNba2V5XS52dWV4ID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG52YXIgbWFwQWN0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBhY3Rpb25zKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKGFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRBY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIHZhciBkaXNwYXRjaCA9IHRoaXMuJHN0b3JlLmRpc3BhdGNoO1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBBY3Rpb25zJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBkaXNwYXRjaCA9IG1vZHVsZS5jb250ZXh0LmRpc3BhdGNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuYXBwbHkodGhpcywgW2Rpc3BhdGNoXS5jb25jYXQoYXJncykpXG4gICAgICAgIDogZGlzcGF0Y2guYXBwbHkodGhpcy4kc3RvcmUsIFt2YWxdLmNvbmNhdChhcmdzKSlcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbnZhciBjcmVhdGVOYW1lc3BhY2VkSGVscGVycyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UpIHsgcmV0dXJuICh7XG4gIG1hcFN0YXRlOiBtYXBTdGF0ZS5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcEdldHRlcnM6IG1hcEdldHRlcnMuYmluZChudWxsLCBuYW1lc3BhY2UpLFxuICBtYXBNdXRhdGlvbnM6IG1hcE11dGF0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcEFjdGlvbnM6IG1hcEFjdGlvbnMuYmluZChudWxsLCBuYW1lc3BhY2UpXG59KTsgfTtcblxuZnVuY3Rpb24gbm9ybWFsaXplTWFwIChtYXApIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobWFwKVxuICAgID8gbWFwLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBrZXkgfSk7IH0pXG4gICAgOiBPYmplY3Qua2V5cyhtYXApLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBtYXBba2V5XSB9KTsgfSlcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZXNwYWNlIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWFwKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICBtYXAgPSBuYW1lc3BhY2U7XG4gICAgICBuYW1lc3BhY2UgPSAnJztcbiAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZS5jaGFyQXQobmFtZXNwYWNlLmxlbmd0aCAtIDEpICE9PSAnLycpIHtcbiAgICAgIG5hbWVzcGFjZSArPSAnLyc7XG4gICAgfVxuICAgIHJldHVybiBmbihuYW1lc3BhY2UsIG1hcClcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRNb2R1bGVCeU5hbWVzcGFjZSAoc3RvcmUsIGhlbHBlciwgbmFtZXNwYWNlKSB7XG4gIHZhciBtb2R1bGUgPSBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhbW9kdWxlKSB7XG4gICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gbW9kdWxlIG5hbWVzcGFjZSBub3QgZm91bmQgaW4gXCIgKyBoZWxwZXIgKyBcIigpOiBcIiArIG5hbWVzcGFjZSkpO1xuICB9XG4gIHJldHVybiBtb2R1bGVcbn1cblxudmFyIGluZGV4X2VzbSA9IHtcbiAgU3RvcmU6IFN0b3JlLFxuICBpbnN0YWxsOiBpbnN0YWxsLFxuICB2ZXJzaW9uOiAnMy4wLjEnLFxuICBtYXBTdGF0ZTogbWFwU3RhdGUsXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLFxuICBtYXBHZXR0ZXJzOiBtYXBHZXR0ZXJzLFxuICBtYXBBY3Rpb25zOiBtYXBBY3Rpb25zLFxuICBjcmVhdGVOYW1lc3BhY2VkSGVscGVyczogY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnNcbn07XG5cbmV4cG9ydCB7IFN0b3JlLCBpbnN0YWxsLCBtYXBTdGF0ZSwgbWFwTXV0YXRpb25zLCBtYXBHZXR0ZXJzLCBtYXBBY3Rpb25zLCBjcmVhdGVOYW1lc3BhY2VkSGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgaW5kZXhfZXNtO1xuIiwiLy8g5byV5YWl5YWo5bGAbWl4aW5cclxuaW1wb3J0IG1peGluIGZyb20gJy4vbGlicy9taXhpbi9taXhpbi5qcydcclxuLy8g5byV5YWl5YWz5LqO5piv5ZCmbWl4aW7pm4bmiJDlsI/nqIvluo/liIbkuqvnmoTphY3nva5cclxuLy8gaW1wb3J0IHd4c2hhcmUgZnJvbSAnLi9saWJzL21peGluL21wU2hhcmUuanMnXHJcbi8vIOWFqOWxgOaMgui9veW8leWFpWh0dHDnm7jlhbPor7fmsYLmi6bmiKrmj5Lku7ZcclxuaW1wb3J0IGh0dHAgZnJvbSAnLi9saWJzL3JlcXVlc3QnXHJcblxyXG5mdW5jdGlvbiB3cmFubmluZyhzdHIpIHtcclxuXHQvLyDlvIDlj5Hnjq/looPov5vooYzkv6Hmga/ovpPlh7os5Li76KaB5piv5LiA5Lqb5oql6ZSZ5L+h5oGvXHJcblx0Ly8g6L+Z5Liq546v5aKD55qE5p2l55Sx5piv5Zyo56iL5bqP57yW5YaZ5pe25YCZLOeCueWHu2h457yW6L6R5Zmo6L+Q6KGM6LCD6K+V5Luj56CB55qE5pe25YCZLOivpuingTpcclxuXHQvLyBcdGh0dHBzOi8vdW5pYXBwLmRjbG91ZC5pby9mcmFtZT9pZD0lZTUlYmMlODAlZTUlOGYlOTElZTclOGUlYWYlZTUlYTIlODMlZTUlOTIlOGMlZTclOTQlOWYlZTQlYmElYTclZTclOGUlYWYlZTUlYTIlODNcclxuXHRpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcclxuXHRcdGNvbnNvbGUud2FybihzdHIpXHJcblx0fVxyXG59XHJcblxyXG4vLyDlsJ3or5XliKTmlq3lnKjmoLnnm67lvZXnmoQvc3RvcmXkuK3mmK/lkKbmnIkkdS5taXhpbi5qc++8jOatpOaWh+S7tnVWaWV36buY6K6k5Li66ZyA6KaB5oyC5Zyo5Yiw5YWo5bGA55qEdnVleOeahHN0YXRl5Y+Y6YePXHJcbi8vIEhYMi42LjEx54mI5pysLOaUvuWIsHRyeeS4rSzmjqfliLblj7Dkvp3nhLbkvJrorablkYos5pqC5pe25LiN55So5q2k5pa55byP77yMXHJcbi8vIGxldCB2dWV4U3RvcmUgPSB7fTtcclxuLy8gdHJ5IHtcclxuLy8gXHR2dWV4U3RvcmUgPSByZXF1aXJlKFwiQC9zdG9yZS8kdS5taXhpbi5qc1wiKTtcclxuLy8gfSBjYXRjaCAoZSkge1xyXG4vLyBcdC8vVE9ETyBoYW5kbGUgdGhlIGV4Y2VwdGlvblxyXG4vLyB9XHJcblxyXG4vLyBwb3N057G75Z6L5a+56LGh5Y+C5pWw6L2s5Li6Z2V057G75Z6LdXJs5Y+C5pWwXHJcbmltcG9ydCBxdWVyeVBhcmFtcyBmcm9tICcuL2xpYnMvZnVuY3Rpb24vcXVlcnlQYXJhbXMuanMnXHJcbi8vIOi3r+eUseWwgeijhVxyXG5pbXBvcnQgcm91dGUgZnJvbSAnLi9saWJzL2Z1bmN0aW9uL3JvdXRlLmpzJ1xyXG4vLyDml7bpl7TmoLzlvI/ljJZcclxuaW1wb3J0IHRpbWVGb3JtYXQgZnJvbSAnLi9saWJzL2Z1bmN0aW9uL3RpbWVGb3JtYXQuanMnXHJcbi8vIOaXtumXtOaIs+agvOW8j+WMlizov5Tlm57lpJrkuYXkuYvliY1cclxuaW1wb3J0IHRpbWVGcm9tIGZyb20gJy4vbGlicy9mdW5jdGlvbi90aW1lRnJvbS5qcydcclxuLy8g6aKc6Imy5riQ5Y+Y55u45YWzLGNvbG9yR3JhZGllbnQt6aKc6Imy5riQ5Y+YLGhleFRvUmdiLeWNgeWFrei/m+WItuminOiJsui9rHJnYuminOiJsixyZ2JUb0hleC1yZ2LovazljYHlha3ov5vliLZcclxuaW1wb3J0IGNvbG9yR3JhZGllbnQgZnJvbSAnLi9saWJzL2Z1bmN0aW9uL2NvbG9yR3JhZGllbnQuanMnXHJcbi8vIOeUn+aIkOWFqOWxgOWUr+S4gGd1aWTlrZfnrKbkuLJcclxuaW1wb3J0IGd1aWQgZnJvbSAnLi9saWJzL2Z1bmN0aW9uL2d1aWQuanMnXHJcbi8vIOS4u+mimOebuOWFs+minOiJsixpbmZvfHN1Y2Nlc3N8d2FybmluZ3xwcmltYXJ5fGRlZmF1bHR8ZXJyb3Is5q2k6aKc6Imy5bey5ZyodXZpZXcuc2Nzc+S4reWumuS5iSzkvYbmmK/kuLpqc+S4reS5n+iDveS9v+eUqCzmlYXkuZ/lrprkuYnkuIDku71cclxuaW1wb3J0IGNvbG9yIGZyb20gJy4vbGlicy9mdW5jdGlvbi9jb2xvci5qcydcclxuLy8g5qC55o2udHlwZeiOt+WPluWbvuagh+WQjeensFxyXG5pbXBvcnQgdHlwZTJpY29uIGZyb20gJy4vbGlicy9mdW5jdGlvbi90eXBlMmljb24uanMnXHJcbi8vIOaJk+S5seaVsOe7hOeahOmhuuW6j1xyXG5pbXBvcnQgcmFuZG9tQXJyYXkgZnJvbSAnLi9saWJzL2Z1bmN0aW9uL3JhbmRvbUFycmF5LmpzJ1xyXG4vLyDlr7nosaHlkozmlbDnu4TnmoTmt7HluqblhYvpmoZcclxuaW1wb3J0IGRlZXBDbG9uZSBmcm9tICcuL2xpYnMvZnVuY3Rpb24vZGVlcENsb25lLmpzJ1xyXG4vLyDlr7nosaHmt7Hluqbmi7fotJ1cclxuaW1wb3J0IGRlZXBNZXJnZSBmcm9tICcuL2xpYnMvZnVuY3Rpb24vZGVlcE1lcmdlLmpzJ1xyXG4vLyDmt7vliqDljZXkvY1cclxuaW1wb3J0IGFkZFVuaXQgZnJvbSAnLi9saWJzL2Z1bmN0aW9uL2FkZFVuaXQuanMnXHJcblxyXG4vLyDop4TliJnmo4DpqoxcclxuaW1wb3J0IHRlc3QgZnJvbSAnLi9saWJzL2Z1bmN0aW9uL3Rlc3QuanMnXHJcbi8vIOmaj+acuuaVsFxyXG5pbXBvcnQgcmFuZG9tIGZyb20gJy4vbGlicy9mdW5jdGlvbi9yYW5kb20uanMnXHJcbi8vIOWOu+mZpOepuuagvFxyXG5pbXBvcnQgdHJpbSBmcm9tICcuL2xpYnMvZnVuY3Rpb24vdHJpbS5qcydcclxuLy8gdG9hc3Tmj5DnpLrvvIzlr7l1bmkuc2hvd1RvYXN055qE5bCB6KOFXHJcbmltcG9ydCB0b2FzdCBmcm9tICcuL2xpYnMvZnVuY3Rpb24vdG9hc3QuanMnXHJcbi8vIOiOt+WPlueItue7hOS7tuWPguaVsFxyXG5pbXBvcnQgZ2V0UGFyZW50IGZyb20gJy4vbGlicy9mdW5jdGlvbi9nZXRQYXJlbnQuanMnXHJcbi8vIOiOt+WPluaVtOS4queItue7hOS7tlxyXG5pbXBvcnQgJHBhcmVudCBmcm9tICcuL2xpYnMvZnVuY3Rpb24vJHBhcmVudC5qcydcclxuXHJcblxyXG4vLyDphY3nva7kv6Hmga9cclxuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2xpYnMvY29uZmlnL2NvbmZpZy5qcydcclxuLy8g5ZCE5Liq6ZyA6KaBZml4ZWTnmoTlnLDmlrnnmoR6LWluZGV46YWN572u5paH5Lu2XHJcbmltcG9ydCB6SW5kZXggZnJvbSAnLi9saWJzL2NvbmZpZy96SW5kZXguanMnXHJcblxyXG5jb25zdCAkdSA9IHtcclxuXHRxdWVyeVBhcmFtczogcXVlcnlQYXJhbXMsXHJcblx0cm91dGU6IHJvdXRlLFxyXG5cdHRpbWVGb3JtYXQ6IHRpbWVGb3JtYXQsXHJcblx0ZGF0ZTogdGltZUZvcm1hdCwgLy8g5Y+m5ZCNZGF0ZVxyXG5cdHRpbWVGcm9tLFxyXG5cdGNvbG9yR3JhZGllbnQ6IGNvbG9yR3JhZGllbnQuY29sb3JHcmFkaWVudCxcclxuXHRndWlkLFxyXG5cdGNvbG9yLFxyXG5cdHR5cGUyaWNvbixcclxuXHRyYW5kb21BcnJheSxcclxuXHR3cmFubmluZyxcclxuXHRnZXQ6IGh0dHAuZ2V0LFxyXG5cdHBvc3Q6IGh0dHAucG9zdCxcclxuXHRwdXQ6IGh0dHAucHV0LFxyXG5cdCdkZWxldGUnOiBodHRwLmRlbGV0ZSxcclxuXHRoZXhUb1JnYjogY29sb3JHcmFkaWVudC5oZXhUb1JnYixcclxuXHRyZ2JUb0hleDogY29sb3JHcmFkaWVudC5yZ2JUb0hleCxcclxuXHR0ZXN0LFxyXG5cdHJhbmRvbSxcclxuXHRkZWVwQ2xvbmUsXHJcblx0ZGVlcE1lcmdlLFxyXG5cdGdldFBhcmVudCxcclxuXHQkcGFyZW50LFxyXG5cdGFkZFVuaXQsXHJcblx0dHJpbSxcclxuXHR0eXBlOiBbJ3ByaW1hcnknLCAnc3VjY2VzcycsICdlcnJvcicsICd3YXJuaW5nJywgJ2luZm8nXSxcclxuXHRodHRwLFxyXG5cdHRvYXN0LFxyXG5cdGNvbmZpZywgLy8gdVZpZXfphY3nva7kv6Hmga/nm7jlhbPvvIzmr5TlpoLniYjmnKzlj7dcclxuXHR6SW5kZXhcclxufVxyXG5cclxuY29uc3QgaW5zdGFsbCA9IFZ1ZSA9PiB7XHJcblx0VnVlLm1peGluKG1peGluKVxyXG5cdGlmIChWdWUucHJvdG90eXBlLm9wZW5TaGFyZSkge1xyXG5cdFx0VnVlLm1peGluKG1wU2hhcmUpO1xyXG5cdH1cclxuXHQvLyBWdWUubWl4aW4odnVleFN0b3JlKTtcclxuXHQvLyDml7bpl7TmoLzlvI/ljJbvvIzlkIzml7bkuKTkuKrlkI3np7DvvIxkYXRl5ZKMdGltZUZvcm1hdFxyXG5cdFZ1ZS5maWx0ZXIoJ3RpbWVGb3JtYXQnLCAodGltZXN0YW1wLCBmb3JtYXQpID0+IHtcclxuXHRcdHJldHVybiB0aW1lRm9ybWF0KHRpbWVzdGFtcCwgZm9ybWF0KVxyXG5cdH0pXHJcblx0VnVlLmZpbHRlcignZGF0ZScsICh0aW1lc3RhbXAsIGZvcm1hdCkgPT4ge1xyXG5cdFx0cmV0dXJuIHRpbWVGb3JtYXQodGltZXN0YW1wLCBmb3JtYXQpXHJcblx0fSlcclxuXHQvLyDlsIblpJrkuYXku6XliY3nmoTmlrnms5XvvIzms6jlhaXliLDlhajlsYDov4fmu6TlmahcclxuXHRWdWUuZmlsdGVyKCd0aW1lRnJvbScsICh0aW1lc3RhbXAsIGZvcm1hdCkgPT4ge1xyXG5cdFx0cmV0dXJuIHRpbWVGcm9tKHRpbWVzdGFtcCwgZm9ybWF0KVxyXG5cdH0pXHJcblx0VnVlLnByb3RvdHlwZS4kdSA9ICR1XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRpbnN0YWxsXHJcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRkYXRhKCkge1xyXG5cdFx0cmV0dXJuIHt9XHJcblx0fSxcclxuXHRvbkxvYWQoKSB7XHJcblx0XHQvLyBnZXRSZWN05oyC6L295YiwJHXkuIrvvIzlm6DkuLrov5nmlrnms5XpnIDopoHkvb/nlKhpbih0aGlzKe+8jOaJgOS7peaXoOazleaKiuWug+eLrOeri+aIkOS4gOS4quWNleeLrOeahOaWh+S7tuWvvOWHulxyXG5cdFx0dGhpcy4kdS5nZXRSZWN0ID0gdGhpcy4kdUdldFJlY3RcclxuXHR9LFxyXG5cdG1ldGhvZHM6IHtcclxuXHRcdC8vIOafpeivouiKgueCueS/oeaBr1xyXG5cdFx0Ly8g55uu5YmN5q2k5pa55rOV5Zyo5pSv5LuY5a6d5bCP56iL5bqP5Lit5peg5rOV6I635Y+W57uE5Lu26Lef5o6l54K555qE5bC65a+477yM5Li65pSv5LuY5a6d55qEYnVnKDIwMjAtMDctMjEpXHJcblx0XHQvLyDop6PlhrPlip7ms5XkuLrlnKjnu4Tku7bmoLnpg6jlho3lpZfkuIDkuKrmsqHmnInku7vkvZXkvZznlKjnmoR2aWV35YWD57SgXHJcblx0XHQkdUdldFJlY3Qoc2VsZWN0b3IsIGFsbCkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcblx0XHRcdFx0dW5pLmNyZWF0ZVNlbGVjdG9yUXVlcnkoKS5cclxuXHRcdFx0XHRpbih0aGlzKVthbGwgPyAnc2VsZWN0QWxsJyA6ICdzZWxlY3QnXShzZWxlY3RvcilcclxuXHRcdFx0XHRcdC5ib3VuZGluZ0NsaWVudFJlY3QocmVjdCA9PiB7XHJcblx0XHRcdFx0XHRcdGlmIChhbGwgJiYgQXJyYXkuaXNBcnJheShyZWN0KSAmJiByZWN0Lmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUocmVjdClcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoIWFsbCAmJiByZWN0KSB7XHJcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShyZWN0KVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0LmV4ZWMoKVxyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cdH0sXHJcblx0b25SZWFjaEJvdHRvbSgpIHtcclxuXHRcdHVuaS4kZW1pdCgndU9uUmVhY2hCb3R0b20nKVxyXG5cdH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBbe1xyXG5cdFwibmFtZVwiOiBcIuWGsOW4jOm7juS4gOaXpeaDheS6uumHkeWtl+WhlOmmmeawtDPku7blpZflpbPlo6vmjIHkuYXmt6HpppnlpKfniYzmraPlk4FcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMjAwNC8xNS81YzlhNThlYTM4OTE0OGY3ODJmNjg0YzBkOTMxMzRlMT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUwLjFcIixcclxuXHRcIm51bVNhbGVzXCI6IDQsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIkFE5ZOB54mM5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxNTA5XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLnp63lvZLkuZ3mnIjnuqLml6nnuqLmqZk15pakLzEw5pak5Lit5p6c6KOF5qmZ5a2QXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMjcvN2U4ZGZjZmRjOGJkNDViNDg0NTAyZjljNmVkMjUyMjA/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTY5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTIzLjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDI3MyxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZWG5a625LqR5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA3NDhcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuS4ieWPquadvum8oOWdmuaenOWkp+ekvOWMheekvOebkuWkp+WQieWkp+WIqeWll+mkkDEyNjZnXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMDYvNDhjM2M4YjNiNjkyNGI4YmJiMTEyODg4ZWRkNDc0N2E/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE1OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU4Mi4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiA0MTksXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTEwMlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5bq35oCh5LmQ77yIa295bGXvvIkg5rau54Ok5LiA5L2T6ZSF6bqm6aWt55+z55S154On54Ok54KJ5a6255So5peg54Of55S154Ok55uY5LiN57KY54Ok6IKJ5rau54Ok54Gr6ZSF6biz6biv54Gr6ZSFWUgtS1kxNSDmtq7ng6TkuIDkvZPplIXvvIjlpKflj7flnIbmrL7vvIlcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xMC9kY2E4OTk3MTk1YmE0OWQzYjc5Y2JmZWI2MjdkMGJlYz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlOTk4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTQ5OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAzMjYsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTE3MFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi6KW/5Z+f576O5Yac5Y+k5r6I546J6JGh6JCE5bmyNTAwZyDmlrDnloblkJDpsoHnlarmj5DlrZBcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wOS81NmExNzQwZGRjYmQ0YzNhOWI5NGY5YzA0ZDQ4YjM1Mz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzAuOVwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTguOVwiLFxyXG5cdFwibnVtU2FsZXNcIjogMzEyLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLopb/ln5/nvo7lhpzml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDY0NlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5LiJ5Y+q5p2+6byg5Z2a5p6c5aSn56S85YyF56S855uS5LiH5LqL5Lqo6YCa5aWX6aSQMTU4OGdcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8wNi81Y2Y1OWFiYzg3MjY0M2E0YmIyYTI2YTA2MmE4M2JmNj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjY4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE2Mi4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAzMDksXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTEwNFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi6LS55YiX572X5qab5p6c5aiB5YyW5ben5YWL5Yqb6ZK755+z6KOFMTbnspJcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xOC82NDY2MzhlNDIzZDM0MTQ0Yjc0YTBkMzMzODMyZmVkNj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlNjguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNTguOFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMzA4LFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzNjNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuazieawj+WHgOawtOWZqOWutueUqOWOqOaIv+WNq+eUn+mXtOawtOm+meWktOi/h+a7pOWZqOiHquadpeawtOa7pOawtOWZqOWJjee9ruWHgOWMluawtOaculwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA2LzhjYTQ3M2U1ZmM2NjQ1YTBiODg5ODdhNmExMDE1YmZiP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUyMjAuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNTUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMzA4LFxyXG5cdFwicHRQcmljZVwiOiBcIsKlNDQuMFwiLFxyXG5cdFwic2hvcE5hbWVcIjogXCLmt7HlnLPluILms4nmsI/muIXnp5HmioDmnInpmZDlhazlj7hcIixcclxuXHRcIm9iaklkXCI6IDE4MFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5qyn6ZSQ6ZOC77yIT1JWSUJP77yJIOWSjOe+jmXlrrbmtq7ng6TkuIDkvZPnlLXngavplIVcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xMC8yZTJlYjUxMmU1OTE0YjM4YTU0MzM5NDZmMWEyYzkzNT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTIxOS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU2MDguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMjc1LFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlt6bnq4vnm7TokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDExNjZcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuiLj+aziuWwlCDvvIhTVVBPUu+8iea4qemmqOS5i+WutiDkuInku7blpZdUMTM2MFRcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8xMi8yNjc1ZDM2MTllOTQ0ODMwYmE4OGY2NWY3MWYxZDYyMT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzk5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE2OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAyMTMsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuiLj+aziuWwlOS4k+WNluW6l1wiLFxyXG5cdFwib2JqSWRcIjogNzMyXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLopb/ln5/nvo7lhpzlsbHoja/ohIbniYc1MGcqM+iii+iWhOeJh+iEhuiWr+eJh+WlveWQg+eahOWQg+i0p+S8kemXsumbtumjn+Wwj+WQg1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA5L2NlNzk2NTJiYzVmNzQwMzk4ZmYyYWI0Njk4YzQ3NjgzP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU0Ni45XCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyMC45XCIsXHJcblx0XCJudW1TYWxlc1wiOiAyMDgsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuilv+Wfn+e+juWGnOaXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogNjQ3XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLjgJDpppnmuK/nm7Tpgq7jgJHmoLzkuL3mnb5HdWVyaXNzb27lpYfov7npqazmsrnpnaLpnJw3MGdcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy9iMWQ0OWZmNzUwMmM0MGI4YjI1NDIzOTgzNjU3NjAxZj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTI4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTc5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDIwNyxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bid6ICA576O5aaG5YWo55CD6LStXCIsXHJcblx0XCJvYmpJZFwiOiAyODRcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuiVieS4i+Wwj+m7keS8njI1MOe6v+ezu+WIlyDmipjlj6DmmbTpm6jkvJ7lpbPpmLLntKvlpJbnur/lpKrpmLPpga7pmLPkvJ5cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yOC8xZDhkYzg4OGQ5Mjc0MzgyYTViODNjNTBjZTQ3MThkMT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjk5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE2OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAyMDcsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIue0ouiKmeeJueS4k+WNluW6l1wiLFxyXG5cdFwib2JqSWRcIjogNzQ3XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLjgJDopb/ln5/nvo7lhpznuqLmnqPmoLjmoYPmtL4zMDBn44CR5paw55aG54m55Lqn5omL5bel6Zu26aOf57qi5p6j5qC45qGD57OVXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDkvMmIxMDI5YWQ0ODYzNGMwZWE2Yjc2M2ZlZWNlYWQxMjM/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTU0LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTI5LjlcIixcclxuXHRcIm51bVNhbGVzXCI6IDIwNixcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi6KW/5Z+f576O5Yac5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA2NDVcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuS8mOWmrumprOayuea0l+WPkeawtOWOu+WxkeatoueXkuS/ruaKpOaflOmhuua4heeIveeUt+Wls+mAmueUqOiMtum6uOeVmemmmeS6rum7keWHgOWxkea0l+WPkeS5s1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzIwL2I0NzVkYWY0ODhkOTQ5YTI4ODRmMjAxNDJlM2U3NDQwP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUzOS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyOS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAxOTEsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW5v+W3nuiBmuaDoOWVhui0uOaciemZkOWFrOWPuFwiLFxyXG5cdFwib2JqSWRcIjogODE5XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlvrfms70g6K6w5b+G5qOJ5aWX6KOF57uE5ZCI77yI6IWw5p6VK1XlnovmnpXvvIlcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xMy82MWIyMmQ5NmFkOWY0Y2Y5ODI2NmEyNGFiOWI2YWNjYz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzU4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTI4Ni4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAxOTAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTI0N1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi44CQ6aaZ5riv55u06YKu44CRRGlvcui/quWlpeWPo+e6oueDiOeEsOiTnemHkeWUh+iGj+WPo+e6oiA4ODgj5ZOR5YWJXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvZWYzZmRiZGQ4NGU4NDBlYTkwZmViMjg2MjczNzg1ZTc/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTM1OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyMzUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMTgzLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLluJ3ogIDnvo7lpoblhajnkIPotK1cIixcclxuXHRcIm9iaklkXCI6IDMwN1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5bm/5Y+R6I2J5Y6f5omL5pKV6aOO5bmy54mb6IKJ5Y6f5ZGzXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTgvMGQ3MWY1YjgwN2Y5NDNmNWIyNzdjMDA3NWQ0ZTljMDA/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTQ5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTQ2LjhcIixcclxuXHRcIm51bVNhbGVzXCI6IDE4MixcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzU0XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlurfmtL4yMDIw5paw5qy+55yf55qu5aWz5YyF5pe25bCa566A57qm5qyn576O5aSW6LS45Y2V6IKp5pac6Leo5YyF77yI5Yqg5aSn54mI77yJXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMjAvMGJjZDA2Zjc5OTc4NDg2ZGEyYWU3OGUwY2YzMDE2Njc/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE2OS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU2OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAxNjQsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW6t+a0vuearuWFt+aXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogODAyXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLntKLoipnnibnnnJ/okIPlhbvpopzmqYTmpoTmsrkxNjBtbOaKpOiCpOaKpOWPkeWNuOWmhuayuVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzI4LzU2M2M0Yzc4NTYzZDQzY2M5YmUwMjJmYzYxZjE3NzJkP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUzOS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxOS45XCIsXHJcblx0XCJudW1TYWxlc1wiOiAxNTgsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIue0ouiKmeeJueS4k+WNluW6l1wiLFxyXG5cdFwib2JqSWRcIjogNjU1XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlurfmtL7lt6XljoLnm7TplIDml7blsJrnnJ/nmq7lpbPlo6vljZXogqnljIXliLrnu6Ppo47moLzmlpzmjI7ljIVcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yMC85NzBlYzY1NGZiODQ0YmUyYmI0YzQ3ZGM5OGU1NTI2OD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlNDk5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTIwOS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAxMzYsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW6t+a0vuearuWFt+aXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogODA4XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLoi4/ms4rlsJQg77yIU1VQT1LvvInngqvlvankuI3nspgg54WO6ZSFUEoyNE02XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMTIvMTUxZjNlMGFkNGMzNDRhMmFmMjA3N2IwMmE0Yjk1YTc/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTI5OS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxMjkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMTI4LFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLoi4/ms4rlsJTkuJPljZblupdcIixcclxuXHRcIm9iaklkXCI6IDczMFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5LyY5aauIOmprOayueaKpOWPkee0oOWPkeiGnOeUt+Wls+mAmueUqOmjmOmAuOihpeawtOWPkeiGnO+8iOWFjeiSuO+8iTQwMG1sXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMjAvYjVhMmFlZGRmNDZhNDYzMzllYWE0NTBhMjI4YmQ4ZGU/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTg5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTY4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDgyLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlub/lt57ogZrmg6DllYbotLjmnInpmZDlhazlj7hcIixcclxuXHRcIm9iaklkXCI6IDgxNlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi6bqm6aWt55+z54WO6ZSF5aSa5Yqf6IO95LiN57KY5bmz5bqV6ZSF5LiJ5ZCI5LiA5pep6aSQ6ZSFXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMjMvZWNlZWY3MzhkYzJjNDlkNjg4N2FkYzVlOGE5OWFhNGY/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTQ4OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxNjguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogNzYsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTM4M1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi6L+q6L+q5bC85Y2h6bqm6aWt55+z5aW26ZSF6JK46ZSF5LiN57KY6ZSFMjBDTeWltumUhVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzIzL2Q2NDRhNjgxY2Q5NDQ3Y2NhMjJhYTlhZGVlYjdiOTY5P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU0ODguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTg4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDY5LFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlt6bnq4vnm7TokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzODVcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuW8oOWwj+ebkuaXtuWwmuihjOadjueusee6r+mTneWQiOmHkeahhua9rua1geaLieadhueuseeUt+Wls+S4h+WQkei9rueZu+acuueusVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzA4LzllNTg4YTNhYjY0MjRjNDJhYjQyYjJhZDljYmZhNzliP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxNTAwLjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTc4OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAzOSxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMTI1XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlj4zpnaLnhY7plIXkuI3nspjplIXml6nppJDlubPlupXplIXlsI/nhorlj4zpnaLnhY7plIVcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8yMy81M2QwNDlmODk0NTA0Mzk5YWFlZjc1YjVmNTBkY2MyMT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzY4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE2OC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAzMixcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzg0XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLov6rov6rlsLzljaHpuqbppa3nn7PkuI3nspjplIXlubPlupXngpLplIXkuInku6MzMkNN54KS6ZSFXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMjMvNjg4MGQwMDAwODM4NDM1MTk3NjcwMTk1YWE3ODUxNmI/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTM3OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxOTguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMTQsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTM4MVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi6L+q6L+q5bC85Y2h6bqm6aWt55+z5rGk6ZSF5LiN57KY6ZSF55S156OB54KJ54eD5rCU6JK46ZSF5a6255So5bCP54KW6ZSFMjRDTeaxpOmUhVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzIzLzk5OTVkMDhhNWI5NDQzNjQ5M2FiOTgyMTRkMDZjMzIyP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU0OTguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTk4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDgsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTM4MlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5paw6bKc5bGx6KW/57qi5a+M5aOr6Iu55p6c5b2T5a2j5rC05p6c5pW0566x5YyF6YKuXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvYjM0NWY2MjJkZTUwNGEyYmE5YzhiYzg3MmQ1ZTk4NDE/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTU5LjlcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTI0LjhcIixcclxuXHRcIm51bVNhbGVzXCI6IDcsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIui/kOWfjuW4guWNmumbqOeUteWtkOWVhuWKoeaciemZkOWFrOWPuFwiLFxyXG5cdFwib2JqSWRcIjogMzM0XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLpmL/pgZPlpKvkurrlj4Loh6rnhLbmtJflj5HmsLTvvIjnpZvlsZHmraLnl5LvvIk1MDBnMDIyMThcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy8zYjRjYTkxMGE1MDA0YjAyODI5YzNiYmVkNTE0MDI3YT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlODguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNjguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogNyxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi576O5aaG5LiA5Y+35ZWG5Z+O5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAyMTNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuenreW9kuS4reWNjue6ouapmeihgOapmeWtkFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAyMDAzLzEyL2U4NTIxZTkxZWY2YzQ0YzA4ZjE5MDQzYzBmM2MwNDI1P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU0OS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUzOS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiA2LFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLllYblrrbkupHml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDE0NTNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuiLj+aziuWwlO+8iFNVUE9S77yJ5LiN6ZSI6ZKi5Y6o5oi/5YiA5YW35aWX6KOF6I+c5YiA5rC05p6c5YiA5p6c6JSs5YiA5p6c55qu5YiA5Y6o5oi/5aSa55So5Ymq5YiAVEsxNzE4VFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzExLzViNDU2YTFhZDg5MjQ2MjI5NmY5YjY5NGUyNDIzYTBhP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUzOTkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTg5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDUsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuiLj+aziuWwlOS4k+WNluW6l1wiLFxyXG5cdFwib2JqSWRcIjogNjk2XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLjgJDpppnmuK/nm7Tpgq7jgJFMQU5FSUdF5YWw6Iqd5rC06KGh5oqk6IKk5rC05Lmz5aWX6KOFIOihpeawtOS/nea5v+awtOihoea7i+WFu++8iOa4heeIveWei++8iVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA3L2MzZjlhOTE2MTkzYzQ3MTk4ZDliNzhlZWM2MGU3NDJhP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUzNTguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMjY4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDMsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW4neiAgOe+juWmhuWFqOeQg+i0rVwiLFxyXG5cdFwib2JqSWRcIjogMjE4XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlurfnjrbml7blhYlcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8xMy82MTlmMWMwODE0ZWI0MWNhYTk3OTYzYzM1ZDQ0YTliOD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzAuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMyxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Zub5rW355ub5a60XCIsXHJcblx0XCJvYmpJZFwiOiA3NDBcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuOAkOW5tOe7iOWkp+S/g+OAkeaoseiKseiWsOiho+iNiS/ms5Xlm73pppnmsLTmtJfooaPmtrIyTOaMgeS5heeVmemmmTAxMzEwXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvZWJmOTc1ZTdlZGI3NDAxNjlmNjg3ODUyMTg1OTQ3YmM/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTQ5LjlcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTI5LjlcIixcclxuXHRcIm51bVNhbGVzXCI6IDIsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIue+juWmhuS4gOWPt+WVhuWfjuaXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMzQyXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLopb/ln5/nvo7lhpznuqLmnqPlsI/prYXmnqM1MDBnKjLpmL/lhYvoi4/prYXmnqPoi6XnvozngbDmnqPnuqLmnqNcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wOS81YjEyNThiODAxOTE0MmU5OTRmMmU4N2JlNTIxMGIxMT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlNDkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMjAuOVwiLFxyXG5cdFwibnVtU2FsZXNcIjogMixcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi6KW/5Z+f576O5Yac5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA2NDJcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuOAkOmmmea4r+ebtOmCruOAkUJZUEhBU1NF6JOT5piC5pav5Y245aaG5rC05rip5ZKM5riF5rSBNTAwbWxcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy84MWZkMzkyNTVjNDM0MWY4OTAzNmEyOTgzN2RhNjI2Yj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTE4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTU5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDEsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW4neiAgOe+juWmhuWFqOeQg+i0rVwiLFxyXG5cdFwib2JqSWRcIjogMjc3XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLjgJDlj4wxMeWkp+S/g+OAkeeZvumbgOe+miDkuInnlJ/oirHmjqfmsrnmuIXogozlh4DogqTms6Xohpw1MGfvvIjmt7HlsYLmuIXmtIEg5YeA6IKk6Z2i6Iac77yJMTIwMTU3XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvNmM0ZWViNmU0OWQ2NDY1ZGExNjBiZGVkM2M4YThmMzU/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE2OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU2OC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAxLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLnvo7lpobkuIDlj7fllYbln47ml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDI5MlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5rOJ5rCP5YeA5rC05Zmo5a6255SoMTDlr7jpgI/mmI7liY3nva7ov4fmu6TlmajpgJrnlKhQUEbmo4nmu6Toiq/oh6rmnaXmsLTlh4DmsLTmnLrov4fmu6TlmahcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy81YjE0OTMwMTlmYWQ0Zjg2YmZhYTI5YmU5YzRiYTI2ZT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTg4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTY2LjhcIixcclxuXHRcIm51bVNhbGVzXCI6IDEsXHJcblx0XCJwdFByaWNlXCI6IFwiwqU0MC4wOFwiLFxyXG5cdFwic2hvcE5hbWVcIjogXCLmt7HlnLPluILms4nmsI/muIXnp5HmioDmnInpmZDlhazlj7hcIixcclxuXHRcIm9iaklkXCI6IDE4NVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi77yITkxNSe+8iemCo+aLieexsy/ms7Dlm73nmoflrrblpKnnhLbkubPog7bmnpXlpLTlrp3lrp3lhL/nq6XliqjnianoloTnnaHmnpUv5Y2h6YCa55+u5oqx5p6V5L2O6Z2g5p6VLyDvvIjnjLTvvIk2MyozNSo1Y21cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy84MzFkMDcwZDkwNmU0MzBiYTA1ZDBiNjM2NTVhZWZiNj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzk5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTMzOS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAxLFxyXG5cdFwicHRQcmljZVwiOiBcIsKlMjAzLjRcIixcclxuXHRcInNob3BOYW1lXCI6IFwi5qOu5bC85YGl5bq35a6257q65LiT6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxODdcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuilv+Wfn+e+juWGnOagkeS4ium7hOiRoeiQhOW5sjI1MGcqMiDmlrDnlobniblcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wOC8xMjcwNDUzZmI1N2Y0ZGJhYWNlYWNjM2E1YzlkMTdhZD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzkuOVwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTguOVwiLFxyXG5cdFwibnVtU2FsZXNcIjogMSxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi6KW/5Z+f576O5Yac5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA0NTRcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWOn+WIm+iuvuiuoeWMl+asp+WQjueOsOS7o+eugOe6puWuouWOhS/ppJDljoXlkIrnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yOC9kNWNiM2IwNjljYTU0NWI4YjMxM2Q2Mzg1NzI4ZWZlOD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlNjM1LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTM0NS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEwMjRcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuW+t+azvSDlhajmo4nljbDoirHooqsg57qv5qOJ6KKr5a2QIOWNleiiqyDnqbrosIPooqsg5aSP6KKrMTUwKjIwMENNXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvZTc2MmRmZjI2MTVkNGQ3NTk1Yjk4MTVmMDM4ZjhkY2U/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTYyOC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU1OTguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMjgwXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlvrfms70g5YWo5qOJ5Y2w6Iqx6KKrIOe6r+ajieiiq+WtkCDljZXooqsg56m66LCD6KKrIOWkj+iiqzE1MCoyMDBDTVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0L2U3NjJkZmYyNjE1ZDRkNzU5NWI5ODE1ZjAzOGY4ZGNlP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU2MjguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNTk4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTI4MVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib6K6+6K6h5YyX5qyn5ZCO546w5Luj566A57qm5a6i5Y6FL+mkkOWOheWQiueBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzI4L2YxMTNhMGQwMTAwZDQ5ZGE5ZGEyZDc2Njk1NzU1YjFkP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU2MDAuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMzI1LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuWSjOWFieaXtuWIm+aXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTAyNlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5b635rO9IOiHu+WTgeaalue7kuajieiKseiiqyDooqvlrZAg5Y2V6KKrIOepuuiwg+iiqyDlpI/ooqsgMjAwKjIzMENNXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvOGQ0YTg1OGEyYzJjNGUwZmE3ZWQzMjhlODE1NmVjZWQ/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTYyOS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU0OTkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMjgyXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlvrfms70g5rS75oCn6LSh5qOJ5Zub5Lu25aWXIOW5uOemj+WPtue+vSDooqvlpZfluorljZXmnpXlpZcg5bqK5Y2VMjMwKjI0MGNtIOiiq+WllzIwMCoyMzBjbSDpgILnlKjkuo4xLjVNLzEuOE3luopcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC9jMjI0ZGE5MDI4ZDI0YzE2YjNjMTFjZDVlN2UzYzJlMT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlOTk4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTc5OC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlt6bnq4vnm7TokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEyODNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuW+t+azvSDniLHkuIHloKHoh7PlsIrpuYXnu5Looqsg6KKr5a2Q5qOJ6KKr5Yas6KKr6KKr6Iqv6bmF57uSIDIwMCoyMzBjbS8yNTAw5YWLXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvNWU1ODQ3ODgxM2U4NGNmZTg2NmJmOWNiMmRhZDkyZDM/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTEyODguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlOTk5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTI4NFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi44CQ6aaZ5riv55u06YKu44CRRHIuSmFydCvokoLkvbPlqbfpk7bnrqFCQumcnDQwbWxcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy9iNmRkYTFlZmVkODY0YzRjOGM3MTZiZWNhZTk3OTg4ZT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTk4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTEwNS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLluJ3ogIDnvo7lpoblhajnkIPotK1cIixcclxuXHRcIm9iaklkXCI6IDI2MVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5b635rO9IOmHkeWFuOe6r+e+iuavm+iiqyDooqvlrZDooqvoiq/lhqzooqsgMjAwKjIzMGNtLzIwMDBnXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvOTJhYmE5ZDEzOWJmNDg2NjhlMzdjMzJhNWVmMGExMDM/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTExOTkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlOTY5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTI4NVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib6K6+6K6h5YyX5qyn5ZCO546w5Luj566A57qm5a6i5Y6FL+alvOair+WQiueBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzI4L2NkMTA1ZmM0ZWQwYTQ1MDFiOGRkY2M4MmJjOWMwOTc1P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxMTEwLjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTYwNS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEwMzBcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuW+t+azvSDoh7vlk4Hmmpbnu5Lmo4noirHooqvvvIjnp4vlhqzmrL7vvInmo4nooqvooqvlrZDooqvoiq8gMjAwKjIzMGNtLzIwMDBnXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvNzhlMDJjNWY0NDM1NDFmY2FkYTliOTY3YWEyYjJmYTQ/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTEyNjYuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlOTk5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTI4NlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib5YyX5qyn5ZCO546w5Luj566A57qm6ams5Y2h6b6Z5Y2n5a6kL+WuouWOheWQiueBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzI4L2EzZTYxYTg1ZGIzYTQ0MGI5ZTc1N2I1YTQ2NjdiOTMxP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxMjQ1LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTY3NS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEwMzFcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuW+t+azvSDnuq/mo4nmtLvmgKfljbDoirHlm5vku7blpZcg57yk57q36Iqx6K+tIOaeleWll+iiq+Wll+W6iuWNlSDpgILnlKjkuo4xLjhN5bqKIOW6iuWNle+8mjIzMCoyNTBjbSDooqvlpZfvvJoyMDAqMjMwY21cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC81YjdhYTEzZDE2NTI0N2E1ODc3OGI4OTBmYzNjYWFkZj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTE5OS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU0MDAuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMjg3XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLjgJDpppnmuK/nm7Tpgq7jgJFEci5KYXJ0Ky/okoLkvbPlqbdWN+e0oOminOmcnOijuOWmhumBrueRleS/nea5vzUwbWxcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy9kNjY2NGRkOGJhZjQ0NWJjYjAzOGZhNzAyMjUwZTNkYj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjI4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE1OC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLluJ3ogIDnvo7lpoblhajnkIPotK1cIixcclxuXHRcIm9iaklkXCI6IDI2NFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib5YyX5qyn5ZCO546w5Luj566A57qm6ams5Y2h6b6Z5Y2n5a6kL+WuouWOheWQiueBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzI5LzkzMjIyZGJiMTc2NTQyMWRiODRmNTM3Mzk1ODY3MzQ5P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxNzQ2LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTk0NS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEwMzJcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuW+t+azvSDlhajmo4nno6jmr5vliqDljprlm5vku7blpZcg5ZSQ5LmL6Z+1IOWFqOajieWbm+S7tuWll+aeleWll+iiq+Wll+W6iuWNlSDpgILnlKjkuo4xLjhN5bqK77yI5bqK5Y2V77yaMjUwKjI1MGNtIOiiq+Wll++8mjIwMCoyMzBjbe+8iVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0LzcwMjAxZTM4NmE5NjQ2ODdiMWFkMzY2MmE2YjUxNTBhP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxOTkwLjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE1OTkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMjg4XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCIv6JGG57yH5ZiJIOmYsuiEseWPkeeyvuWNjuWvvOWFpea2siA2ME1MXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMTkvNzc4Yzc2MmYyZTg0NGFlNmJjMDRiMDA5Nzc0N2FhNTc/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTM2OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUzMTIuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwiYm90dGdhZGlsdW5nYXZpdGHmtbflpJbml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDc3N1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib5YyX5qyn5ZCO546w5Luj566A57qm6ams5Y2h6b6Z5Y2n5a6kL+WuouWOheWQiueBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzI5LzgzMGE4YmFjNDc2ODQ3Yjg4YjM1NWJiMmRhNGU4MmY2P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUyMjE0LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTExOTkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMDMzXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlvrfms70g5YWo5qOJ6LSh57yO5o+Q6Iqx5omL5bel6JqV5Lid6KKrIOiiq+iKr+iiq+WtkOWGrOiiqzIwMHgyMzBjbSAxODAw5YWLXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvYWVhOTFiN2I4YWQyNGIzODg4MmI4YjE2MjdiMzdlNjE/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTM4ODAuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMjgwMC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlt6bnq4vnm7TokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEyODlcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuOAkOmmmea4r+ebtOmCruOAkURyLkphcnQr6JKC5L2z5am36JOd6Imy6I2v5Li46Z2i6IacNeeJhy/nm5JcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy82ZWYxZDFlMGM4N2Y0NWYwYTM4NTQyMzlhMWNlNGI4Nz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTI4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTU5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW4neiAgOe+juWmhuWFqOeQg+i0rVwiLFxyXG5cdFwib2JqSWRcIjogMjY2XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLml6DljbDoia/lk4Eg57qv6Imy57O75YWo5qOJ6Imy57uH5rC05rSX5qOJ5Zub5Lu25aWXIFdZTFAtQ1NRTVNaXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvZDg1M2QzOWVmOTk1NGYzNWIwZmVjYmRlNzY4NDNjMzE/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTg5OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU0MzQuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMjkwXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLntKvoibIz5pSv5aWX5Yi3XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvY2Y3YjcxNzBmNTY2NDIwYjgzYTY2M2MwMDA1MWY2YjA/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTU5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTM3LjVcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuS5neS5neiHquiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTI5MVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi6JGG57yH5ZiJIOW8uuaViOmYsuiEseWuieeTtiAxME1MKjEwIFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzE5LzFhYmVhYzczNGE5MDQ4NGM5YWZkN2E2ZTY1NjIxZmJlP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU0MjguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMzYwLjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcImJvdHRnYWRpbHVuZ2F2aXRh5rW35aSW5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA3ODBcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIjbmlK/lsI/lppbnsr7lpZfliLdcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC8yYWRlM2FjMDY1ZDY0MDU3YTUwMDRiYjZkMWM4ZDJjZD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjk5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE2OC4xXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEyOTJcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuOAkOmmmea4r+ebtOmCruOAkURyLkphcnQr6JKC5L2z5am357u/6Imy6I2v5Li46Z2i6IacNeeJhy/nm5JcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy8yZGRmZmVhOTliOWY0NWM0OGM3ZGRkNDZiYzkxYmM1Yj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTI4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTU5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW4neiAgOe+juWmhuWFqOeQg+i0rVwiLFxyXG5cdFwib2JqSWRcIjogMjY5XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLokYbnvIflmIkg55Sf5Y+R6Iaz6aOf6KGl5YWF6IO25ZuKIDMw57KSL+ebkiBcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8xOS8zNDc2ZGQ3M2QwODY0ZTA3YTlmODA0ZTQ5NTk5ZmY1OT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjgwLjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTI1MC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCJib3R0Z2FkaWx1bmdhdml0Yea1t+WkluaXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogNzgxXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLnmb3oibLlj4zlpLTlpZfliLdcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC9lOTE3ZWQ0YjlmNTc0MWViYjM3MWM5M2I5ZWZjMThiNT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlOTguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNTAuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMjkzXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLokYbnvIflmInpu4Tph5Hns7vliJfmiYvpg6jmiqTnkIZcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8xOS9mNGJiZjQ2MmViN2E0MGIyYTUzYjQwZGZiMmQ5MTc2Yj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjIwLjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE1MC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCJib3R0Z2FkaWx1bmdhdml0Yea1t+WkluaXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogNzgyXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCI35pSv5aWX5Yi3IOiCpOiJslwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0L2UzMzk2M2NkZDcyMzRmNjM4ODY4Y2RiZjUwZjQ1MmUxP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU0Ni4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyOC44XCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEyOTRcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuOAkOmmmea4r+ebtOmCruOAkUJhbmlsYSBDT+iKreWmruWFsOWNuOWmhuiGj+iEuOmDqOa4qeWSjOa4hea0geWNuOWmhjEwMG1sXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvYmMyMDhlNDMwZTc4NDNjODgyZDVmYmRlYmM3MGFjOTQ/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE1OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU4OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLluJ3ogIDnvo7lpoblhajnkIPotK1cIixcclxuXHRcIm9iaklkXCI6IDI3MVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi6JGG57yH5ZiJ6buE6YeR57O75YiX5rS75oCn54+N54+g57K+5Y2OXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMTkvYWZiN2MzNDhkODA4NDBiMWFjNDBkY2UwODFlZDA3MWM/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTYwMC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU1MDguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwiYm90dGdhZGlsdW5nYXZpdGHmtbflpJbml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDc4M1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi56Cw54S25b+D5YqoXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvNjQ1M2VmOTc0ODBlNDUwMzkxYzEyM2JkOTk5MWVmNzE/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTI5OS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxODYuM1wiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMjk1XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLnmb7pm4DnvprojYnmnKzns7vliJfmsLTlq6nlgI3njrDoh7vnvo7lpZfoo4UxMjUyN+aWsOaXp+asvumaj+acuuWPkei0p1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA3LzlkYTEyODQzZDdiMzRhNmNhNmNjZmJkNzlmNTAyYjA4P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUyNjguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMjI4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIue+juWmhuS4gOWPt+WVhuWfjuaXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMjcyXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLokYbnvIflmInpu4Tph5Hns7vliJfmipfoobDogIHkv53mub/pnaLohpxcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8xOS85NTk5YmRiZDk0Yzg0ZDJkOTdjNTM2NDcwNzFkZWJiMT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjE4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE4MC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCJib3R0Z2FkaWx1bmdhdml0Yea1t+WkluaXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogNzg0XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLkuIPlvanlpZfliLdcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC8wY2UyNGUwNzg0NTA0NWNkYTQ5MzNkZDYzZTlkNDcwYz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTE4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTcwLjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuS5neS5neiHquiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTI5NlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi44CQ6aaZ5riv55u06YKu44CRQmFuaWxhIENP6Iqt5aau5YWwemVyb+WNuOWmhuiGj+iEuOmDqOecvOWUh+a4qeWSjOa4hea0geWNuOWmhjE4MG1sXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvOWVhYjM5OWMwNjEzNDIxYjliMTgzZTQyOTk1MmQzYWM/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE5OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxMzkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bid6ICA576O5aaG5YWo55CD6LStXCIsXHJcblx0XCJvYmpJZFwiOiAyNzNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIumXquS6ruezu+WIlzbmlK/lpZfliLcm5LiT5Lia5Yi35YyFXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvODhlZjI5ZGJjNTliNDVkOTkyMGQ5MzFjNDBkN2M2NzU/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE0OS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU5My4xXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEyOTdcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuiRhue8h+WYiem7hOmHkeezu+WIl+W5sue7huiDnuaWsOeUn+mdoumcnFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzE5L2IxYzBkNWQ3ZTQwNzRlZjk4ODQ4MWM4YmVhMTZhM2I4P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU0OTkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNDY1LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcImJvdHRnYWRpbHVuZ2F2aXRh5rW35aSW5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA3ODZcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuaoseiKseezu+WIlznmlK/lpZfliLcm5LiT5Lia5Yi35YyFXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvNjgxNjIzMDg5MjU4NDE1YjgzYmNlNDMzNzBkMDQ0MGI/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE5OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxMjMuOFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMjk4XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLmm7zkvZfmsrnojLbnsb3msrk3MjVNTOiKsea1t+eJiFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzE5LzNkYTBmZWJiYTBhNDRiMDg5NGNhMTE4MTczZjI4NDQzP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxNTAuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTEwLjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuabvOS9l+iMtuayueWTgeeJjOW6l1wiLFxyXG5cdFwib2JqSWRcIjogNzg3XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLnuqLnsonns7vliJc55pSv5aWX5Yi3JuS4k+S4muWIt+WMhVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0LzIxNmFhMGIyYmJiOTQ2MzRhMGUxNDVmNTgyZGRjNzI1P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUyMjguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTQyLjVcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuS5neS5neiHquiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTI5OVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi55m+6ZuA576a6I2J5pys57K+6JCD5oOK5Zac5aWX6KOFMTI1NDHmlrDml6fmrL7pmo/mnLrlj5HotKdcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy9jMWE1ZGIxZmY0NDc0ZjFiYmRhNWIzMDhkYzQwMzYyMD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTY4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTEzOC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLnvo7lpobkuIDlj7fllYbln47ml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDI3NlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5pu85L2X5rK56Iy257G95rK5NzI1TUx4MlwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzE5LzFmMTVhMmUzYTIxZjRiZDg4NjgzMjU1ZGU2Mzk5YjQ5P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUyNTAuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMjMwLjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuabvOS9l+iMtuayueWTgeeJjOW6l1wiLFxyXG5cdFwib2JqSWRcIjogNzg4XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCJTWeWkp+WPt+iFrue6ouWIt1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0LzkwNjI0ZTk5NWM2MzQzYjQ5MmViMzBkNDIzMjI5MGVjP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxMjguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlODAuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzAwXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLmm7zkvZfmsrnojLbnsb3msrk3MjVNTHgzXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMTkvNmE3ZjI1MmUyZTU4NDYyOWI1YjQ3MmJiMmQwMzJlN2Q/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTM1MC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUzMjAuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5pu85L2X6Iy25rK55ZOB54mM5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA3ODlcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIlNZ5aSn5Y+357KJ5omR5Yi3XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvODM5YTMwZGFhZmViNDAxZWIwZjhjNWZhOTBlNGMzMGY/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE2OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxMDUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzAxXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLmv4Dmg4Xns7vliJcxMOaUr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0LzYyOWIzMjE4OTg2ZDRmYjFhMDU5MTQwODExMGI3ZGVlP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUyMjkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTQyLjVcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuS5neS5neiHquiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTMwMlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5r+A5oOF57O75YiXN+aUr+Wll+WItybkuJPkuJrliLfljIVcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC8wODBjODAzMDEzNzM0OTA3OTE4YWUzODc1YTE5MDcwOT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTY4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTEwNS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzMDNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuabvOS9l+ayueiMtuexveayuTJM5Y2V55O26KOFXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMTkvZmQ4YTMyMjMxODc1NDk0NGEyNTYzNmRkMTE0NDY2NjE/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTI1MC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyMjAuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5pu85L2X6Iy25rK55ZOB54mM5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA3OTJcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIlNZ5aSn5Y+36L2u5buT5Yi3XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvNTBkODViNjVmOTFkNDk3ZGEwNWE0Y2EwNWY4YzdmYmE/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE2OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxMDUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzA0XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLmm7zkvZfnpZ7pnLLpo5/nlKjmpI3nianosIPlkozmsrk1TFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzE5L2NiNThjNWQ0ZWQxODQxMzg4NjIwNGY0MTg5NzI5ZDE0P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxNTAuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTIwLjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuabvOS9l+iMtuayueWTgeeJjOW6l1wiLFxyXG5cdFwib2JqSWRcIjogNzkzXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCJTWeeyieW6leWIt1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0LzNiYWY5MDUxNTM3MzQ0NTRiNmNhNjdmZTIyZDBjYzgxP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxMjguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlODAuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzA1XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLmm7zkvZfnpZ7pnLLpo5/nlKjmpI3nianosIPlkozmsrkyTFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzE5L2VjNDdkYzQ4MDNmMTRkNzNiOTdmOGJiNTYwNDUyZmE3P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU5MC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU2NS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLmm7zkvZfojLbmsrnlk4HniYzlupdcIixcclxuXHRcIm9iaklkXCI6IDc5NFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwiU1kzROeri+S9k+ecieWIt1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0LzRiMDM5MDdlNmYwNDQxOWU4YmIyMzE0ZjU0OTllZTBlP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU3OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU0OC44XCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzMDZcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIueZvumbgOe+muawtOiDvemHj+eEleiAgOWll+ijhTEyOTU05paw5pen5qy+6ZqP5py65Y+R6LSnXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvMGNlNTM1YzczN2IwNDNjYjlkYTNkZjA4Mzg1MDQzYTA/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTUzOC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU0ODguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi576O5aaG5LiA5Y+35ZWG5Z+O5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAyODNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuabvOS9l+elnumcsumjn+eUqOakjeeJqeiwg+WSjOayuTEuOExcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8xOS8yMzgyOTJlYzMwNWE0NWMyYWQwZjg0OWRmYWFhZGFiOT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlODUuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNjAuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5pu85L2X6Iy25rK55ZOB54mM5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA3OTVcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIlNZ55y85b2x5Yi3XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvMzMxMDAyNDM2ZWY5NGM1ZDgxZGQwMzE0YWE4NTI5MTM/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTY4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTQyLjVcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuS5neS5neiHquiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTMwN1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5pu85L2X56We6Zyy6aOf55So5qSN54mp6LCD5ZKM5rK5MS41THgyXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMTkvNThiYzNhYWRjOGY4NDgxYmI0ZWZmMGQwNDBjNzEyZGI/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTEyMC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxMDAuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5pu85L2X6Iy25rK55ZOB54mM5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA3OTZcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIlNZ5ZSH5Yi3XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvZTUyNDA0NmFkZjg5NDdkNDhhYzFkZDk0YTU4YWZlMjQ/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTY4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTQyLjVcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuS5neS5neiHquiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTMwOFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5bq35rS+572R57qi54iG5qy+5aWz5YyF5qyn576O5pe25bCa5pac6Leo5YyFXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMTkvNWU4NTc3MDJhMjJhNDMwYzg4MzRiODVmNGIzNThmZDI/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTIyOS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU1OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlurfmtL7nmq7lhbfml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDc5N1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwiNeaUr+WMluWmhuWIt1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0LzE1MjZmZDRkZGQ4NDQ4YTk5MDI0ZDlkNjM1NzUwN2ZkP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUzOS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyMy44XCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzMDlcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIueZvumbgOe+mueElemHh+iOuea2puS6ruiCpOmdouiGnDIybWwqNeeJh1gz55uSIDIwNjA3XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvOTRjM2UwNGExNzFmNDg5NTk2NzlhYWNjYTRhMzdhZWE/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTI2NC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxODguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi576O5aaG5LiA5Y+35ZWG5Z+O5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAyODZcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuabvOS9l+WxseiMtuexveaykOa1tOWll+ijhTQ1ME1MeDJcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8xOS8xNDQ3OTgwNTg4OWU0OGEzOWJjZmViNzAyMmY4NTc3MT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlOTAuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNzUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5pu85L2X6Iy25rK55ZOB54mM5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA3OThcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWls+elnuWPjOWktOWll+WIt1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0LzA4MDdjMzA1OWUwZTQ2MTVhODUxNGMwNDA5Y2Q5MjllP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU5OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU1MC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzMTBcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuOAkOmmmea4r+ebtOmCruOAkVNOUOa1t+a0i+eHleeqneawtOW6k+S/nea5v+ihpeawtOmdouiGnDEx54mHL+ebklwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA3L2RiZDcwYjMxMGEwZTQwZjZhNjc1MTg0ZTNmYTUwYTQxP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxMjguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNzUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bid6ICA576O5aaG5YWo55CD6LStXCIsXHJcblx0XCJvYmpJZFwiOiAyODdcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuabvOS9l+WxseiMtuexveaykOa1tOWll+ijhTc1ME1MeDJcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8xOS81MGUxMDBhYzAxMWM0M2VjOGM3NjdhYzMzY2U0MDIwND9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTEwLjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTg1LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuabvOS9l+iMtuayueWTgeeJjOW6l1wiLFxyXG5cdFwib2JqSWRcIjogNzk5XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlpJrlip/og73ljJblpobliLdcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC84OTc0NDg3YzlhOGY0MjBiOGFhOWJlMmI3MGI4YjFlZT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTg5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE0Mi4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzMTFcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuOAkOmmmea4r+ebtOmCruOAkVNIQU5HUFJFRemmmeiSsuS4vee7v+WFrOS4u+ecvOiGnOi0tOelm+a3oeWMlue7hue6uem7keecvOWciDYw54mHL+ebklwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA3Lzc4Y2Y0ODc5NWNjNzRmOGY4N2JlNzFlZmVhMDdkMjBkP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxOTguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTA4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW4neiAgOe+juWmhuWFqOeQg+i0rVwiLFxyXG5cdFwib2JqSWRcIjogMjg4XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLnlLXliqjmtJfliLflmahcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC9kYzlhOTQ5ZWViMWQ0MGMwYWI4MWExZTBlOWU3ZmFiOD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlOTkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNzUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzEyXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLjgJDpppnmuK/nm7Tpgq7jgJFTSEFOR1BSRUXpppnokrLkuL3nuqLlj4Lmnpzkv67lpI3nnLzohpzotLTmt6HljJbpu5HnnLzlnIjnu4bnmrHnurk2MOeJhy/nm5JcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy82NGQ4Y2Y4ZjQzMzE0ZTQwODFhM2VmZWM5OGEyNGU2Nz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTk4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTEwOC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLluJ3ogIDnvo7lpoblhajnkIPotK1cIixcclxuXHRcIm9iaklkXCI6IDI4OVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5bq35rS+MjAyMOaWsOasvuecn+earuWls+WMheaXtuWwmueugOe6puasp+e+juWklui0uOWNleiCqeaWnOi3qOWMhe+8iOagh+WHhueJiO+8iVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzIwL2Y5YzAyMWJkNGEwODRlZTc5NTE5YmU2NWVkMmU1OWY2P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxNTkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNTkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bq35rS+55qu5YW35peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA4MDFcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuatquWktOa0gemdouS7qlwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0LzYyNmIwNDA2YzMyMjQ3NGU5NjdhYWY0ZWM4MGIyNmYwP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxOTkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTAzLjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuS5neS5neiHquiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTMxM1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi44CQ6aaZ5riv55u06YKu44CRRW1icnlvbGlzc2Xkv53mub/lpobliY3kubPpmpTnprvpnJw3NW1sXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvNjJlNzAxOTM3ZjU0NGM2MGJkYmZhOTFiZmY5Y2NiZDg/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE5OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxMjguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bid6ICA576O5aaG5YWo55CD6LStXCIsXHJcblx0XCJvYmpJZFwiOiAyOTBcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWchui0nea0gemdouS7qi805Liq6Imy77yI57qiL+eyiS/ok50v57u/77yJXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvN2MyY2VkNGYxNDNiNDAwYmE5NTU2MjAwMGE4YjhlNWQ/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTI5OS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU4Ny4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzMTRcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuOAkOWPjDEx54m55L+D44CR55m+6ZuA576a6Iez6Ie755qZ55m95Lqu6YeH55y86YOo57K+5Y2O5rayMjBnMTE4NTgxXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvNzBiYmE1ODMyMTIxNGMzYzhlYzdmMzUzZGEzNWEyYWU/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTIzOC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU4OC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLnvo7lpobkuIDlj7fllYbln47ml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDI5MVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5bq35rS+54iG5qy+54Ot57q/5bCPQ0vlkIzmrL7lpbPlvI/ljZXogqnljIXml7blsJpQVeaWnOaMjuWMhVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzIwL2U4MTJiNjY3MmQ1ZTRhYjJhYmJiODAxMWYxYzRjOGE2P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUzOTkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTE5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW6t+a0vuearuWFt+aXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogODAzXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLnnLzpg6jljrvnmrHnvo7nnLzku6pcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC8zZjg0MzEwYmUyMWE0ZGE0YTY4YjU1NjA1MDI2MmE2Zj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlODguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNDAuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzE1XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlurfmtL7ml7blsJrkuq7niYflpbPlvI/lsI/mlrnljIXpn6nniYhQVeaWnOaMjuWMhVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzIwLzY4OWU5YTgyNTU4ZTQ2Mzk5NzVjNzRlOTg3ODgxYjliP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxOTkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNjkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bq35rS+55qu5YW35peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiA4MDRcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIua7mui9rueYpuiEuOS7qlwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0LzU3M2FmOGFhYWY3NDRiOWE4YzExMTYxNjA1OWNlZmY0P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU4OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU0OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzMTZcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIueZvumbgOe+muiNieacrOezu+WIl+awtOiDvemHj+eEleW9qea0geWuueiGjzgwZzEyNzU2XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvYzNiZTU4NGYyNzBhNDVjYWEwMjNiMTcyOGIyMmMwY2I/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTExOC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU5OC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLnvo7lpobkuIDlj7fllYbln47ml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDI5M1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5bq35rS+54Ot6ZSA5bCPQ0vlkIzmrL7ml7blsJrkuq7niYflpbPljIXkupTph5HmtYHoi4/oo4XppbDlpbPlvI/mlpzmjI7ljIVcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yMC8wY2Q0MWRjNGFhYmY0YTJlYWZhMzBhYTE5OTk5NjQ4ZT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzk5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTg5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW6t+a0vuearuWFt+aXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogODA1XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLojbflj7bpu4Tph5Hnvo7lrrnmo5JcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC9jMTdmNjEwYWVlMGY0YjQzYTQyMWY4YjdiZDMwZDAyYj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlODguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzMTdcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIueZvumbgOe+muiNieacrOezu+WIl+awtOiDvemHj+eEleminOe+juWuuea2sjkwbWwxMjc5NFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA3LzBlOTc3NThiNTgxNjQyYWQ5NjZmM2Q2OGRjYjlkMjAyP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxODguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTY4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIue+juWmhuS4gOWPt+WVhuWfjuaXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMjk0XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlkqrnhLYgMjAxOeeOsOejqOmynOexsyDkuJzljJflpKfnsbMg54+N54+g57Kl57GzIOm7kem+meaxn+WOn+S6p+WcsOmlremmmeePjeePoOexszVrZ1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0L2VmODEyNjMwYTY4NjQ4NjI4NjAwOWE3ZDBiNTg5NzQxP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxMDguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNzcuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzE4XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PnroDnuqblrqLljoUv5Y2n5a6k5ZCK54GvXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMzEvYTg3YjdlMDM2MmNiNGRhMDkwZWQ5ZTk5NTA5ZTVhY2Q/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTcyMC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUzOTAuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMDYzXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlkqrnhLYg56i76Iqx6aaZ6aaZ57Gz5LqU5bi45aSn57GzIOS4nOWMl+Wkp+exszEw5pakIOm7kem+meaxn+WOn+S6p+WcsOebtOS+m+eOsOejqOaWsOexsyDnnJ/nqbrooovoo4U1a2dcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC8zYjE2YzAzMmNiOWU0ZDFhOGJlNGI3YzA4YWJhZDZlMD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTM1LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTEyOC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlt6bnq4vnm7TokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzMTlcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWSqueEtiDkuJzljJfnm7Tkvpvplb/nspLpppnnsbM15pakIDIwMTnmlrDkuIrluILnjrDno6jpspznsbMg5Lic5YyX5aSn57GzIOm7kem+meaxn+Wkp+exszIuNWtnXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvMDVkZmUwMTBhZDU2NGVjYWJlNDEwYWQwZTRjYzQzMzQ/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTY4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTU5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTMyMFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5LyY5aau5oqk5Y+R5Za36Zu+5L+u5aSN5bmy54el5q+b6LqB5YWN5rSX5p+U6aG66aG65ruR57K+5Y2O57Sg6JCl5YW75rC05L+d5rm/6KGl5rC057K+5rK5XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMjAvODAwYTJkMDQ0MGYyNDcwZjk5ZTgxNzM4ZTZmMDY3YmM/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTM5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTI5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW5v+W3nuiBmuaDoOWVhui0uOaciemZkOWFrOWPuFwiLFxyXG5cdFwib2JqSWRcIjogODA5XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PnroDnuqblrqLljoUv5Y2n5a6k5ZCK54GvXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMzEvOGZhODM1M2I1NjgxNGQzZThjNzdiZDFlNzUxZDgxMDI/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTEwMjAuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNTQ5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuWSjOWFieaXtuWIm+aXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTA2NVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5ZKq54S2IOS4nOWMl+ebtOS+m+eOsOejqOmynOexsyDplb/nspLpppnnsbMg5Lic5YyX5aSn57GzIOWOn+eyruWcsOebtOS+m+ecn+epuuWMheijheWkp+exszVLR1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0LzU2YmM2NTRhMjU1NDQ5ZDFiMDIyODdiZDM5ODlhYjcxP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxMTUuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlOTcuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzIxXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLkvJjlpq7llavllrHmsLTkv53mub/lrprlnovlj5HonKHnlLflpbPlo6vljbflj5Hlrprlnovkv53mub/kuq7ms73mjIHkuYXnlZnpppnlj5Hog7ZcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yMC9hMjc1ZTMxMWJiZGE0MDA3ODAyNjhmMzI2NzUxMmFhYT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzUuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMjguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bm/5bee6IGa5oOg5ZWG6LS45pyJ6ZmQ5YWs5Y+4XCIsXHJcblx0XCJvYmpJZFwiOiA4MTBcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWSqueEtuS4nOWMl+Wkp+exszEw5pak5q2j5a6X5LqU5bi456i76Iqx6aaZ6aaZ57Gz5LqU5bi45rC056i756CU56m25omA55uR5Yi2546w56Oo5paw57Gz5Y6f57Ku5Y6f5Lqn5Zyw55u05Y+RNWtnXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvMzc0N2FiODQ0MmQ5NGE1YWEyY2NmYmYyOGI3Njk5ODg/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTIzNS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyMjQuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzIyXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLjgJDpppnmuK/nm7Tpgq7jgJFEaW9y6L+q5aWl5Y+j57qi54OI54Sw6JOd6YeR5ZSH6IaP5Y+j57qiIDk5OSPlk5HlhYlcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy84MTgyYTBlMmM0YTQ0YmRhODlkMmE3NGY5NzhhZDY0Mj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzU4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTIzNS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLluJ3ogIDnvo7lpoblhajnkIPotK1cIixcclxuXHRcIm9iaklkXCI6IDI5OVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5LyY5aau6ams5rK55YCS6Iac6IaP5q2j5ZOB5L+u5aSN5bmy5p6v6KGl5rC06aG65ruR6Ziy5q+b6LqB5p+U6aG65aS05Y+R5Y+R6Iac54SX5rK56IaPXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMjAvNTQyOTZmM2YzYzA2NDc3Y2JhMjQ5NDU4M2I0MmZjZjc/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTExOS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU4OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlub/lt57ogZrmg6DllYbotLjmnInpmZDlhazlj7hcIixcclxuXHRcIm9iaklkXCI6IDgxMVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5ZKq54S2IOS4nOWMl+Wkp+exsyDmraPlrpfkupTluLjmnInmnLrnqLvoirHpppnlpKfnsbMg5LqU5bi45rC056i756CU56m25omA55uR5Yi2546w56Oo5paw57GzIOWOn+eyruWOn+S6p+WcsOiii+ijhTIuNWtnXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvODExMzdmYjVlOTljNDc3MmFhMjUyMDBkY2U3MWQ4ZmQ/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE2OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxNjEuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzIzXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLkvJjlpq7pqazmsrnojLbpurjmiqTlj5HntKDkv67lpI3lubLmnq/ng6vmn5Plj5fmjZ/ooaXmsLTmn5Tpobrpobrmu5HnlLflpbPmraPlk4HmlLnlloTmr5vouoFcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yMC9mOTkzNDkzMmE0MTI0M2EwOWIxN2UxY2ZjMjA3NTNhNz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlNTcuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNDkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bm/5bee6IGa5oOg5ZWG6LS45pyJ6ZmQ5YWs5Y+4XCIsXHJcblx0XCJvYmpJZFwiOiA4MTJcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWSqueEtiDlr4znoZLnjrDno6jpspznsbMg54Wu57Kl5aSn57GzIOm7kem+meaxn+Wkp+exsyDkuJzljJfljp/nsq7lnLDnm7TkvpvnnJ/nqbrljIXoo4Uxa2fooovoo4VcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC80YmY5Y2NjZGI4Nzg0OTIzOTA1ZTViY2M5YjAxNmUxND9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlNDMuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMzMuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzI0XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLjgJDpppnmuK/nm7Tpgq7jgJFEaW9y6L+q5aWl5Y+j57qi54OI54Sw6JOd6YeR5ZSH6IaP5Y+j57qiIDk5OSPmu4vmtqYgXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvYmRmZjkzZjQzMTJkNDdjNzgxOTk5NmEwODE0M2MyOWM/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTM1OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyMzUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bid6ICA576O5aaG5YWo55CD6LStXCIsXHJcblx0XCJvYmpJZFwiOiAzMDFcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuS8mOWmruaXoOaCo+WtkOa0l+WPkeawtOaykOa1tOmcsuWll+ijheaOp+ayuea4heeIveWOu+WxkeaflOmhuuaMgeS5heeVmemmmeS/nea5vzYwTUwqMi3kv53otKjmnJ8yMDIx5bm0MTHmnIhcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yMC85Y2YyMjhjZWIzNjI0ZGMxYjBhZjc2NWRiOWMxYmNjYz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bm/5bee6IGa5oOg5ZWG6LS45pyJ6ZmQ5YWs5Y+4XCIsXHJcblx0XCJvYmpJZFwiOiA4MTNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWOn+WIm+iuvuiuoeWMl+asp+WQjueOsOS7o+eugOe6puWuouWOhS/ljaflrqTlkIrnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8zMS9lOWZlN2VjZTIzOTg0ZDlkOTQ5MWMwNDQ0YTUyYmUyND9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTExNS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU2MDUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMDY5XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlkqrnhLYg5a+M56GS546w56Oo6bKc57GzIOeFrueypeWkp+exsyDpu5HpvpnmsZ/lpKfnsbMg5Lic5YyX5Y6f57Ku5Zyw55u05L6b55yf56m65YyF6KOFNWtn6KKL6KOFXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvYTYwZGM0ZjZhZjkxNGRmYjg2ZDU4MmE0ZTkwOTQ5NWU/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE1MC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxMjEuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzI1XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLkvJjlpq7pqazmsrnmtJflj5HmsLTmiqTlj5HmtJfmiqTljrvlsZHmraLnl5Lkv67miqTmjIHkuYXnlZnpppnljrvmsrnpmo/mnLrkvZPpqozoo4UxME1MOFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzIwL2IwZTkxN2VmZjgwMTQ1NmNhN2U4YmM1MWI1ZTJiZGQzP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxOS45XCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU5LjlcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW5v+W3nuiBmuaDoOWVhui0uOaciemZkOWFrOWPuFwiLFxyXG5cdFwib2JqSWRcIjogODE0XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PnroDnuqbljaflrqQv5a6i5Y6F5a625bGF5ZCK54GvXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMjkvZDM5YWM0ZGFhODEyNGVmNGIyNDY4OTVmNjk3YWYxYmY/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTY1NS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU2NTUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMDcwXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLlkqrnhLYg5a+M56GS546w56Oo6bKc57GzIOeFrueypeWkp+exsyDpu5HpvpnmsZ/lpKfnsbMg5Lic5YyX5Y6f57Ku5Zyw55u05L6b55yf56m65YyF6KOFMi41a2fooovoo4VcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC8xMDc5NjYwYjM1YjU0YWJmYjBkYmFmNGE2YzIwNDlkOD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlNzguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNzcuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzI2XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLntKLoipnnibnmsYnmlrkxa2fnlZnpppnooaXmsLTkv53mub/nlZnpppnooaXmsLTkv53mub9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yOC81NTdmMGI5NDlmZTE0MjBmYjc1ZTNhYWRhNWU1MTRhNT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjkuOVwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTkuOVwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi57Si6IqZ54m55LiT5Y2W5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAzMDNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuS8mOWmrumprOayueS4nea7keawtOa8vua0l+WPkeS5syDml6DmgqPlrZDmtJflj5HmsLTkv67lpI3lj5fmjZ8g5rC05ram5p+U6aG6XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMjAvNzVhNmY4YzJjNTA1NGMxYjhmZGU0MjQxZWQ0MTg1Zjk/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTU1LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTQ5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW5v+W3nuiBmuaDoOWVhui0uOaciemZkOWFrOWPuFwiLFxyXG5cdFwib2JqSWRcIjogODE1XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PnroDnuqbljaflrqQv5a6i5Y6F5a625bGF6ams5Y2h6b6Z5ZCK54GvXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMjkvYjEzYjJmMzgwZWFhNGUwYmEzNGRhNjBmOTA2YmVmOWY/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE0NzYuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNzk5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuWSjOWFieaXtuWIm+aXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTA3MVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5ZKq54S2IOS4nOWMl+ebtOS+m+eOsOejqOmynOexsyDplb/nspLpppnnsbMg5Lic5YyX5aSn57GzIOWOn+eyruWcsOebtOS+m+ecn+epuuWMheijheWkp+exszVLR1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0L2Y4OGVkZjY1NzBjYTQxNGM5NmY2M2YzZTg1NGE5MjcyP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxMTguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTAzLjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW3pueri+ebtOiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTMyN1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi44CQ6aaZ5riv55u06YKu44CRRGlvcui/quWlpeWPo+e6oueDiOeEsOiTnemHkeWUh+iGj+WPo+e6oiA5OTkj6YeR5bGeXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvOTY0NmFjNDgwZDMwNDVmOThlNjI2MTE3ODQyZTUxYWM/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTM1OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyMzUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bid6ICA576O5aaG5YWo55CD6LStXCIsXHJcblx0XCJvYmpJZFwiOiAzMDRcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWOn+WIm+iuvuiuoeWMl+asp+WQjueOsOS7o+WNp+WupC/lrqLljoXpqazljaHpvpnlrrblsYXlkIrnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yOS8zYTAzZjkxZTZkMWI0NWViYTgwODEwZWU4ZWZkYzQwZT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTYxNS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU4NzUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMDcyXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLml6DljbDoia/lk4Eg5p2h57q557O75YWo5qOJ6Imy57uH5rC05rSX5qOJ5Zub5Lu25aWXIFdZTFAtVFdRTVNaXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTQvNmRhNjkwZjkwYjI5NDcwMmIzZDZlZDViYmM4ODk1NzA/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTg5OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU0MzQuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bem56uL55u06JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzI4XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLov6roj7LlqJzonJfniZvlpZfnm5I2ODBtbCszODBtbDAzNDgz5paw5pen5qy+6ZqP5py65Y+R6LSnXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvYTA3ODg2NmExM2UxNGM2ZGI3MGQxODlhZDJhZmVlYTU/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTExOC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU5OC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLnvo7lpobkuIDlj7fllYbln47ml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDMwNVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib6K6+6K6h5YyX5qyn5ZCO546w5Luj5Y2n5a6kL+WuouWOhemprOWNoem+meWutuWxheWQiueBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzI5L2FhZDVkNDgyZTdiNzQ1OGI5YjhkYTUyODI5YWQwMDZjP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxOTg5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTEwNzkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMDczXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLov6roj7LlqJzmtIvnlJjoj4rnsr7msrnmu4vlhbvkv67miqTmspDmtbTkubPmtrI5MDBtbDAzMjg1XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvYzVlNTNmZjUyZTBlNGU5YjlkY2MxYTJkMTZiNmI4ZTU/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTg4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTY4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIue+juWmhuS4gOWPt+WVhuWfjuaXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMzA2XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLpqazmsrnnlJ/lp5zmtJflj5HmsLTljrvlsZHmraLnl5LojLbpurjml6DmgqPlrZDmtJflj5HpnLLmjIHkuYXnlZnpppnlpbPmjqfmsrnnlLflo6vpmo/mnLoyMjBcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yMC8zY2U3OTZiODNjNTI0M2Y5OGMwYTU5YmIwNDVjNmY4Zj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMjkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bm/5bee6IGa5oOg5ZWG6LS45pyJ6ZmQ5YWs5Y+4XCIsXHJcblx0XCJvYmpJZFwiOiA4MThcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWOn+WIm+iuvuiuoeWMl+asp+WQjueOsOS7o+WNp+WupC/lrqLljoXpqazljaHpvpnlrrblsYXlkIrnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yOS81OTliNjJmMTQ0YTk0NDgzODhjNTFjNDIyOGVmNTBlNz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTM2OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU3NDEuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMDc0XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PnroDnuqbppJDljoUv5qW86YGTL+mFkuWQp+WQiueBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0L2EzYjYyYzcxZjJhMjQ1ZDM4MDcyZDJkMzUwZjY2OWU0P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxMDI5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTYzNS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEzMzBcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWOn+WIm+iuvuiuoeWMl+asp+WQjueOsOS7o+WNp+WupC/lrqLljoXpqazljaHpvpnlrrblsYXlkIrnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yOS8zNzRiZmVhMGE1MmE0ZGQ2OTQ2Yjk5ZjM5MGRjNzcyZD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTY0MC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU4ODguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMDc1XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PnroDnuqbppJDljoUv5qW86YGTL+mFkuWQp+WQiueBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE0Lzk5MGFhM2I0MGY0MjRjMThhMDU0NDhmZTFmZGIzMTBjP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxODI3LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTExMjkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzMxXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLov6roj7LlqJzojLbmoJHljp/mtrLlpLTnmq7lh4DniL3ljrvlsZHmtJflj5HpnLI2ODBtbDAwMzQyMVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA3LzNhYjJjZmEzMzMyMTQ4ZjE4ZDQyM2UzYWRmMTE4NDU4P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU4OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU2OC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLnvo7lpobkuIDlj7fllYbln47ml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDMwOFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5LyY5aau6ams5rK55Lid5ruR5rC05ry+5rSX5Y+R5LmzIOaXoOaCo+WtkOa0l+WPkeawtOS/ruWkjeWPl+aNnyBcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yMC82NDZhYWMwNzIwZGU0MjlkOTZkYTI4YTQyMmQxYTU1YT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMjkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bm/5bee6IGa5oOg5ZWG6LS45pyJ6ZmQ5YWs5Y+4XCIsXHJcblx0XCJvYmpJZFwiOiA4MjBcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWOn+WIm+iuvuiuoeWMl+asp+WQjueOsOS7o+WNp+WupC/lrqLljoXpqazljaHpvpnlrrblsYXlkIrnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8yOS80OGJlYmY5M2IxYWM0MDUzOWY0YmNmMmM3M2U2NmExYT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTk5NS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxMDgwLjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuWSjOWFieaXtuWIm+aXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTA3NlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib6K6+6K6h5YyX5qyn5ZCO546w5Luj5Y2n5a6kL+WuouWOhS/ppJDljoXlrrblsYXlkIrnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC8wZWI2MzNjNTUyNGY0ZmU4OTQzZTZhZmNkYTM4ODk1Yz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTIxNS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU3NTAuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzMyXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLjgJDpppnmuK/nm7Tpgq7jgJFEaW9y6L+q5aWl5Y+j57qi54OI54Sw6JOd6YeR5ZSH6IaP5Y+j57qiIDUyMCPmmJ/mmJ/oibJcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy9hZGMxNTliNzJmOTI0MzFiYjM0NGM0ODU0MzE1NGRjYz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzU4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTIzNS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLluJ3ogIDnvo7lpoblhajnkIPotK1cIixcclxuXHRcIm9iaklkXCI6IDMwOVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5LyY5aau5rSX5Y+R5rC05rKQ5rW06Zyy5aWX6KOF5q2j5ZOB5a625bqt6KOF6KGl5rC05p+U6aG65ruRXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMjAvZTg2OGUyMDlmNjdjNDJhYjkyYjVmOWUzYjhlNTVmYWI/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTg5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTY4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW5v+W3nuiBmuaDoOWVhui0uOaciemZkOWFrOWPuFwiLFxyXG5cdFwib2JqSWRcIjogODIxXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PljaflrqQv5a6i5Y6F6ams5Y2h6b6Z5a625bGF5ZCK54GvXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMjkvNmZkOWE0ZmMxYTJkNDM2ZDgyYzk5ZTYxZDdkZTQ4NGQ/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTIyNTMuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTIyMC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEwNzdcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuebuOWunOacrOiNiee6ouaZr+WkqeeEleS6ruaYjuaYn+aMmueIseekvOebkjEzODYx5paw5pen5qy+6ZqP5py65Y+R6LSnXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvZTEyYTMwNmUxY2QxNGEyY2IyNGNlMzU4NGI4MmEzZWQ/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTM4Ni4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUzMjguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi576O5aaG5LiA5Y+35ZWG5Z+O5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAzMTBcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuS4reWbvemjjuS8oOe7n+WJque6uCDmooUv5YWwL+eruS/oj4rlm5vku7blpZdcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8zMC82NzkwYjFjZWI2MDc0NDJiYWUwMzAyMjA1OWIzNDI4Yj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjAwMC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyMDAwLjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuWVhuWutuS6keaXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTA3OFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib6K6+6K6h5YyX5qyn5ZCO546w5Luj5Y2n5a6kL+WuouWOhS/ppJDljoXlrrblsYXlkIrnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNC9lNjgwYzI2MDY5MzQ0ZjFkYTczNzRhZDRlZTRjNzMwOD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTU2OS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU5NjkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzM0XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLjgJDpppnmuK/nm7Tpgq7jgJFEaW9y6L+q5aWl6a2F5oOR6YeJ5ZSH6IaP5ryG5YWJ5ZSH5b2p5Y+j57qiNzQwI1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA3LzJjZmQ3OTc2MmUxZDQyMzQ4OWVmYjZjMzhhODE5OTM1P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUzNTguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMjM1LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW4neiAgOe+juWmhuWFqOeQg+i0rVwiLFxyXG5cdFwib2JqSWRcIjogMzExXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PnroDnuqbljaflrqQv5bqK5aS0L+alvOmBk+WjgeeBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzMwLzFlMzFiYmVlOWE4NDRiYTg5MGI5NmU3N2U0Nzk3ZmJiP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUyNDUuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTMyLjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuWSjOWFieaXtuWIm+aXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTA3OVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi57Si6IqZ54m56aaZ5rC05rKQ5rW06ZyyNjcwZ+aMgeS5heeVmemmmeaUueWWhOeyl+ezmeW5sueHpVwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzI4Lzc2MDNmYWMwYjE0YzRkYzk5Y2E4MWYwNjg1ZTc4ZDhjP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUzOS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyNi45XCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLntKLoipnnibnkuJPljZblupdcIixcclxuXHRcIm9iaklkXCI6IDMxMlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib6K6+6K6h5YyX5qyn5ZCO546w5Luj566A57qm5Y2n5a6kL+W6iuWktC/mpbzpgZPlo4Hnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8zMC83M2JjNmM1YWQxNjc0MmNjOWI5YmM2NzgyZDY5NmExZT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzMzLjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE3OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEwODBcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuasp+iOsembheWkjeminOaKl+easee0p+iHtOa7i+a2puecvOmcnDE1bWxcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNi85MTk4NWVjN2E5YmE0NmM3OTA1N2IyMDRmNDM3M2UzND9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjQwLjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE3OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzMzZcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuOAkOmmmea4r+ebtOmCruOAkURpb3Lov6rlpaXprYXmg5Hph4nllIfoho/mvIblhYnllIflvanlj6PnuqI3NDQjXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvOTg0ZTM0YzA2NDQ4NGZmNGFkNWQ4NDk3NzA5NGI1MTI/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTM1OC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyMzUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5bid6ICA576O5aaG5YWo55CD6LStXCIsXHJcblx0XCJvYmpJZFwiOiAzMTNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWOn+WIm+iuvuiuoeWMl+asp+WQjueOsOS7o+eugOe6puWNp+WupC/luorlpLQv5qW86YGT5aOB54GvXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMDIvMzEzZGNiYTBiY2I1NDUxNTk2MTYwOTNkMWZlMzM1Njg/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTQ3NS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUyNTUuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMDgxXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLmrKfojrHpm4XlpI3popzmuIXkubPmn5TogqTmsLQxMzBtbFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE2LzNiMGNkMmE1NzM4ZjQ5ODY5MjlhMjZhZGFkYTAyMDg0P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxOTAuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTY5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuS5neS5neiHquiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTMzN1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi44CQ6aaZ5riv55u06YKu44CRRGlvcui/quWlpeeyiea8vuivseaDkeWPmOiJsua2puWUh+iGj+WPo+e6ojAwMSPnsonoibJcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy9lNzMyZTJlOWIwOGE0NGM2YmEyZDgyNmE2OWFiY2Q3OD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjk4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTIxNS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLluJ3ogIDnvo7lpoblhajnkIPotK1cIixcclxuXHRcIm9iaklkXCI6IDMxNFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib6K6+6K6h5YyX5qyn5ZCO546w5Luj566A57qm5Y2n5a6kL+W6iuWktC/kuabmiL8v5a6i5Y6F5a625bGF5Y+w54GvXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMDIvNzZhMjUwNWE1Zjc4NGI3OTk3MTA2NDRkNGQ4YzZjODY/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTMwOS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxNjkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5ZKM5YWJ5pe25Yib5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMDgyXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLmrKfojrHpm4XmuIXmtqbokaHokITnsb3kv53mub/mn5TogqTmsLQxMzBtbFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE2LzA3OTI1ZWM3ODMyMzQ5MGQ4MDI5NzE4MjhhMGRmNjY2P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxNTUuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlOTkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzM4XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLjgJDpppnmuK/nm7Tpgq7jgJFEaW9y6L+q5aWl57KJ5ry+6K+x5oOR5Y+Y6Imy5ram5ZSH6IaP5Y+j57qiMDA0I+apmOiJslwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA3L2FkZjgzZTY4YzFkNjRhYWNiOTRjOWVhZDZhM2Q5ZDhjP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUyOTguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMjE1LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW4neiAgOe+juWmhuWFqOeQg+i0rVwiLFxyXG5cdFwib2JqSWRcIjogMzE1XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PnroDnuqbljaflrqQv5bqK5aS0L+S5puaIvy/lrqLljoXlrrblsYXlj7Dnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8wMi80OTA4YmU1ZGNkNDY0NmFjYjQ2NTViMzU4Mzc2N2Y0Zj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlNDAyLjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTIxOS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEwODNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuasp+iOsembheWwj+m7keeTtumdkuaYpeWvhueggemFtee0oOeyvuWNjuiCjOW6lea2sjMwbWwvNTBtbC83MG1sXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTYvZjlkZTMyYWZkZDUwNGE0MWJjOGUyNTQ1ZWZlMGRhNDQ/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTI4MC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxOTkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzM5XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLnm7jlrpzmnKzojYnnnaHojrLmsLTngbXogozmsoHmtqboh7vkuqvnpLznm5IxMzU3MeaWsOaXp+asvumaj+acuuWPkei0p1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA3Lzc2YjU2YzJlNjNlNDQwYjA4MTg5ZmI0Y2EyNDA2ZGIzP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU0NTguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNDI4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIue+juWmhuS4gOWPt+WVhuWfjuaXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMzE2XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PnroDnuqbljaflrqQv5bqK5aS0L+S5puaIvy/lrqLljoXlrrblsYXlj7Dnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8wMi9hZDc5NzVmNzY5MmI0YzYwOTBlNGVlMzFjZjA0MzRjYj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjg1LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTE1NS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEwODRcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuasp+iOsembheWwj+m7keeTtumdkuaYpeWvhueggemFtee0oOeyvuWNjuiCjOW6lea2sjMwbWwvNTBtbC83MG1sXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTYvZjlkZTMyYWZkZDUwNGE0MWJjOGUyNTQ1ZWZlMGRhNDQ/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTI4MC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxOTkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzQwXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLjgJDpppnmuK/nm7Tpgq7jgJFZU0zlnKPnvZflhbDmlrnnrqHlj6PnuqIgMSPmraPnuqLoibJcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy83NWI2ZjE0NjVlNGE0NmU4YTlkZWQzOGY3NjAyZGNiNT9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzk4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTIyOS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLluJ3ogIDnvo7lpoblhajnkIPotK1cIixcclxuXHRcIm9iaklkXCI6IDMxN1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib6K6+6K6h5YyX5qyn5ZCO546w5Luj566A57qm5Y2n5a6kL+W6iuWktC/mpbzpgZPlo4Hnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8wMi8xYTk5ZGVlM2Q4ODU0Nzc4YWQ0ODRjM2RjMDhlMjFjMz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMjEwLjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTExNS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEwODVcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuasp+iOsembhea4hea2puiRoeiQhOexveS/nea5v+S5s+a2sjExMG1sXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTYvOTA0Nzg4ZGMyMDIzNGQxMWFlYzFkNGUwMjcyNGU0Nzc/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTE2OS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxMjkuMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5Lmd5Lmd6Ieq6JCl5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAxMzQxXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLnm7jlrpzmnKzojYnnuqLmma/lpKnnhJXkuq7nsr7ljY7mtrI0MGcxMDM5NlwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA3LzAwMDMyZGVlN2E3MzRkOGY5N2JjZGYwNmQxMDlkMzVmP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUyMzguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTk4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIue+juWmhuS4gOWPt+WVhuWfjuaXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMzE4XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PnroDnuqbljaflrqQv5bqK5aS0L+alvOmBk+WjgeeBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzAyLzBkMjk2ZjkwMGY5NzRkN2Y4MTQ3ZjZmZGI5ZmQ4MzY4P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUzMzkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTg1LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuWSjOWFieaXtuWIm+aXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTA4NlxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi44CQ6aaZ5riv55u06YKu44CRWVNM5Zyj572X5YWw5pa5566h5Y+j57qiIDEzI+apmOe6ouiJslwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA3LzExYmQwNzc1ZTc1YTRmMTU4NzYwMmU3ZDMzZGVkMmZjP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUzOTguMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMjI5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuW4neiAgOe+juWmhuWFqOeQg+i0rVwiLFxyXG5cdFwib2JqSWRcIjogMzE5XHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PnroDnuqblrqLljoUv5Y2n5a6kL+S5puaIvy/pmLPlj7DokL3lnLDnga9cIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8wMi8wZWRmNzI1MGFlY2Q0MTUyYmQyNDYyNjA0ZTIwMDQ0Yj9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlNzE5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTQ2OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEwODdcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuasp+iOsembhea4hea2puiRoeiQhOexveS/nea5v+eJuea2puWHnemcnDUwbWxcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMi8xNi8xYjI2M2FhNGY2MzY0M2ZhOWQ3YTYxYTdkMDBmOTk1Nz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTYwLjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTEyOS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzNDNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuOAkOmmmea4r+ebtOmCruOAkVlTTOWco+e9l+WFsOaWueeuoeWPo+e6oiAxNyPopb/mn5rnsolcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy81Y2M2M2I1NjIyYjU0YjBlYjJkOWI4NTI2ZDUwZWVjZD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzk4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTIyOS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLluJ3ogIDnvo7lpoblhajnkIPotK1cIixcclxuXHRcIm9iaklkXCI6IDMyMFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib6K6+6K6h5YyX5qyn5ZCO546w5Luj566A57qm5a6i5Y6FL+alvOair+eBr+ieuuaXi+WQiueBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzAyL2Q5NjY4OTU5NjcwMTQ4NDc4N2U3OTc0MDk2ZjYwNTQxP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU4NTQuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlNDU5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuWSjOWFieaXtuWIm+aXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTA4OFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5qyn6I6x6ZuF55S35aOr5rC06IO95L+d5rm/5by65ram6ZycNTBtbFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE2LzYyYmRjZDZhMTU2MDQ2MDc4OGMyYTcxMTFiNWQ2NTQ5P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU3OS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU1OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzNDRcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuOAkOmmmea4r+ebtOmCruOAkVlTTOWco+e9l+WFsOaWueeuoeWPo+e6oiA1MiPmmJ/mmJ/oibJcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy8wMGE2NTkyNjlhNzI0NTJkOTkyMjhjZTVhODUyOGZkYz9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMzk4LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTIyOS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLluJ3ogIDnvo7lpoblhajnkIPotK1cIixcclxuXHRcIm9iaklkXCI6IDMyMVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5Y6f5Yib6K6+6K6h5YyX5qyn5ZCO546w5Luj566A57qm5a6i5Y6FL+alvOair+eBr+ieuuaXi+WQiueBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzAyLzI4NTUwMGVlYmQwOTRhYTlhYTczY2IxNmYzYzg4NDM4P2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxMjkwLjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTY5OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEwODlcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuasp+iOsembheWkjeminOa0gemdouS5szEyNW1sXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTYvZWI3ODY4ODE2NmQ0NGFiNGFhNWVjNDJjY2NlMTZjNWM/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTEyOS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU5OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzNDVcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuebuOWunOacrOiNiee6ouaZr+WkqeW5vOeZveeyvuWNjuawtDEyMG1sMDM0NDJcIixcclxuXHRcImltZ1wiOiBcImh0dHA6Ly9xbi5rZW1lYW4uY24vdXBsb2FkLzIwMTkxMS8wNy8xYTNlOTgwMmI3NjQ0ZTc5YjYyOTE4M2E4OTRkMWIxOD9pbWFnZVZpZXcyLzAvdy84MDBcIixcclxuXHRcInByaWNlU2hvcFwiOiBcIsKlMTA5LjBcIixcclxuXHRcInByaWNlRGlzY291bnRcIjogXCLCpTg4LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIue+juWmhuS4gOWPt+WVhuWfjuaXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMzIyXHJcbn0sIHtcclxuXHRcIm5hbWVcIjogXCLljp/liJvorr7orqHljJfmrKflkI7njrDku6PnroDnuqblrqLljoUv5qW85qKv54Gv6J665peL5ZCK54GvXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMDIvZTc0NzU3NjkxYzgwNGI4MWFhZTNiMjA2NjYwMTM5YTg/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTIzNDYuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTI2OS4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLlkozlhYnml7bliJvml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDEwOTBcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuasp+iOsembhea4hea2puiRoeiQhOexveawtOWrqea0gemdouS5szEyNW1sXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMTYvZDJjZWFkNDYwYTg4NDdhM2E5YjYzYWM0Mjc1N2UzN2M/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTEwOS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU3OC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLkuZ3kuZ3oh6rokKXlupdcIixcclxuXHRcIm9iaklkXCI6IDEzNDZcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuebuOWunOacrOiNiee6ouaZr+WkqeW5vOeZveeyvuWNjuS5szEyMGcwMzQ2NlwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTExLzA3LzI0MDJlNDgxOTEyMTRmMTNhMzg2MjY5NGEyYTY3NmVkP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUxMTkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlOTguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi576O5aaG5LiA5Y+35ZWG5Z+O5peX6Iiw5bqXXCIsXHJcblx0XCJvYmpJZFwiOiAzMjNcclxufSwge1xyXG5cdFwibmFtZVwiOiBcIuWOn+WIm+iuvuiuoeWMl+asp+WQjueOsOS7o+eugOe6pumkkOWOheS5puaIv+WQiueBr1wiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzAyLzZmNGVjYzI2NDA4NDRiOWJhM2Q3NWNkMzI2NzEzZmQyP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqU1MjUuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMjg0LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuWSjOWFieaXtuWIm+aXl+iIsOW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTA5MVxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5qyn6I6x6ZuF5aSN6aKc57Sn6Ie05ruL5ram5pma6ZycNTBtbFwiLFxyXG5cdFwiaW1nXCI6IFwiaHR0cDovL3FuLmtlbWVhbi5jbi91cGxvYWQvMjAxOTEyLzE2Lzg4NDhkNTFkNDVmYzQ3OWM5OGU4NWY0NzFmYzNhMDgzP2ltYWdlVmlldzIvMC93LzgwMFwiLFxyXG5cdFwicHJpY2VTaG9wXCI6IFwiwqUyMTkuMFwiLFxyXG5cdFwicHJpY2VEaXNjb3VudFwiOiBcIsKlMTY5LjBcIixcclxuXHRcIm51bVNhbGVzXCI6IDAsXHJcblx0XCJwdFByaWNlXCI6IG51bGwsXHJcblx0XCJzaG9wTmFtZVwiOiBcIuS5neS5neiHquiQpeW6l1wiLFxyXG5cdFwib2JqSWRcIjogMTM0N1xyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi6Iqx6L+3LuWHgOminOedoeiOsuWHgOa2puWNuOWmhuawtDQwME1MIO+8iOeJueS+m++8iTkwMzEyXCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTEvMDcvMWIxY2I5Zjc4NGJhNGZhZWJmZjgwYjQyODQ5ZjcwMzk/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTEzOS4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqU4OC4wXCIsXHJcblx0XCJudW1TYWxlc1wiOiAwLFxyXG5cdFwicHRQcmljZVwiOiBudWxsLFxyXG5cdFwic2hvcE5hbWVcIjogXCLnvo7lpobkuIDlj7fllYbln47ml5foiLDlupdcIixcclxuXHRcIm9iaklkXCI6IDMyNFxyXG59LCB7XHJcblx0XCJuYW1lXCI6IFwi5rOJ5rCP5YeA5rC05Zmo5rC06b6Z5aS06L+H5ruk5Zmo5a6255So5Y6o5oi/5Y2r55Sf6Ze06Ieq5p2l5rC05ruk5rC05Zmo5YmN572u5YeA5YyW5rC05py6XCIsXHJcblx0XCJpbWdcIjogXCJodHRwOi8vcW4ua2VtZWFuLmNuL3VwbG9hZC8yMDE5MTIvMDMvODIyM2RkMmM0ZjJjNDI5N2FjYTNiNjcxNmVhOGQ2ZmI/aW1hZ2VWaWV3Mi8wL3cvODAwXCIsXHJcblx0XCJwcmljZVNob3BcIjogXCLCpTMyMC4wXCIsXHJcblx0XCJwcmljZURpc2NvdW50XCI6IFwiwqUxMDguMFwiLFxyXG5cdFwibnVtU2FsZXNcIjogMCxcclxuXHRcInB0UHJpY2VcIjogbnVsbCxcclxuXHRcInNob3BOYW1lXCI6IFwi5rex5Zyz5biC5rOJ5rCP5riF56eR5oqA5pyJ6ZmQ5YWs5Y+4XCIsXHJcblx0XCJvYmpJZFwiOiAxMDkyXHJcbn1dXHJcbiIsIi8vIG1lc2Nyb2xsLWJvZHkg5ZKMIG1lc2Nyb2xsLXVuaSDpgJrnlKhcclxuXHJcbi8vIGltcG9ydCBNZXNjcm9sbFVuaSBmcm9tIFwiLi9tZXNjcm9sbC11bmkudnVlXCI7XHJcbi8vIGltcG9ydCBNZXNjcm9sbEJvZHkgZnJvbSBcIi4vbWVzY3JvbGwtYm9keS52dWVcIjtcclxuXHJcbmNvbnN0IE1lc2Nyb2xsTWl4aW4gPSB7XHJcblx0Ly8gY29tcG9uZW50czogeyAvLyDpnZ5INeerr+aXoOazlemAmui/h21peGlu5rOo5YaM57uE5Lu2LCDlj6rog73lnKhtYWluLmpz5Lit5rOo5YaM5YWo5bGA57uE5Lu25oiW5YW35L2T55WM6Z2i5Lit5rOo5YaMXHJcblx0Ly8gXHRNZXNjcm9sbFVuaSxcclxuXHQvLyBcdE1lc2Nyb2xsQm9keVxyXG5cdC8vIH0sXHJcblx0ZGF0YSgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdG1lc2Nyb2xsOiBudWxsIC8vbWVzY3JvbGzlrp7kvovlr7nosaFcclxuXHRcdH1cclxuXHR9LFxyXG5cdC8vIOazqOWGjOezu+e7n+iHquW4pueahOS4i+aLieWIt+aWsCAo6YWN572uZG93bi5uYXRpdmXkuLp0cnVl5pe255Sf5pWILCDov5jpnIDlnKhwYWdlc+mFjee9rmVuYWJsZVB1bGxEb3duUmVmcmVzaDp0cnVlO+ivpuivt+WPguiAg21lc2Nyb2xsLW5hdGl2ZeeahOahiOS+iylcclxuXHRvblB1bGxEb3duUmVmcmVzaCgpe1xyXG5cdFx0dGhpcy5tZXNjcm9sbCAmJiB0aGlzLm1lc2Nyb2xsLm9uUHVsbERvd25SZWZyZXNoKCk7XHJcblx0fSxcclxuXHQvLyDms6jlhozliJfooajmu5rliqjkuovku7Ys55So5LqO5Yik5a6a5Zyo6aG26YOo5Y+v5LiL5ouJ5Yi35pawLOWcqOaMh+WumuS9jee9ruWPr+aYvuekuumakOiXj+WbnuWIsOmhtumDqOaMiemSriAo5q2k5pa55rOV5Li66aG16Z2i55Sf5ZG95ZGo5pyfLOaXoOazleWcqOWtkOe7hOS7tuS4reinpuWPkSwg5LuF5ZyobWVzY3JvbGwtYm9keeeUn+aViClcclxuXHRvblBhZ2VTY3JvbGwoZSkge1xyXG5cdFx0dGhpcy5tZXNjcm9sbCAmJiB0aGlzLm1lc2Nyb2xsLm9uUGFnZVNjcm9sbChlKTtcclxuXHR9LFxyXG5cdC8vIOazqOWGjOa7muWKqOWIsOW6lemDqOeahOS6i+S7tiznlKjkuo7kuIrmi4nliqDovb0gKOatpOaWueazleS4uumhtemdoueUn+WRveWRqOacnyzml6Dms5XlnKjlrZDnu4Tku7bkuK3op6blj5EsIOS7heWcqG1lc2Nyb2xsLWJvZHnnlJ/mlYgpXHJcblx0b25SZWFjaEJvdHRvbSgpIHtcclxuXHRcdHRoaXMubWVzY3JvbGwgJiYgdGhpcy5tZXNjcm9sbC5vblJlYWNoQm90dG9tKCk7XHJcblx0fSxcclxuXHRtZXRob2RzOiB7XHJcblx0XHQvLyBtZXNjcm9sbOe7hOS7tuWIneWni+WMlueahOWbnuiwgyzlj6/ojrflj5bliLBtZXNjcm9sbOWvueixoVxyXG5cdFx0bWVzY3JvbGxJbml0KG1lc2Nyb2xsKSB7XHJcblx0XHRcdHRoaXMubWVzY3JvbGwgPSBtZXNjcm9sbDtcclxuXHRcdFx0dGhpcy5tZXNjcm9sbEluaXRCeVJlZigpOyAvLyDlhbzlrrnlrZfoioLot7PliqjlsI/nqIvluo9cclxuXHRcdH0sXHJcblx0XHQvLyDku6VyZWbnmoTmlrnlvI/liJ3lp4vljJZtZXNjcm9sbOWvueixoSAo5YW85a655a2X6IqC6Lez5Yqo5bCP56iL5bqPOiBodHRwOi8vd3d3Lm1lc2Nyb2xsLmNvbS9xYS5odG1sP3Y9MjAyMDAxMDcjcTI2KVxyXG5cdFx0bWVzY3JvbGxJbml0QnlSZWYoKSB7XHJcblx0XHRcdGlmKCF0aGlzLm1lc2Nyb2xsIHx8ICF0aGlzLm1lc2Nyb2xsLnJlc2V0VXBTY3JvbGwpe1xyXG5cdFx0XHRcdGxldCBtZXNjcm9sbFJlZiA9IHRoaXMuJHJlZnMubWVzY3JvbGxSZWY7XHJcblx0XHRcdFx0aWYobWVzY3JvbGxSZWYpIHRoaXMubWVzY3JvbGwgPSBtZXNjcm9sbFJlZi5tZXNjcm9sbFxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0Ly8g5LiL5ouJ5Yi35paw55qE5Zue6LCDXHJcblx0XHRkb3duQ2FsbGJhY2soKSB7XHJcblx0XHRcdC8vIG1peGlu6buY6K6kcmVzZXRVcFNjcm9sbFxyXG5cdFx0XHR0aGlzLm1lc2Nyb2xsLnJlc2V0VXBTY3JvbGwoKVxyXG5cdFx0fSxcclxuXHRcdC8vIOS4iuaLieWKoOi9veeahOWbnuiwg1xyXG5cdFx0dXBDYWxsYmFjaygpIHtcclxuXHRcdFx0Ly8gbWl4aW7pu5jorqTlu7bml7Y1MDDoh6rliqjnu5PmnZ/liqDovb1cclxuXHRcdFx0c2V0VGltZW91dCgoKT0+e1xyXG5cdFx0XHRcdHRoaXMubWVzY3JvbGwuZW5kRXJyKCk7XHJcblx0XHRcdH0sIDUwMClcclxuXHRcdH1cclxuXHR9LFxyXG5cdG1vdW50ZWQoKSB7XHJcblx0XHR0aGlzLm1lc2Nyb2xsSW5pdEJ5UmVmKCk7IC8vIOWFvOWuueWtl+iKgui3s+WKqOWwj+eoi+W6jywg6YG/5YWN5pyq6K6+572uQGluaXTmiJZAaW5pdOatpOaXtuacquiDveWPluWIsHJlZueahOaDheWGtVxyXG5cdH1cclxuXHRcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWVzY3JvbGxNaXhpbjtcclxuIiwiaW1wb3J0IGRlZXBNZXJnZSBmcm9tIFwiLi4vZnVuY3Rpb24vZGVlcE1lcmdlXCI7XHJcbmltcG9ydCB2YWxpZGF0ZSBmcm9tIFwiLi4vZnVuY3Rpb24vdGVzdFwiO1xyXG5jbGFzcyBSZXF1ZXN0IHtcclxuXHQvLyDorr7nva7lhajlsYDpu5jorqTphY3nva5cclxuXHRzZXRDb25maWcoY3VzdG9tQ29uZmlnKSB7XHJcblx0XHQvLyDmt7HluqblkIjlubblr7nosaHvvIzlkKbliJnkvJrpgKDmiJDlr7nosaHmt7HlsYLlsZ7mgKfkuKLlpLFcclxuXHRcdHRoaXMuY29uZmlnID0gZGVlcE1lcmdlKHRoaXMuY29uZmlnLCBjdXN0b21Db25maWcpO1xyXG5cdH1cclxuXHJcblx0Ly8g5Li76KaB6K+35rGC6YOo5YiGXHJcblx0cmVxdWVzdChvcHRpb25zID0ge30pIHtcclxuXHRcdC8vIOajgOafpeivt+axguaLpuaIqlxyXG5cdFx0aWYgKHRoaXMuaW50ZXJjZXB0b3IucmVxdWVzdCAmJiB0eXBlb2YgdGhpcy5pbnRlcmNlcHRvci5yZXF1ZXN0ID09PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdGxldCB0bXBDb25maWcgPSB7fTtcclxuXHRcdFx0bGV0IGludGVyY2VwdG9yUmV1ZXN0ID0gdGhpcy5pbnRlcmNlcHRvci5yZXF1ZXN0KG9wdGlvbnMpO1xyXG5cdFx0XHRpZiAoaW50ZXJjZXB0b3JSZXVlc3QgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMub3B0aW9ucyA9IGludGVyY2VwdG9yUmV1ZXN0O1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRvcHRpb25zLmRhdGFUeXBlID0gb3B0aW9ucy5kYXRhVHlwZSB8fCB0aGlzLmNvbmZpZy5kYXRhVHlwZTtcclxuXHRcdG9wdGlvbnMucmVzcG9uc2VUeXBlID0gb3B0aW9ucy5yZXNwb25zZVR5cGUgfHwgdGhpcy5jb25maWcucmVzcG9uc2VUeXBlO1xyXG5cdFx0b3B0aW9ucy51cmwgPSBvcHRpb25zLnVybCB8fCAnJztcclxuXHRcdG9wdGlvbnMucGFyYW1zID0gb3B0aW9ucy5wYXJhbXMgfHwge307XHJcblx0XHRvcHRpb25zLmhlYWRlciA9IE9iamVjdC5hc3NpZ24odGhpcy5jb25maWcuaGVhZGVyLCBvcHRpb25zLmhlYWRlcik7XHJcblx0XHRvcHRpb25zLm1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IHRoaXMuY29uZmlnLm1ldGhvZDtcclxuXHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHRvcHRpb25zLmNvbXBsZXRlID0gKHJlc3BvbnNlKSA9PiB7XHJcblx0XHRcdFx0Ly8g6K+35rGC6L+U5Zue5ZCO77yM6ZqQ6JePbG9hZGluZyjlpoLmnpzor7fmsYLov5Tlm57lv6vnmoTor53vvIzlj6/og73kvJrmsqHmnIlsb2FkaW5nKVxyXG5cdFx0XHRcdHVuaS5oaWRlTG9hZGluZygpO1xyXG5cdFx0XHRcdC8vIOa4hemZpOWumuaXtuWZqO+8jOWmguaenOivt+axguWbnuadpeS6hu+8jOWwseaXoOmcgGxvYWRpbmdcclxuXHRcdFx0XHRjbGVhclRpbWVvdXQodGhpcy5jb25maWcudGltZXIpO1xyXG5cdFx0XHRcdHRoaXMudGltZXIgPSBudWxsO1xyXG5cdFx0XHRcdC8vIOWIpOaWreeUqOaIt+WvueaLpuaIqui/lOWbnuaVsOaNrueahOimgeaxgu+8jOWmguaenG9yaWdpbmFsRGF0YeS4unRydWXvvIzov5Tlm57miYDmnInnmoTmlbDmja4ocmVzcG9uc2Up5Yiw5oum5oiq5Zmo77yM5ZCm5YiZ5Y+q6L+U5ZuecmVzcG9uc2UuZGF0YVxyXG5cdFx0XHRcdGlmKHRoaXMuY29uZmlnLm9yaWdpbmFsRGF0YSkge1xyXG5cdFx0XHRcdFx0Ly8g5Yik5pat5piv5ZCm5a2Y5Zyo5oum5oiq5ZmoXHJcblx0XHRcdFx0XHRpZiAodGhpcy5pbnRlcmNlcHRvci5yZXNwb25zZSAmJiB0eXBlb2YgdGhpcy5pbnRlcmNlcHRvci5yZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdFx0XHRsZXQgcmVzSW50ZXJjZXB0b3JzID0gdGhpcy5pbnRlcmNlcHRvci5yZXNwb25zZShyZXNwb25zZSk7XHJcblx0XHRcdFx0XHRcdC8vIOWmguaenOaLpuaIquWZqOS4jei/lOWbnmZhbHNl77yM5bCx5bCG5oum5oiq5Zmo6L+U5Zue55qE5YaF5a6557uZdGhpcy4kdS5wb3N055qEdGhlbuWbnuiwg1xyXG5cdFx0XHRcdFx0XHRpZiAocmVzSW50ZXJjZXB0b3JzICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUocmVzSW50ZXJjZXB0b3JzKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQvLyDlpoLmnpzmi6bmiKrlmajov5Tlm55mYWxzZe+8jOaEj+WRs+edgOaLpuaIquWZqOWumuS5ieiAheiupOS4uui/lOWbnuaciemXrumimO+8jOebtOaOpeaOpeWFpWNhdGNo5Zue6LCDXHJcblx0XHRcdFx0XHRcdFx0cmVqZWN0KHJlc3BvbnNlKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Ly8g5aaC5p6c6KaB5rGC6L+U5Zue5Y6f5aeL5pWw5o2u77yM5bCx566X5rKh5pyJ5oum5oiq5Zmo77yM5Lmf6L+U5Zue5pyA5Y6f5aeL55qE5pWw5o2uXHJcblx0XHRcdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PSAyMDApIHtcclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuaW50ZXJjZXB0b3IucmVzcG9uc2UgJiYgdHlwZW9mIHRoaXMuaW50ZXJjZXB0b3IucmVzcG9uc2UgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdFx0XHRsZXQgcmVzSW50ZXJjZXB0b3JzID0gdGhpcy5pbnRlcmNlcHRvci5yZXNwb25zZShyZXNwb25zZS5kYXRhKTtcclxuXHRcdFx0XHRcdFx0XHRpZiAocmVzSW50ZXJjZXB0b3JzICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZShyZXNJbnRlcmNlcHRvcnMpO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZWplY3QocmVzcG9uc2UuZGF0YSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdC8vIOWmguaenOS4jeaYr+i/lOWbnuWOn+Wni+aVsOaNrihvcmlnaW5hbERhdGE9ZmFsc2Up77yM5LiU5rKh5pyJ5oum5oiq5Zmo55qE5oOF5Ya15LiL77yM6L+U5Zue57qv5pWw5o2u57uZdGhlbuWbnuiwg1xyXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdC8vIOS4jei/lOWbnuWOn+Wni+aVsOaNrueahOaDheWGteS4i++8jOacjeWKoeWZqOeKtuaAgeeggeS4jeS4ujIwMO+8jG1vZGFs5by55qGG5o+Q56S6XHJcblx0XHRcdFx0XHRcdGlmKHJlc3BvbnNlLmVyck1zZykge1xyXG5cdFx0XHRcdFx0XHRcdHVuaS5zaG93TW9kYWwoe1xyXG5cdFx0XHRcdFx0XHRcdFx0dGl0bGU6IHJlc3BvbnNlLmVyck1zZ1xyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHJlamVjdChyZXNwb25zZSlcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIOWIpOaWreeUqOaIt+S8oOmAkueahFVSTOaYr+WQpi/lvIDlpLQs5aaC5p6c5LiN5pivLOWKoOS4ii/vvIzov5nph4zkvb/nlKjkuoZ1Vmlld+eahHRlc3QuanPpqozor4HlupPnmoR1cmwoKeaWueazlVxyXG5cdFx0XHRvcHRpb25zLnVybCA9IHZhbGlkYXRlLnVybChvcHRpb25zLnVybCkgPyBvcHRpb25zLnVybCA6ICh0aGlzLmNvbmZpZy5iYXNlVXJsICsgKG9wdGlvbnMudXJsLmluZGV4T2YoJy8nKSA9PSAwID9cclxuXHRcdFx0XHRvcHRpb25zLnVybCA6ICcvJyArIG9wdGlvbnMudXJsKSk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyDmmK/lkKbmmL7npLpsb2FkaW5nXHJcblx0XHRcdC8vIOWKoOS4gOS4quaYr+WQpuW3suaciXRpbWVy5a6a5pe25Zmo55qE5Yik5pat77yM5ZCm5YiZ5pyJ5Lik5Liq5ZCM5pe26K+35rGC55qE5pe25YCZ77yM5ZCO6ICF5Lya5riF6Zmk5YmN6ICF55qE5a6a5pe25ZmoaWRcclxuXHRcdFx0Ly8g6ICM5rKh5pyJ5riF6Zmk5YmN6ICF55qE5a6a5pe25Zmo77yM5a+86Ie05YmN6ICF6LaF5pe277yM5LiA55u05pi+56S6bG9hZGluZ1xyXG5cdFx0XHRpZih0aGlzLmNvbmZpZy5zaG93TG9hZGluZyAmJiAhdGhpcy5jb25maWcudGltZXIpIHtcclxuXHRcdFx0XHR0aGlzLmNvbmZpZy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0dW5pLnNob3dMb2FkaW5nKHtcclxuXHRcdFx0XHRcdFx0dGl0bGU6IHRoaXMuY29uZmlnLmxvYWRpbmdUZXh0LFxyXG5cdFx0XHRcdFx0XHRtYXNrOiB0aGlzLmNvbmZpZy5sb2FkaW5nTWFza1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdHRoaXMuY29uZmlnLnRpbWVyID0gbnVsbDtcclxuXHRcdFx0XHR9LCB0aGlzLmNvbmZpZy5sb2FkaW5nVGltZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0dW5pLnJlcXVlc3Qob3B0aW9ucyk7XHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHR0aGlzLmNvbmZpZyA9IHtcclxuXHRcdFx0YmFzZVVybDogJycsIC8vIOivt+axgueahOagueWfn+WQjVxyXG5cdFx0XHQvLyDpu5jorqTnmoTor7fmsYLlpLRcclxuXHRcdFx0aGVhZGVyOiB7fSxcclxuXHRcdFx0bWV0aG9kOiAnUE9TVCcsXHJcblx0XHRcdC8vIOiuvue9ruS4umpzb27vvIzov5Tlm57lkI51bmkucmVxdWVzdOS8muWvueaVsOaNrui/m+ihjOS4gOasoUpTT04ucGFyc2VcclxuXHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdFx0Ly8g5q2k5Y+C5pWw5peg6ZyA5aSE55CG77yM5Zug5Li6NSvlkozmlK/ku5jlrp3lsI/nqIvluo/kuI3mlK/mjIHvvIzpu5jorqTkuLp0ZXh05Y2z5Y+vXHJcblx0XHRcdHJlc3BvbnNlVHlwZTogJ3RleHQnLFxyXG5cdFx0XHRzaG93TG9hZGluZzogdHJ1ZSwgLy8g5piv5ZCm5pi+56S66K+35rGC5Lit55qEbG9hZGluZ1xyXG5cdFx0XHRsb2FkaW5nVGV4dDogJ+ivt+axguS4rS4uLicsXHJcblx0XHRcdGxvYWRpbmdUaW1lOiA4MDAsIC8vIOWcqOatpOaXtumXtOWGhe+8jOivt+axgui/mOayoeWbnuadpeeahOivne+8jOWwseaYvuekuuWKoOi9veS4reWKqOeUu++8jOWNleS9jW1zXHJcblx0XHRcdHRpbWVyOiBudWxsLCAvLyDlrprml7blmahcclxuXHRcdFx0b3JpZ2luYWxEYXRhOiBmYWxzZSwgLy8g5piv5ZCm5Zyo5oum5oiq5Zmo5Lit6L+U5Zue5pyN5Yqh56uv55qE5Y6f5aeL5pWw5o2u77yM6KeB5paH5qGj6K+05piOXHJcblx0XHRcdGxvYWRpbmdNYXNrOiB0cnVlLCAvLyDlsZXnpLpsb2FkaW5n55qE5pe25YCZ77yM5piv5ZCm57uZ5LiA5Liq6YCP5piO55qE6JKZ5bGC77yM6Ziy5q2i6Kem5pG456m/6YCPXHJcblx0XHR9XHJcblx0XHJcblx0XHQvLyDmi6bmiKrlmahcclxuXHRcdHRoaXMuaW50ZXJjZXB0b3IgPSB7XHJcblx0XHRcdC8vIOivt+axguWJjeeahOaLpuaIqlxyXG5cdFx0XHRyZXF1ZXN0OiBudWxsLFxyXG5cdFx0XHQvLyDor7fmsYLlkI7nmoTmi6bmiKpcclxuXHRcdFx0cmVzcG9uc2U6IG51bGxcclxuXHRcdH1cclxuXHJcblx0XHQvLyBnZXTor7fmsYJcclxuXHRcdHRoaXMuZ2V0ID0gKHVybCwgZGF0YSA9IHt9LCBoZWFkZXIgPSB7fSkgPT4ge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5yZXF1ZXN0KHtcclxuXHRcdFx0XHRtZXRob2Q6ICdHRVQnLFxyXG5cdFx0XHRcdHVybCxcclxuXHRcdFx0XHRoZWFkZXIsXHJcblx0XHRcdFx0ZGF0YVxyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHBvc3Tor7fmsYJcclxuXHRcdHRoaXMucG9zdCA9ICh1cmwsIGRhdGEgPSB7fSwgaGVhZGVyID0ge30pID0+IHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucmVxdWVzdCh7XHJcblx0XHRcdFx0dXJsLFxyXG5cdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxyXG5cdFx0XHRcdGhlYWRlcixcclxuXHRcdFx0XHRkYXRhXHJcblx0XHRcdH0pXHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vIHB1dOivt+axgu+8jOS4jeaUr+aMgeaUr+S7mOWuneWwj+eoi+W6jyhIWDIuNi4xNSlcclxuXHRcdHRoaXMucHV0ID0gKHVybCwgZGF0YSA9IHt9LCBoZWFkZXIgPSB7fSkgPT4ge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5yZXF1ZXN0KHtcclxuXHRcdFx0XHR1cmwsXHJcblx0XHRcdFx0bWV0aG9kOiAnUFVUJyxcclxuXHRcdFx0XHRoZWFkZXIsXHJcblx0XHRcdFx0ZGF0YVxyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHQvLyBkZWxldGXor7fmsYLvvIzkuI3mlK/mjIHmlK/ku5jlrp3lkozlpLTmnaHlsI/nqIvluo8oSFgyLjYuMTUpXHJcblx0XHR0aGlzLmRlbGV0ZSA9ICh1cmwsIGRhdGEgPSB7fSwgaGVhZGVyID0ge30pID0+IHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucmVxdWVzdCh7XHJcblx0XHRcdFx0dXJsLFxyXG5cdFx0XHRcdG1ldGhvZDogJ0RFTEVURScsXHJcblx0XHRcdFx0aGVhZGVyLFxyXG5cdFx0XHRcdGRhdGFcclxuXHRcdFx0fSlcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgbmV3IFJlcXVlc3RcclxuIiwiLyohXG4gKiBWdWUuanMgdjIuNi4xMVxuICogKGMpIDIwMTQtMjAyMCBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAge1xuICAgICAgaWYodm0uJHNjb3BlICYmIHZtLiRzY29wZS5pcyl7XG4gICAgICAgIHJldHVybiB2bS4kc2NvcGUuaXNcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgLy8gZml4ZWQgYnkgeHh4eHh4IChudnVlIHZ1ZXgpXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG4gIGlmKHR5cGVvZiBTaGFyZWRPYmplY3QgIT09ICd1bmRlZmluZWQnKXtcbiAgICB0aGlzLmlkID0gU2hhcmVkT2JqZWN0LnVpZCsrO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaWQgPSB1aWQrKztcbiAgfVxuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC5TaGFyZWRPYmplY3QudGFyZ2V0KSB7XG4gICAgRGVwLlNoYXJlZE9iamVjdC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG4vLyBmaXhlZCBieSB4eHh4eHggKG52dWUgc2hhcmVkIHZ1ZXgpXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuRGVwLlNoYXJlZE9iamVjdCA9IHR5cGVvZiBTaGFyZWRPYmplY3QgIT09ICd1bmRlZmluZWQnID8gU2hhcmVkT2JqZWN0IDoge307XG5EZXAuU2hhcmVkT2JqZWN0LnRhcmdldCA9IG51bGw7XG5EZXAuU2hhcmVkT2JqZWN0LnRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICBEZXAuU2hhcmVkT2JqZWN0LnRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtcbiAgRGVwLlNoYXJlZE9iamVjdC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIERlcC5TaGFyZWRPYmplY3QudGFyZ2V0U3RhY2sucG9wKCk7XG4gIERlcC5TaGFyZWRPYmplY3QudGFyZ2V0ID0gRGVwLlNoYXJlZE9iamVjdC50YXJnZXRTdGFja1tEZXAuU2hhcmVkT2JqZWN0LnRhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgey8vIGZpeGVkIGJ5IHh4eHh4eCDlvq7kv6HlsI/nqIvluo/kvb/nlKggcGx1Z2lucyDkuYvlkI7vvIzmlbDnu4Tmlrnms5Xooqvnm7TmjqXmjILovb3liLDkuobmlbDnu4Tlr7nosaHkuIrvvIzpnIDopoHmiafooYwgY29weUF1Z21lbnQg6YC76L6RXG4gICAgICAgIGlmKHZhbHVlLnB1c2ggIT09IHZhbHVlLl9fcHJvdG9fXy5wdXNoKXtcbiAgICAgICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAuU2hhcmVkT2JqZWN0LnRhcmdldCkgeyAvLyBmaXhlZCBieSB4eHh4eHhcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuICAgICAgaWYgKGdldHRlciAmJiAhc2V0dGVyKSB7IHJldHVybiB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcblxuICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgID8gUmVmbGVjdC5vd25LZXlzKGZyb20pXG4gICAgOiBPYmplY3Qua2V5cyhmcm9tKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIC8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uXG4gICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG4gICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHRvVmFsICE9PSBmcm9tVmFsICYmXG4gICAgICBpc1BsYWluT2JqZWN0KHRvVmFsKSAmJlxuICAgICAgaXNQbGFpbk9iamVjdChmcm9tVmFsKVxuICAgICkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgdmFyIHJlcyA9IGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbDtcbiAgcmV0dXJuIHJlc1xuICAgID8gZGVkdXBlSG9va3MocmVzKVxuICAgIDogcmVzXG59XG5cbmZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xuICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkxJRkVDWUNMRV9IT09LUy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIGlmIChjaGlsZFZhbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgcmV0dXJuIGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzO1xufSk7XG5cbi8qKlxuICogV2F0Y2hlcnMuXG4gKlxuICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG4gKi9cbnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG4gIGlmIChwYXJlbnRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IHBhcmVudFZhbCA9IHVuZGVmaW5lZDsgfVxuICBpZiAoY2hpbGRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IGNoaWxkVmFsID0gdW5kZWZpbmVkOyB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKSB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkge1xuICAgIHZhciBwYXJlbnQgPSByZXRba2V5JDFdO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleSQxXTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5JDFdID0gcGFyZW50XG4gICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5pbmplY3QgPVxuc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgaWYgKGNoaWxkVmFsICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgaWYgKGNoaWxkVmFsKSB7IGV4dGVuZChyZXQsIGNoaWxkVmFsKTsgfVxuICByZXR1cm4gcmV0XG59O1xuc3RyYXRzLnByb3ZpZGUgPSBtZXJnZURhdGFPckZuO1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUgKG5hbWUpIHtcbiAgaWYgKCFuZXcgUmVnRXhwKChcIl5bYS16QS1aXVtcXFxcLVxcXFwuMC05X1wiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSokXCIpKS50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnc2hvdWxkIGNvbmZvcm0gdG8gdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZSBpbiBodG1sNSBzcGVjaWZpY2F0aW9uLidcbiAgICApO1xuICB9XG4gIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgY29uZmlnLmlzUmVzZXJ2ZWRUYWcobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAnaWQ6ICcgKyBuYW1lXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICogT2JqZWN0LWJhc2VkIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJwcm9wc1xcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShwcm9wcykpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdCAob3B0aW9ucywgdm0pIHtcbiAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICBpZiAoIWluamVjdCkgeyByZXR1cm4gfVxuICB2YXIgbm9ybWFsaXplZCA9IG9wdGlvbnMuaW5qZWN0ID0ge307XG4gIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluamVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0geyBmcm9tOiBpbmplY3RbaV0gfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGluamVjdCkge1xuICAgICAgdmFyIHZhbCA9IGluamVjdFtrZXldO1xuICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gZXh0ZW5kKHsgZnJvbToga2V5IH0sIHZhbClcbiAgICAgICAgOiB7IGZyb206IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJpbmplY3RcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUoaW5qZWN0KSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMgKG9wdGlvbnMpIHtcbiAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gIGlmIChkaXJzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHtcbiAgICAgIHZhciBkZWYkJDEgPSBkaXJzW2tleV07XG4gICAgICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkaXJzW2tleV0gPSB7IGJpbmQ6IGRlZiQkMSwgdXBkYXRlOiBkZWYkJDEgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZSAobmFtZSwgdmFsdWUsIHZtKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcIlwiICsgbmFtZSArIFwiXFxcIjogZXhwZWN0ZWQgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHZhbHVlKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cbiAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyAoXG4gIHBhcmVudCxcbiAgY2hpbGQsXG4gIHZtXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgfVxuXG4gIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcblxuICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXG4gIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLlxuICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXG4gIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICBpZiAoY2hpbGQuZXh0ZW5kcykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgIHdhcm4oXG4gICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSlcbiAgKSB7XG4gICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKCFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0O1xuICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzT2JqZWN0KGRlZikpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgKyBrZXkgKyAnXCI6ICcgK1xuICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHRoZSByYXcgcHJvcCB2YWx1ZSB3YXMgYWxzbyB1bmRlZmluZWQgZnJvbSBwcmV2aW91cyByZW5kZXIsXG4gIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICBpZiAodm0gJiYgdm0uJG9wdGlvbnMucHJvcHNEYXRhICYmXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJlxuICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgcmV0dXJuIHZtLl9wcm9wc1trZXldXG4gIH1cbiAgLy8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcbiAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dFxuICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcbiAgICA/IGRlZi5jYWxsKHZtKVxuICAgIDogZGVmXG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQcm9wIChcbiAgcHJvcCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHZtLFxuICBhYnNlbnRcbikge1xuICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcbiAgICB3YXJuKFxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTtcbiAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgaWYgKHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChhc3NlcnRlZFR5cGUuZXhwZWN0ZWRUeXBlIHx8ICcnKTtcbiAgICAgIHZhbGlkID0gYXNzZXJ0ZWRUeXBlLnZhbGlkO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdmFsaWRhdG9yID0gcHJvcC52YWxpZGF0b3I7XG4gIGlmICh2YWxpZGF0b3IpIHtcbiAgICBpZiAoIXZhbGlkYXRvcih2YWx1ZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciBzaW1wbGVDaGVja1JFID0gL14oU3RyaW5nfE51bWJlcnxCb29sZWFufEZ1bmN0aW9ufFN5bWJvbCkkLztcblxuZnVuY3Rpb24gYXNzZXJ0VHlwZSAodmFsdWUsIHR5cGUpIHtcbiAgdmFyIHZhbGlkO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7XG4gICAgdmFyIHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAvLyBmb3IgcHJpbWl0aXZlIHdyYXBwZXIgb2JqZWN0c1xuICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcbiAgICB2YWxpZCA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdmFsaWQ6IHZhbGlkLFxuICAgIGV4cGVjdGVkVHlwZTogZXhwZWN0ZWRUeXBlXG4gIH1cbn1cblxuLyoqXG4gKiBVc2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgYnVpbHQtaW4gdHlwZXMsXG4gKiBiZWNhdXNlIGEgc2ltcGxlIGVxdWFsaXR5IGNoZWNrIHdpbGwgZmFpbCB3aGVuIHJ1bm5pbmdcbiAqIGFjcm9zcyBkaWZmZXJlbnQgdm1zIC8gaWZyYW1lcy5cbiAqL1xuZnVuY3Rpb24gZ2V0VHlwZSAoZm4pIHtcbiAgdmFyIG1hdGNoID0gZm4gJiYgZm4udG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJ1xufVxuXG5mdW5jdGlvbiBpc1NhbWVUeXBlIChhLCBiKSB7XG4gIHJldHVybiBnZXRUeXBlKGEpID09PSBnZXRUeXBlKGIpXG59XG5cbmZ1bmN0aW9uIGdldFR5cGVJbmRleCAodHlwZSwgZXhwZWN0ZWRUeXBlcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcbiAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMVxuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBleHBlY3RlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlc1tpXSwgdHlwZSkpIHtcbiAgICAgIHJldHVybiBpXG4gICAgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG5mdW5jdGlvbiBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UgKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSB7XG4gIHZhciBtZXNzYWdlID0gXCJJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIgK1xuICAgIFwiIEV4cGVjdGVkIFwiICsgKGV4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oJywgJykpO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlc1swXTtcbiAgdmFyIHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XG4gIHZhciBleHBlY3RlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHJlY2VpdmVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWVcbiAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgICBpc0V4cGxpY2FibGUoZXhwZWN0ZWRUeXBlKSAmJlxuICAgICAgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwiIHdpdGggdmFsdWUgXCIgKyBleHBlY3RlZFZhbHVlO1xuICB9XG4gIG1lc3NhZ2UgKz0gXCIsIGdvdCBcIiArIHJlY2VpdmVkVHlwZSArIFwiIFwiO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgcmVjZWl2ZWQgdmFsdWVcbiAgaWYgKGlzRXhwbGljYWJsZShyZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIndpdGggdmFsdWUgXCIgKyByZWNlaXZlZFZhbHVlICsgXCIuXCI7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2Vcbn1cblxuZnVuY3Rpb24gc3R5bGVWYWx1ZSAodmFsdWUsIHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgcmV0dXJuIChcIlxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoTnVtYmVyKHZhbHVlKSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIlwiICsgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFeHBsaWNhYmxlICh2YWx1ZSkge1xuICB2YXIgZXhwbGljaXRUeXBlcyA9IFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJ107XG4gIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IGVsZW07IH0pXG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbiAoKSB7XG4gIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgcmV0dXJuIGFyZ3Muc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gZWxlbS50b0xvd2VyQ2FzZSgpID09PSAnYm9vbGVhbic7IH0pXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBoYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICAvLyBEZWFjdGl2YXRlIGRlcHMgdHJhY2tpbmcgd2hpbGUgcHJvY2Vzc2luZyBlcnJvciBoYW5kbGVyIHRvIGF2b2lkIHBvc3NpYmxlIGluZmluaXRlIHJlbmRlcmluZy5cbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVleC9pc3N1ZXMvMTUwNVxuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgaWYgKHZtKSB7XG4gICAgICB2YXIgY3VyID0gdm07XG4gICAgICB3aGlsZSAoKGN1ciA9IGN1ci4kcGFyZW50KSkge1xuICAgICAgICB2YXIgaG9va3MgPSBjdXIuJG9wdGlvbnMuZXJyb3JDYXB0dXJlZDtcbiAgICAgICAgaWYgKGhvb2tzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFyIGNhcHR1cmUgPSBob29rc1tpXS5jYWxsKGN1ciwgZXJyLCB2bSwgaW5mbykgPT09IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAoY2FwdHVyZSkgeyByZXR1cm4gfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBnbG9iYWxIYW5kbGVFcnJvcihlLCBjdXIsICdlcnJvckNhcHR1cmVkIGhvb2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZ2xvYmFsSGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcgKFxuICBoYW5kbGVyLFxuICBjb250ZXh0LFxuICBhcmdzLFxuICB2bSxcbiAgaW5mb1xuKSB7XG4gIHZhciByZXM7XG4gIHRyeSB7XG4gICAgcmVzID0gYXJncyA/IGhhbmRsZXIuYXBwbHkoY29udGV4dCwgYXJncykgOiBoYW5kbGVyLmNhbGwoY29udGV4dCk7XG4gICAgaWYgKHJlcyAmJiAhcmVzLl9pc1Z1ZSAmJiBpc1Byb21pc2UocmVzKSAmJiAhcmVzLl9oYW5kbGVkKSB7XG4gICAgICByZXMuY2F0Y2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvICsgXCIgKFByb21pc2UvYXN5bmMpXCIpOyB9KTtcbiAgICAgIC8vIGlzc3VlICM5NTExXG4gICAgICAvLyBhdm9pZCBjYXRjaCB0cmlnZ2VyaW5nIG11bHRpcGxlIHRpbWVzIHdoZW4gbmVzdGVkIGNhbGxzXG4gICAgICByZXMuX2hhbmRsZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBpZiB0aGUgdXNlciBpbnRlbnRpb25hbGx5IHRocm93cyB0aGUgb3JpZ2luYWwgZXJyb3IgaW4gdGhlIGhhbmRsZXIsXG4gICAgICAvLyBkbyBub3QgbG9nIGl0IHR3aWNlXG4gICAgICBpZiAoZSAhPT0gZXJyKSB7XG4gICAgICAgIGxvZ0Vycm9yKGUsIG51bGwsICdjb25maWcuZXJyb3JIYW5kbGVyJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxvZ0Vycm9yKGVyciwgdm0sIGluZm8pO1xufVxuXG5mdW5jdGlvbiBsb2dFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oKFwiRXJyb3IgaW4gXCIgKyBpbmZvICsgXCI6IFxcXCJcIiArIChlcnIudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiksIHZtKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoKGluQnJvd3NlciB8fCBpbldlZXgpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBlcnJcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGNhbGxiYWNrcyA9IFtdO1xudmFyIHBlbmRpbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MgKCkge1xuICBwZW5kaW5nID0gZmFsc2U7XG4gIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xuICAgIGNvcGllc1tpXSgpO1xuICB9XG59XG5cbi8vIEhlcmUgd2UgaGF2ZSBhc3luYyBkZWZlcnJpbmcgd3JhcHBlcnMgdXNpbmcgbWljcm90YXNrcy5cbi8vIEluIDIuNSB3ZSB1c2VkIChtYWNybykgdGFza3MgKGluIGNvbWJpbmF0aW9uIHdpdGggbWljcm90YXNrcykuXG4vLyBIb3dldmVyLCBpdCBoYXMgc3VidGxlIHByb2JsZW1zIHdoZW4gc3RhdGUgaXMgY2hhbmdlZCByaWdodCBiZWZvcmUgcmVwYWludFxuLy8gKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4vLyBBbHNvLCB1c2luZyAobWFjcm8pIHRhc2tzIGluIGV2ZW50IGhhbmRsZXIgd291bGQgY2F1c2Ugc29tZSB3ZWlyZCBiZWhhdmlvcnNcbi8vIHRoYXQgY2Fubm90IGJlIGNpcmN1bXZlbnRlZCAoZS5nLiAjNzEwOSwgIzcxNTMsICM3NTQ2LCAjNzgzNCwgIzgxMDkpLlxuLy8gU28gd2Ugbm93IHVzZSBtaWNyb3Rhc2tzIGV2ZXJ5d2hlcmUsIGFnYWluLlxuLy8gQSBtYWpvciBkcmF3YmFjayBvZiB0aGlzIHRyYWRlb2ZmIGlzIHRoYXQgdGhlcmUgYXJlIHNvbWUgc2NlbmFyaW9zXG4vLyB3aGVyZSBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHlcbi8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCwgd2hpY2ggaGF2ZSB3b3JrYXJvdW5kcylcbi8vIG9yIGV2ZW4gYmV0d2VlbiBidWJibGluZyBvZiB0aGUgc2FtZSBldmVudCAoIzY1NjYpLlxudmFyIHRpbWVyRnVuYztcblxuLy8gVGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbi8vIHZpYSBlaXRoZXIgbmF0aXZlIFByb21pc2UudGhlbiBvciBNdXRhdGlvbk9ic2VydmVyLlxuLy8gTXV0YXRpb25PYnNlcnZlciBoYXMgd2lkZXIgc3VwcG9ydCwgaG93ZXZlciBpdCBpcyBzZXJpb3VzbHkgYnVnZ2VkIGluXG4vLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuLy8gY29tcGxldGVseSBzdG9wcyB3b3JraW5nIGFmdGVyIHRyaWdnZXJpbmcgYSBmZXcgdGltZXMuLi4gc28sIGlmIG5hdGl2ZVxuLy8gUHJvbWlzZSBpcyBhdmFpbGFibGUsIHdlIHdpbGwgdXNlIGl0OlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqL1xuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcC50aGVuKGZsdXNoQ2FsbGJhY2tzKTtcbiAgICAvLyBJbiBwcm9ibGVtYXRpYyBVSVdlYlZpZXdzLCBQcm9taXNlLnRoZW4gZG9lc24ndCBjb21wbGV0ZWx5IGJyZWFrLCBidXRcbiAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYnV0IHRoZSBxdWV1ZSBpc24ndCBiZWluZyBmbHVzaGVkLCB1bnRpbCB0aGUgYnJvd3NlclxuICAgIC8vIG5lZWRzIHRvIGRvIHNvbWUgb3RoZXIgd29yaywgZS5nLiBoYW5kbGUgYSB0aW1lci4gVGhlcmVmb3JlIHdlIGNhblxuICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgIGlmIChpc0lPUykgeyBzZXRUaW1lb3V0KG5vb3ApOyB9XG4gIH07XG59IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIC8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAvLyAoIzY0NjYgTXV0YXRpb25PYnNlcnZlciBpcyB1bnJlbGlhYmxlIGluIElFMTEpXG4gIHZhciBjb3VudGVyID0gMTtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICtcbiAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxuICApO1xuXG4gIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICAncmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdGhhdCB0aGlzIHByb3BlcnR5IGlzIHJlYWN0aXZlLCAnICtcbiAgICAgICdlaXRoZXIgaW4gdGhlIGRhdGEgb3B0aW9uLCBvciBmb3IgY2xhc3MtYmFzZWQgY29tcG9uZW50cywgYnkgJyArXG4gICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZWFjdGl2aXR5Lmh0bWwjRGVjbGFyaW5nLVJlYWN0aXZlLVByb3BlcnRpZXMuJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIHdhcm5SZXNlcnZlZFByZWZpeCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBtdXN0IGJlIGFjY2Vzc2VkIHdpdGggXFxcIiRkYXRhLlwiICsga2V5ICsgXCJcXFwiIGJlY2F1c2UgXCIgK1xuICAgICAgJ3Byb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBcIiRcIiBvciBcIl9cIiBhcmUgbm90IHByb3hpZWQgaW4gdGhlIFZ1ZSBpbnN0YW5jZSB0byAnICtcbiAgICAgICdwcmV2ZW50IGNvbmZsaWN0cyB3aXRoIFZ1ZSBpbnRlcm5hbHMuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fFxuICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkge1xuICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG4gIHNlZW5PYmplY3RzLmNsZWFyKCk7XG59XG5cbmZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gIHZhciBpLCBrZXlzO1xuICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGZpeGVkIGJ5IHh4eHh4eCAobXAgcHJvcGVydGllcylcclxuZnVuY3Rpb24gZXh0cmFjdFByb3BlcnRpZXNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHJlcywgY29udGV4dCkge1xyXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5tcE9wdGlvbnMgJiYgQ3Rvci5vcHRpb25zLm1wT3B0aW9ucy5wcm9wZXJ0aWVzO1xyXG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xyXG4gICAgcmV0dXJuIHJlc1xyXG4gIH1cbiAgdmFyIGV4dGVybmFsQ2xhc3NlcyA9IEN0b3Iub3B0aW9ucy5tcE9wdGlvbnMuZXh0ZXJuYWxDbGFzc2VzIHx8IFtdO1xyXG4gIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XHJcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcclxuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xyXG4gICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICB2YXIgcmVzdWx0ID0gY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgICAgLy8gZXh0ZXJuYWxDbGFzc1xuICAgICAgaWYgKFxuICAgICAgICByZXN1bHQgJiZcbiAgICAgICAgcmVzW2tleV0gJiZcbiAgICAgICAgZXh0ZXJuYWxDbGFzc2VzLmluZGV4T2YoYWx0S2V5KSAhPT0gLTEgJiZcbiAgICAgICAgY29udGV4dFtjYW1lbGl6ZShyZXNba2V5XSldXG4gICAgICApIHtcbiAgICAgICAgLy8g6LWL5YC8IGV4dGVybmFsQ2xhc3Mg55yf5q2j55qE5YC8KOaooeadv+mHjCBleHRlcm5hbENsYXNzIOeahOWAvOWPr+iDveaYr+Wtl+espuS4silcbiAgICAgICAgcmVzW2tleV0gPSBjb250ZXh0W2NhbWVsaXplKHJlc1trZXldKV07XG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiByZXNcclxufVxuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnLFxuICBjb250ZXh0Ly8gZml4ZWQgYnkgeHh4eHh4XG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgIHJldHVybiBleHRyYWN0UHJvcGVydGllc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3Rvciwge30sIGNvbnRleHQpXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIC8vIGZpeGVkIGJ5IHh4eHh4eFxuICByZXR1cm4gZXh0cmFjdFByb3BlcnRpZXNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHJlcywgY29udGV4dClcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdEluZGV4LCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3QgKGluamVjdCwgdm0pIHtcbiAgaWYgKGluamVjdCkge1xuICAgIC8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG4gICAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdClcbiAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAvLyAjNjU3NCBpbiBjYXNlIHRoZSBpbmplY3Qgb2JqZWN0IGlzIG9ic2VydmVkLi4uXG4gICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XG4gICAgICB2YXIgc291cmNlID0gdm07XG4gICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIGhhc093bihzb3VyY2UuX3Byb3ZpZGVkLCBwcm92aWRlS2V5KSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBpbmplY3Rba2V5XSkge1xuICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB0eXBlb2YgcHJvdmlkZURlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSlcbiAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgdmFyIHNsb3RzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmaXhlZCBieSB4eHh4eHgg5Li05pe2IGhhY2sg5o6JIHVuaS1hcHAg5Lit55qE5byC5q2lIG5hbWUgc2xvdCBwYWdlXG4gICAgICBpZihjaGlsZC5hc3luY01ldGEgJiYgY2hpbGQuYXN5bmNNZXRhLmRhdGEgJiYgY2hpbGQuYXN5bmNNZXRhLmRhdGEuc2xvdCA9PT0gJ3BhZ2UnKXtcbiAgICAgICAgKHNsb3RzWydwYWdlJ10gfHwgKHNsb3RzWydwYWdlJ10gPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMgKFxuICBzbG90cyxcbiAgbm9ybWFsU2xvdHMsXG4gIHByZXZTbG90c1xuKSB7XG4gIHZhciByZXM7XG4gIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwO1xuICB2YXIgaXNTdGFibGUgPSBzbG90cyA/ICEhc2xvdHMuJHN0YWJsZSA6ICFoYXNOb3JtYWxTbG90cztcbiAgdmFyIGtleSA9IHNsb3RzICYmIHNsb3RzLiRrZXk7XG4gIGlmICghc2xvdHMpIHtcbiAgICByZXMgPSB7fTtcbiAgfSBlbHNlIGlmIChzbG90cy5fbm9ybWFsaXplZCkge1xuICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZFxuICB9IGVsc2UgaWYgKFxuICAgIGlzU3RhYmxlICYmXG4gICAgcHJldlNsb3RzICYmXG4gICAgcHJldlNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxuICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAhaGFzTm9ybWFsU2xvdHMgJiZcbiAgICAhcHJldlNsb3RzLiRoYXNOb3JtYWxcbiAgKSB7XG4gICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgIHJldHVybiBwcmV2U2xvdHNcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW2tleSQxXSAmJiBrZXkkMVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJlc1trZXkkMV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXkkMSwgc2xvdHNba2V5JDFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xuICBmb3IgKHZhciBrZXkkMiBpbiBub3JtYWxTbG90cykge1xuICAgIGlmICghKGtleSQyIGluIHJlcykpIHtcbiAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTtcbiAgICB9XG4gIH1cbiAgLy8gYXZvcmlheiBzZWVtcyB0byBtb2NrIGEgbm9uLWV4dGVuc2libGUgJHNjb3BlZFNsb3RzIG9iamVjdFxuICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3JcbiAgaWYgKHNsb3RzICYmIE9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKSB7XG4gICAgKHNsb3RzKS5fbm9ybWFsaXplZCA9IHJlcztcbiAgfVxuICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTtcbiAgZGVmKHJlcywgJyRrZXknLCBrZXkpO1xuICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTtcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIGZuKSB7XG4gIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTtcbiAgICByZXMgPSByZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVzKVxuICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGVcbiAgICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTtcbiAgICByZXR1cm4gcmVzICYmIChcbiAgICAgIHJlcy5sZW5ndGggPT09IDAgfHxcbiAgICAgIChyZXMubGVuZ3RoID09PSAxICYmIHJlc1swXS5pc0NvbW1lbnQpIC8vICM5NjU4XG4gICAgKSA/IHVuZGVmaW5lZFxuICAgICAgOiByZXNcbiAgfTtcbiAgLy8gdGhpcyBpcyBhIHNsb3QgdXNpbmcgdGhlIG5ldyB2LXNsb3Qgc3ludGF4IHdpdGhvdXQgc2NvcGUuIGFsdGhvdWdoIGl0IGlzXG4gIC8vIGNvbXBpbGVkIGFzIGEgc2NvcGVkIHNsb3QsIHJlbmRlciBmbiB1c2VycyB3b3VsZCBleHBlY3QgaXQgdG8gYmUgcHJlc2VudFxuICAvLyBvbiB0aGlzLiRzbG90cyBiZWNhdXNlIHRoZSB1c2FnZSBpcyBzZW1hbnRpY2FsbHkgYSBub3JtYWwgc2xvdC5cbiAgaWYgKGZuLnByb3h5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vcm1hbFNsb3RzLCBrZXksIHtcbiAgICAgIGdldDogbm9ybWFsaXplZCxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZFxufVxuXG5mdW5jdGlvbiBwcm94eU5vcm1hbFNsb3Qoc2xvdHMsIGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2xvdHNba2V5XTsgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGksIGksIGkpOyAvLyBmaXhlZCBieSB4eHh4eHhcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSwgaSwgaSk7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCwgaSsrLCBpKSk7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSwgaSk7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzRGVmKHJldCkpIHtcbiAgICByZXQgPSBbXTtcbiAgfVxuICAocmV0KS5faXNWTGlzdCA9IHRydWU7XG4gIHJldHVybiByZXRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU2xvdCAoXG4gIG5hbWUsXG4gIGZhbGxiYWNrLFxuICBwcm9wcyxcbiAgYmluZE9iamVjdFxuKSB7XG4gIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgdmFyIG5vZGVzO1xuICBpZiAoc2NvcGVkU2xvdEZuKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoYmluZE9iamVjdCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzT2JqZWN0KGJpbmRPYmplY3QpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ3Nsb3Qgdi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QnLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHByb3BzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmluZE9iamVjdCksIHByb3BzKTtcbiAgICB9XG4gICAgLy8gZml4ZWQgYnkgeHh4eHh4IGFwcC1wbHVzIHNjb3BlZFNsb3RcbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcywgdGhpcywgcHJvcHMuX2kpIHx8IGZhbGxiYWNrO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV0gfHwgZmFsbGJhY2s7XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gcHJvcHMgJiYgcHJvcHMuc2xvdDtcbiAgaWYgKHRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScsIHsgc2xvdDogdGFyZ2V0IH0sIG5vZGVzKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2Rlc1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgZmlsdGVyc1xuICovXG5mdW5jdGlvbiByZXNvbHZlRmlsdGVyIChpZCkge1xuICByZXR1cm4gcmVzb2x2ZUFzc2V0KHRoaXMuJG9wdGlvbnMsICdmaWx0ZXJzJywgaWQsIHRydWUpIHx8IGlkZW50aXR5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0tleU5vdE1hdGNoIChleHBlY3QsIGFjdHVhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3QpKSB7XG4gICAgcmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCkgPT09IC0xXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsXG4gIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gKiBleHBvc2VkIGFzIFZ1ZS5wcm90b3R5cGUuX2tcbiAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5mdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgZXZlbnRLZXlDb2RlLFxuICBrZXksXG4gIGJ1aWx0SW5LZXlDb2RlLFxuICBldmVudEtleU5hbWUsXG4gIGJ1aWx0SW5LZXlOYW1lXG4pIHtcbiAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTtcbiAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChidWlsdEluS2V5TmFtZSwgZXZlbnRLZXlOYW1lKVxuICB9IGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChtYXBwZWRLZXlDb2RlLCBldmVudEtleUNvZGUpXG4gIH0gZWxzZSBpZiAoZXZlbnRLZXlOYW1lKSB7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9XCJvYmplY3RcIiBpbnRvIGEgVk5vZGUncyBkYXRhLlxuICovXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICBkYXRhLFxuICB0YWcsXG4gIHZhbHVlLFxuICBhc1Byb3AsXG4gIGlzU3luY1xuKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgb25ba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBvdXJzKSA6IG91cnM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlcyxcbiAgLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG4gIGhhc0R5bmFtaWNLZXlzLFxuICBjb250ZW50SGFzaEtleVxuKSB7XG4gIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzbG90ID0gZm5zW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsb3QpKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICAvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICAgIGlmIChzbG90LnByb3h5KSB7XG4gICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzW3Nsb3Qua2V5XSA9IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIGlmIChjb250ZW50SGFzaEtleSkge1xuICAgIChyZXMpLiRrZXkgPSBjb250ZW50SGFzaEtleTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMgKGJhc2VPYmosIHZhbHVlcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xuICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgaXMgYSBzcGVjaWFsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgd2FybihcbiAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgfVxuICB9KSk7XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsgfVxuICB9XG5cbiAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgZGF0YSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0Vm0sXG4gICAgQ3RvclxuICApO1xuXG4gIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XG5cbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7XG4gIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbiAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9ucztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAoY2xvbmUuZGV2dG9vbHNNZXRhID0gY2xvbmUuZGV2dG9vbHNNZXRhIHx8IHt9KS5yZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcbiAgfVxuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBhdGNoOiBmdW5jdGlvbiBwcmVwYXRjaCAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgdXBkYXRlQ2hpbGRDb21wb25lbnQoXG4gICAgICBjaGlsZCxcbiAgICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkge1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdvblNlcnZpY2VDcmVhdGVkJyk7XG4gICAgICBjYWxsSG9vayhjb21wb25lbnRJbnN0YW5jZSwgJ29uU2VydmljZUF0dGFjaGVkJyk7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZywgY29udGV4dCk7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIHZub2RlLCAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgcGFyZW50IC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XG4gICAgdGFnID0gZGF0YS5pcztcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEubmF0aXZlT24pKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiVGhlIC5uYXRpdmUgbW9kaWZpZXIgZm9yIHYtb24gaXMgb25seSB2YWxpZCBvbiBjb21wb25lbnRzIGJ1dCBpdCB3YXMgdXNlZCBvbiA8XCIgKyB0YWcgKyBcIj4uXCIpLFxuICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICBjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSwgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoKCFkYXRhIHx8ICFkYXRhLnByZSkgJiYgaXNEZWYoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSB7XG4gICAgICAvLyBjb21wb25lbnRcbiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbiAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4gICAgICAvLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIHRhZywgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2UgaWYgKGlzRGVmKHZub2RlKSkge1xuICAgIGlmIChpc0RlZihucykpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7IHJlZ2lzdGVyRGVlcEJpbmRpbmdzKGRhdGEpOyB9XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucywgZm9yY2UpIHtcbiAgdm5vZGUubnMgPSBucztcbiAgaWYgKHZub2RlLnRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gdXNlIGRlZmF1bHQgbmFtZXNwYWNlIGluc2lkZSBmb3JlaWduT2JqZWN0XG4gICAgbnMgPSB1bmRlZmluZWQ7XG4gICAgZm9yY2UgPSB0cnVlO1xuICB9XG4gIGlmIChpc0RlZih2bm9kZS5jaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoY2hpbGQudGFnKSAmJiAoXG4gICAgICAgIGlzVW5kZWYoY2hpbGQubnMpIHx8IChpc1RydWUoZm9yY2UpICYmIGNoaWxkLnRhZyAhPT0gJ3N2ZycpKSkge1xuICAgICAgICBhcHBseU5TKGNoaWxkLCBucywgZm9yY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyByZWYgIzUzMThcbi8vIG5lY2Vzc2FyeSB0byBlbnN1cmUgcGFyZW50IHJlLXJlbmRlciB3aGVuIGRlZXAgYmluZGluZ3MgbGlrZSA6c3R5bGUgYW5kXG4vLyA6Y2xhc3MgYXJlIHVzZWQgb24gc2xvdCBub2Rlc1xuZnVuY3Rpb24gcmVnaXN0ZXJEZWVwQmluZGluZ3MgKGRhdGEpIHtcbiAgaWYgKGlzT2JqZWN0KGRhdGEuc3R5bGUpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5zdHlsZSk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KGRhdGEuY2xhc3MpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5jbGFzcyk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG4gIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXG4gIHZtLl9zdGF0aWNUcmVlcyA9IG51bGw7IC8vIHYtb25jZSBjYWNoZWQgdHJlZXNcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgdmFyIHBhcmVudFZub2RlID0gdm0uJHZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7IC8vIHRoZSBwbGFjZWhvbGRlciBub2RlIGluIHBhcmVudCB0cmVlXG4gIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcbiAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgdm0uJHNjb3BlZFNsb3RzID0gZW1wdHlPYmplY3Q7XG4gIC8vIGJpbmQgdGhlIGNyZWF0ZUVsZW1lbnQgZm4gdG8gdGhpcyBpbnN0YW5jZVxuICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplXG4gIC8vIGludGVybmFsIHZlcnNpb24gaXMgdXNlZCBieSByZW5kZXIgZnVuY3Rpb25zIGNvbXBpbGVkIGZyb20gdGVtcGxhdGVzXG4gIHZtLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcbiAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4gIC8vIHVzZXItd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLlxuICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcblxuICAvLyAkYXR0cnMgJiAkbGlzdGVuZXJzIGFyZSBleHBvc2VkIGZvciBlYXNpZXIgSE9DIGNyZWF0aW9uLlxuICAvLyB0aGV5IG5lZWQgdG8gYmUgcmVhY3RpdmUgc28gdGhhdCBIT0NzIHVzaW5nIHRoZW0gYXJlIGFsd2F5cyB1cGRhdGVkXG4gIHZhciBwYXJlbnREYXRhID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuZGF0YTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgfVxufVxuXG52YXIgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHZtLiRzbG90cyxcbiAgICAgICAgdm0uJHNjb3BlZFNsb3RzXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cbiAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgLy8gcmVuZGVyIHNlbGZcbiAgICB2YXIgdm5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBtYWludGFpbiBhIHN0YWNrIGJlY2F1c2UgYWxsIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gc2VwYXJhdGVseSBmcm9tIG9uZSBhbm90aGVyLiBOZXN0ZWQgY29tcG9uZW50J3MgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC5cbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IHZtO1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJFcnJvclwiKTtcbiAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICAgIC8vIGlmIHRoZSByZXR1cm5lZCBhcnJheSBjb250YWlucyBvbmx5IGEgc2luZ2xlIG5vZGUsIGFsbG93IGl0XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpICYmIHZub2RlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdm5vZGUgPSB2bm9kZVswXTtcbiAgICB9XG4gICAgLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dFxuICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50XG4gICAgdm5vZGUucGFyZW50ID0gX3BhcmVudFZub2RlO1xuICAgIHJldHVybiB2bm9kZVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvclxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgdmFyIG93bmVyID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICBpZiAob3duZXIgJiYgaXNEZWYoZmFjdG9yeS5vd25lcnMpICYmIGZhY3Rvcnkub3duZXJzLmluZGV4T2Yob3duZXIpID09PSAtMSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3Rvcnkub3duZXJzLnB1c2gob3duZXIpO1xuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChvd25lciAmJiAhaXNEZWYoZmFjdG9yeS5vd25lcnMpKSB7XG4gICAgdmFyIG93bmVycyA9IGZhY3Rvcnkub3duZXJzID0gW293bmVyXTtcbiAgICB2YXIgc3luYyA9IHRydWU7XG4gICAgdmFyIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgdmFyIHRpbWVyVGltZW91dCA9IG51bGxcblxuICAgIDsob3duZXIpLiRvbignaG9vazpkZXN0cm95ZWQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUob3duZXJzLCBvd25lcik7IH0pO1xuXG4gICAgdmFyIGZvcmNlUmVuZGVyID0gZnVuY3Rpb24gKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvd25lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIChvd25lcnNbaV0pLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgICBpZiAodGltZXJMb2FkaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyTG9hZGluZyk7XG4gICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJUaW1lb3V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyVGltZW91dCk7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShyZXMuY29tcG9uZW50KSkge1xuICAgICAgICByZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgICAgICBpZiAoaXNEZWYocmVzLmVycm9yKSkge1xuICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHtcbiAgICAgICAgICBmYWN0b3J5LmxvYWRpbmdDb21wID0gZW5zdXJlQ3RvcihyZXMubG9hZGluZywgYmFzZUN0b3IpO1xuICAgICAgICAgIGlmIChyZXMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSAmJiBpc1VuZGVmKGZhY3RvcnkuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMudGltZW91dCkpIHtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgICAgICAgICAgICAgICAgPyAoXCJ0aW1lb3V0IChcIiArIChyZXMudGltZW91dCkgKyBcIm1zKVwiKVxuICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmVzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nXG4gICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgICAgIDogZmFjdG9yeS5yZXNvbHZlZFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMSAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyIChldmVudCwgZm4pIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7XG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyLCB2bSk7XG4gIHRhcmdldCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2bS4kb24oZXZlbnRbaV0sIGZuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7XG4gICAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7XG4gICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkkMSA8IGw7IGkkMSsrKSB7XG4gICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmICghY2JzKSB7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKCFmbikge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7XG4gICAgICAgIHRpcChcbiAgICAgICAgICBcIkV2ZW50IFxcXCJcIiArIGxvd2VyQ2FzZUV2ZW50ICsgXCJcXFwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIgYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBcIiArXG4gICAgICAgICAgXCJ2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gXCIgK1xuICAgICAgICAgIFwiWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgKGh5cGhlbmF0ZShldmVudCkpICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmIChjYnMpIHtcbiAgICAgIGNicyA9IGNicy5sZW5ndGggPiAxID8gdG9BcnJheShjYnMpIDogY2JzO1xuICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgICB2YXIgaW5mbyA9IFwiZXZlbnQgaGFuZGxlciBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCJcIjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjYnNbaV0sIHZtLCBhcmdzLCB2bSwgaW5mbyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDtcbnZhciBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcblxuZnVuY3Rpb24gc2V0QWN0aXZlSW5zdGFuY2Uodm0pIHtcbiAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGFjdGl2ZUluc3RhbmNlID0gcHJldkFjdGl2ZUluc3RhbmNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciBwcmV2RWwgPSB2bS4kZWw7XG4gICAgdmFyIHByZXZWbm9kZSA9IHZtLl92bm9kZTtcbiAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2Uodm0pO1xuICAgIHZtLl92bm9kZSA9IHZub2RlO1xuICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50c1xuICAgIC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuICAgIGlmICghcHJldlZub2RlKSB7XG4gICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZXNcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhwcmV2Vm5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgLy8gdXBkYXRlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuICAgIH1cbiAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG4gICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcbiAgICAgIHZtLiRwYXJlbnQuJGVsID0gdm0uJGVsO1xuICAgIH1cbiAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG4gICAgLy8gdXBkYXRlZCBpbiBhIHBhcmVudCdzIHVwZGF0ZWQgaG9vay5cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcbiAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbiAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZW1vdmUocGFyZW50LiRjaGlsZHJlbiwgdm0pO1xuICAgIH1cbiAgICAvLyB0ZWFyZG93biB3YXRjaGVyc1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gICAgdmFyIGkgPSB2bS5fd2F0Y2hlcnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO1xuICAgIH1cbiAgICAvLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuICAgIC8vIGZyb3plbiBvYmplY3QgbWF5IG5vdCBoYXZlIG9ic2VydmVyLlxuICAgIGlmICh2bS5fZGF0YS5fX29iX18pIHtcbiAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07XG4gICAgfVxuICAgIC8vIGNhbGwgdGhlIGxhc3QgaG9vay4uLlxuICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG4gICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7XG4gICAgLy8gZmlyZSBkZXN0cm95ZWQgaG9va1xuICAgIGNhbGxIb29rKHZtLCAnZGVzdHJveWVkJyk7XG4gICAgLy8gdHVybiBvZmYgYWxsIGluc3RhbmNlIGxpc3RlbmVycy5cbiAgICB2bS4kb2ZmKCk7XG4gICAgLy8gcmVtb3ZlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICAvLyByZWxlYXNlIGNpcmN1bGFyIHJlZmVyZW5jZSAoIzY3NTkpXG4gICAgaWYgKHZtLiR2bm9kZSkge1xuICAgICAgdm0uJHZub2RlLnBhcmVudCA9IG51bGw7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cbiAgXG4gIC8vIGZpeGVkIGJ5IHh4eHh4eCB1cGRhdGUgcHJvcGVydGllcyhtcCBydW50aW1lKVxuICB2bS5fJHVwZGF0ZVByb3BlcnRpZXMgJiYgdm0uXyR1cGRhdGVQcm9wZXJ0aWVzKHZtKTtcbiAgXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG4gIHBvcFRhcmdldCgpO1xufVxuXG4vKiAgKi9cblxudmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGFjdGl2YXRlZENoaWxkcmVuID0gW107XG52YXIgaGFzID0ge307XG52YXIgY2lyY3VsYXIgPSB7fTtcbnZhciB3YWl0aW5nID0gZmFsc2U7XG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbnZhciBpbmRleCA9IDA7XG5cbi8qKlxuICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICovXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlICgpIHtcbiAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICBoYXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlXG4vLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbi8vIGlmIHRoZSBwYWdlIGhhcyB0aG91c2FuZHMgb2YgZXZlbnQgbGlzdGVuZXJzLiBJbnN0ZWFkLCB3ZSB0YWtlIGEgdGltZXN0YW1wXG4vLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnNcbi8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxudmFyIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXG52YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXG4vLyB0aW1lc3RhbXAgY2FuIGVpdGhlciBiZSBoaS1yZXMgKHJlbGF0aXZlIHRvIHBhZ2UgbG9hZCkgb3IgbG93LXJlc1xuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXG4vLyBBbGwgSUUgdmVyc2lvbnMgdXNlIGxvdy1yZXMgZXZlbnQgdGltZXN0YW1wcywgYW5kIGhhdmUgcHJvYmxlbWF0aWMgY2xvY2tcbi8vIGltcGxlbWVudGF0aW9ucyAoIzk2MzIpXG5pZiAoaW5Ccm93c2VyICYmICFpc0lFKSB7XG4gIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgaWYgKFxuICAgIHBlcmZvcm1hbmNlICYmXG4gICAgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wXG4gICkge1xuICAgIC8vIGlmIHRoZSBldmVudCB0aW1lc3RhbXAsIGFsdGhvdWdoIGV2YWx1YXRlZCBBRlRFUiB0aGUgRGF0ZS5ub3coKSwgaXNcbiAgICAvLyBzbWFsbGVyIHRoYW4gaXQsIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXIgdGltZXN0YW1wcyBhc1xuICAgIC8vIHdlbGwuXG4gICAgZ2V0Tm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH07XG4gIH1cbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlmICh3YXRjaGVyLmJlZm9yZSkge1xuICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICB9XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUXVldWUgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCB0aGF0IHdhcyBhY3RpdmF0ZWQgZHVyaW5nIHBhdGNoLlxuICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCAodm0pIHtcbiAgLy8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxuICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgYWN0aXZhdGVkQ2hpbGRyZW4ucHVzaCh2bSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxBY3RpdmF0ZWRIb29rcyAocXVldWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlW2ldLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChxdWV1ZVtpXSwgdHJ1ZSAvKiB0cnVlICovKTtcbiAgfVxufVxuXG4vKipcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAqIHB1c2hlZCB3aGVuIHRoZSBxdWV1ZSBpcyBiZWluZyBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgaWYgKGhhc1tpZF0gPT0gbnVsbCkge1xuICAgIGhhc1tpZF0gPSB0cnVlO1xuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcbiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+IGluZGV4ICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSArIDEsIDAsIHdhdGNoZXIpO1xuICAgIH1cbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICBpZiAoIXdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBub29wO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZih2bS5tcEhvc3QgPT09ICdtcC1iYWlkdScpey8v55m+5bqmIG9ic2VydmVyIOWcqCBzZXREYXRhIGNhbGxiYWNrIOS5i+WQjuinpuWPke+8jOebtOaOpeW/veeVpeivpSB3YXJuXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2ZpeGVkIGJ5IHh4eHh4eCBfX25leHRfdGlja19wZW5kaW5nLHVuaTovL2Zvcm0tZmllbGQg5pe25LiN5ZGK6K2mXG4gICAgICAgICAgICBpZihcbiAgICAgICAgICAgICAgICBrZXkgPT09ICd2YWx1ZScgJiYgXG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh2bS4kb3B0aW9ucy5iZWhhdmlvcnMpICYmXG4gICAgICAgICAgICAgICAgdm0uJG9wdGlvbnMuYmVoYXZpb3JzLmluZGV4T2YoJ3VuaTovL2Zvcm0tZmllbGQnKSAhPT0gLTFcbiAgICAgICAgICAgICAgKXtcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih2bS5fZ2V0Rm9ybURhdGEpe1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciAkcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIHdoaWxlKCRwYXJlbnQpe1xuICAgICAgICAgICAgICBpZigkcGFyZW50Ll9fbmV4dF90aWNrX3BlbmRpbmcpe1xuICAgICAgICAgICAgICAgIHJldHVybiAgXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgJHBhcmVudCA9ICRwYXJlbnQuJHBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAuU2hhcmVkT2JqZWN0LnRhcmdldCkgey8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgdm0sIChcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBpbml0UmVuZGVyKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgICF2bS5fJGZhbGxiYWNrICYmIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzICBcbiAgICBpbml0U3RhdGUodm0pO1xuICAgICF2bS5fJGZhbGxiYWNrICYmIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICAhdm0uXyRmYWxsYmFjayAmJiBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTsgICAgICBcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjExJztcblxuLyoqXG4gKiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vVGVuY2VudC93ZXN0b3JlL21hc3Rlci9wYWNrYWdlcy93ZXN0b3JlL3V0aWxzL2RpZmYuanNcbiAqL1xudmFyIEFSUkFZVFlQRSA9ICdbb2JqZWN0IEFycmF5XSc7XG52YXIgT0JKRUNUVFlQRSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuLy8gY29uc3QgRlVOQ1RJT05UWVBFID0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuXG5mdW5jdGlvbiBkaWZmKGN1cnJlbnQsIHByZSkge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBzeW5jS2V5cyhjdXJyZW50LCBwcmUpO1xuICAgIF9kaWZmKGN1cnJlbnQsIHByZSwgJycsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBzeW5jS2V5cyhjdXJyZW50LCBwcmUpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gcHJlKSB7IHJldHVybiB9XG4gICAgdmFyIHJvb3RDdXJyZW50VHlwZSA9IHR5cGUoY3VycmVudCk7XG4gICAgdmFyIHJvb3RQcmVUeXBlID0gdHlwZShwcmUpO1xuICAgIGlmIChyb290Q3VycmVudFR5cGUgPT0gT0JKRUNUVFlQRSAmJiByb290UHJlVHlwZSA9PSBPQkpFQ1RUWVBFKSB7XG4gICAgICAgIGlmKE9iamVjdC5rZXlzKGN1cnJlbnQpLmxlbmd0aCA+PSBPYmplY3Qua2V5cyhwcmUpLmxlbmd0aCl7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IGN1cnJlbnRba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFtrZXldID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzeW5jS2V5cyhjdXJyZW50VmFsdWUsIHByZVtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJvb3RDdXJyZW50VHlwZSA9PSBBUlJBWVRZUEUgJiYgcm9vdFByZVR5cGUgPT0gQVJSQVlUWVBFKSB7XG4gICAgICAgIGlmIChjdXJyZW50Lmxlbmd0aCA+PSBwcmUubGVuZ3RoKSB7XG4gICAgICAgICAgICBwcmUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBzeW5jS2V5cyhjdXJyZW50W2luZGV4XSwgaXRlbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gX2RpZmYoY3VycmVudCwgcHJlLCBwYXRoLCByZXN1bHQpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gcHJlKSB7IHJldHVybiB9XG4gICAgdmFyIHJvb3RDdXJyZW50VHlwZSA9IHR5cGUoY3VycmVudCk7XG4gICAgdmFyIHJvb3RQcmVUeXBlID0gdHlwZShwcmUpO1xuICAgIGlmIChyb290Q3VycmVudFR5cGUgPT0gT0JKRUNUVFlQRSkge1xuICAgICAgICBpZiAocm9vdFByZVR5cGUgIT0gT0JKRUNUVFlQRSB8fCBPYmplY3Qua2V5cyhjdXJyZW50KS5sZW5ndGggPCBPYmplY3Qua2V5cyhwcmUpLmxlbmd0aCkge1xuICAgICAgICAgICAgc2V0UmVzdWx0KHJlc3VsdCwgcGF0aCwgY3VycmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBjdXJyZW50W2tleV07XG4gICAgICAgICAgICAgICAgdmFyIHByZVZhbHVlID0gcHJlW2tleV07XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRUeXBlID0gdHlwZShjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgIHZhciBwcmVUeXBlID0gdHlwZShwcmVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUeXBlICE9IEFSUkFZVFlQRSAmJiBjdXJyZW50VHlwZSAhPSBPQkpFQ1RUWVBFKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgIT0gcHJlW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChyZXN1bHQsIChwYXRoID09ICcnID8gJycgOiBwYXRoICsgXCIuXCIpICsga2V5LCBjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50VHlwZSA9PSBBUlJBWVRZUEUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZVR5cGUgIT0gQVJSQVlUWVBFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQocmVzdWx0LCAocGF0aCA9PSAnJyA/ICcnIDogcGF0aCArIFwiLlwiKSArIGtleSwgY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUubGVuZ3RoIDwgcHJlVmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KHJlc3VsdCwgKHBhdGggPT0gJycgPyAnJyA6IHBhdGggKyBcIi5cIikgKyBrZXksIGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGlmZihpdGVtLCBwcmVWYWx1ZVtpbmRleF0sIChwYXRoID09ICcnID8gJycgOiBwYXRoICsgXCIuXCIpICsga2V5ICsgJ1snICsgaW5kZXggKyAnXScsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRUeXBlID09IE9CSkVDVFRZUEUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZVR5cGUgIT0gT0JKRUNUVFlQRSB8fCBPYmplY3Qua2V5cyhjdXJyZW50VmFsdWUpLmxlbmd0aCA8IE9iamVjdC5rZXlzKHByZVZhbHVlKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChyZXN1bHQsIChwYXRoID09ICcnID8gJycgOiBwYXRoICsgXCIuXCIpICsga2V5LCBjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc3ViS2V5IGluIGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kaWZmKGN1cnJlbnRWYWx1ZVtzdWJLZXldLCBwcmVWYWx1ZVtzdWJLZXldLCAocGF0aCA9PSAnJyA/ICcnIDogcGF0aCArIFwiLlwiKSArIGtleSArICcuJyArIHN1YktleSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjdXJyZW50KSBsb29wKCBrZXkgKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAocm9vdEN1cnJlbnRUeXBlID09IEFSUkFZVFlQRSkge1xuICAgICAgICBpZiAocm9vdFByZVR5cGUgIT0gQVJSQVlUWVBFKSB7XG4gICAgICAgICAgICBzZXRSZXN1bHQocmVzdWx0LCBwYXRoLCBjdXJyZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50Lmxlbmd0aCA8IHByZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzZXRSZXN1bHQocmVzdWx0LCBwYXRoLCBjdXJyZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBfZGlmZihpdGVtLCBwcmVbaW5kZXhdLCBwYXRoICsgJ1snICsgaW5kZXggKyAnXScsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXRSZXN1bHQocmVzdWx0LCBwYXRoLCBjdXJyZW50KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFJlc3VsdChyZXN1bHQsIGssIHYpIHtcbiAgICAvLyBpZiAodHlwZSh2KSAhPSBGVU5DVElPTlRZUEUpIHtcbiAgICAgICAgcmVzdWx0W2tdID0gdjtcbiAgICAvLyB9XG59XG5cbmZ1bmN0aW9uIHR5cGUob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopXG59XG5cbi8qICAqL1xyXG5cclxuZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MkMSh2bSkge1xyXG4gICAgaWYgKHZtLl9fbmV4dF90aWNrX2NhbGxiYWNrcyAmJiB2bS5fX25leHRfdGlja19jYWxsYmFja3MubGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52LlZVRV9BUFBfREVCVUcpIHtcclxuICAgICAgICAgICAgdmFyIG1wSW5zdGFuY2UgPSB2bS4kc2NvcGU7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbJyArICgrbmV3IERhdGUpICsgJ11bJyArIChtcEluc3RhbmNlLmlzIHx8IG1wSW5zdGFuY2Uucm91dGUpICsgJ11bJyArIHZtLl91aWQgK1xyXG4gICAgICAgICAgICAgICAgJ106Zmx1c2hDYWxsYmFja3NbJyArIHZtLl9fbmV4dF90aWNrX2NhbGxiYWNrcy5sZW5ndGggKyAnXScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29waWVzID0gdm0uX19uZXh0X3RpY2tfY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgICAgIHZtLl9fbmV4dF90aWNrX2NhbGxiYWNrcy5sZW5ndGggPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvcGllc1tpXSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFzUmVuZGVyV2F0Y2hlcih2bSkge1xyXG4gICAgcmV0dXJuIHF1ZXVlLmZpbmQoZnVuY3Rpb24gKHdhdGNoZXIpIHsgcmV0dXJuIHZtLl93YXRjaGVyID09PSB3YXRjaGVyOyB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBuZXh0VGljayQxKHZtLCBjYikge1xyXG4gICAgLy8xLm5leHRUaWNrIOS5i+WJjSDlt7Igc2V0RGF0YSDkuJQgc2V0RGF0YSDov5jmnKrlm57osIPlrozmiJBcclxuICAgIC8vMi5uZXh0VGljayDkuYvliY3lrZjlnKggcmVuZGVyIHdhdGNoZXJcclxuICAgIGlmICghdm0uX19uZXh0X3RpY2tfcGVuZGluZyAmJiAhaGFzUmVuZGVyV2F0Y2hlcih2bSkpIHtcbiAgICAgICAgaWYocHJvY2Vzcy5lbnYuVlVFX0FQUF9ERUJVRyl7XG4gICAgICAgICAgICB2YXIgbXBJbnN0YW5jZSA9IHZtLiRzY29wZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbJyArICgrbmV3IERhdGUpICsgJ11bJyArIChtcEluc3RhbmNlLmlzIHx8IG1wSW5zdGFuY2Uucm91dGUpICsgJ11bJyArIHZtLl91aWQgK1xuICAgICAgICAgICAgICAgICddOm5leHRWdWVUaWNrJyk7XG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV4dFRpY2soY2IsIHZtKVxyXG4gICAgfWVsc2V7XG4gICAgICAgIGlmKHByb2Nlc3MuZW52LlZVRV9BUFBfREVCVUcpe1xuICAgICAgICAgICAgdmFyIG1wSW5zdGFuY2UkMSA9IHZtLiRzY29wZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbJyArICgrbmV3IERhdGUpICsgJ11bJyArIChtcEluc3RhbmNlJDEuaXMgfHwgbXBJbnN0YW5jZSQxLnJvdXRlKSArICddWycgKyB2bS5fdWlkICtcbiAgICAgICAgICAgICAgICAnXTpuZXh0TVBUaWNrJyk7XG4gICAgICAgIH1cbiAgICB9XHJcbiAgICB2YXIgX3Jlc29sdmU7XHJcbiAgICBpZiAoIXZtLl9fbmV4dF90aWNrX2NhbGxiYWNrcykge1xyXG4gICAgICAgIHZtLl9fbmV4dF90aWNrX2NhbGxiYWNrcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgdm0uX19uZXh0X3RpY2tfY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChjYikge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY2IuY2FsbCh2bSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAnbmV4dFRpY2snKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcclxuICAgICAgICAgICAgX3Jlc29sdmUodm0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXHJcbiAgICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxuXG4vKiAgKi9cclxuXHJcbmZ1bmN0aW9uIGNsb25lV2l0aERhdGEodm0pIHtcclxuICAvLyDnoa7kv53lvZPliY0gdm0g5omA5pyJ5pWw5o2u6KKr5ZCM5q2lXHJcbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgdmFyIGRhdGFLZXlzID0gW10uY29uY2F0KFxyXG4gICAgT2JqZWN0LmtleXModm0uX2RhdGEgfHwge30pLFxyXG4gICAgT2JqZWN0LmtleXModm0uX2NvbXB1dGVkV2F0Y2hlcnMgfHwge30pKTtcclxuXHJcbiAgZGF0YUtleXMucmVkdWNlKGZ1bmN0aW9uKHJldCwga2V5KSB7XHJcbiAgICByZXRba2V5XSA9IHZtW2tleV07XHJcbiAgICByZXR1cm4gcmV0XHJcbiAgfSwgcmV0KTtcclxuICAvL1RPRE8g6ZyA6KaB5oqK5peg55So5pWw5o2u5aSE55CG5o6J77yM5q+U5aaCIGxpc3Q9PmwwIOWImSBsaXN0IOmcgOimgeenu+mZpO+8jOWQpuWImeWkmuS8oOi+k+S4gOS7veaVsOaNrlxyXG4gIE9iamVjdC5hc3NpZ24ocmV0LCB2bS4kbXAuZGF0YSB8fCB7fSk7XHJcbiAgaWYgKFxyXG4gICAgQXJyYXkuaXNBcnJheSh2bS4kb3B0aW9ucy5iZWhhdmlvcnMpICYmXHJcbiAgICB2bS4kb3B0aW9ucy5iZWhhdmlvcnMuaW5kZXhPZigndW5pOi8vZm9ybS1maWVsZCcpICE9PSAtMVxyXG4gICkgeyAvL2Zvcm0tZmllbGRcclxuICAgIHJldFsnbmFtZSddID0gdm0ubmFtZTtcclxuICAgIHJldFsndmFsdWUnXSA9IHZtLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmV0KSlcclxufVxyXG5cclxudmFyIHBhdGNoID0gZnVuY3Rpb24ob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXHJcbiAgaWYgKHZub2RlID09PSBudWxsKSB7IC8vZGVzdHJveVxyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG4gIGlmICh0aGlzLm1wVHlwZSA9PT0gJ3BhZ2UnIHx8IHRoaXMubXBUeXBlID09PSAnY29tcG9uZW50Jykge1xyXG4gICAgdmFyIG1wSW5zdGFuY2UgPSB0aGlzLiRzY29wZTtcclxuICAgIHZhciBkYXRhID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGRhdGEgPSBjbG9uZVdpdGhEYXRhKHRoaXMpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgIH1cclxuICAgIGRhdGEuX193ZWJ2aWV3SWRfXyA9IG1wSW5zdGFuY2UuZGF0YS5fX3dlYnZpZXdJZF9fO1xyXG4gICAgdmFyIG1wRGF0YSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgLy/ku4XlkIzmraUgZGF0YSDkuK3mnInnmoTmlbDmja5cclxuICAgICAgbXBEYXRhW2tleV0gPSBtcEluc3RhbmNlLmRhdGFba2V5XTtcclxuICAgIH0pO1xyXG4gICAgdmFyIGRpZmZEYXRhID0gdGhpcy4kc2hvdWxkRGlmZkRhdGEgPT09IGZhbHNlID8gZGF0YSA6IGRpZmYoZGF0YSwgbXBEYXRhKTtcclxuICAgIGlmIChPYmplY3Qua2V5cyhkaWZmRGF0YSkubGVuZ3RoKSB7XHJcbiAgICAgIGlmIChwcm9jZXNzLmVudi5WVUVfQVBQX0RFQlVHKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1snICsgKCtuZXcgRGF0ZSkgKyAnXVsnICsgKG1wSW5zdGFuY2UuaXMgfHwgbXBJbnN0YW5jZS5yb3V0ZSkgKyAnXVsnICsgdGhpcy5fdWlkICtcclxuICAgICAgICAgICdd5beu6YeP5pu05pawJyxcclxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGRpZmZEYXRhKSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5fX25leHRfdGlja19wZW5kaW5nID0gdHJ1ZTtcclxuICAgICAgbXBJbnN0YW5jZS5zZXREYXRhKGRpZmZEYXRhLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcyQxLl9fbmV4dF90aWNrX3BlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICBmbHVzaENhbGxiYWNrcyQxKHRoaXMkMSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmx1c2hDYWxsYmFja3MkMSh0aGlzKTtcclxuICAgIH1cclxuICB9XHJcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbXB0eVJlbmRlcigpIHtcblxufVxuXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudCQxKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGlmICghdm0ubXBUeXBlKSB7Ly9tYWluLmpzIOS4reeahCBuZXcgVnVlXG4gICAgcmV0dXJuIHZtXG4gIH1cbiAgaWYgKHZtLm1wVHlwZSA9PT0gJ2FwcCcpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVJlbmRlcjtcbiAgfVxuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5UmVuZGVyO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICAhdm0uXyRmYWxsYmFjayAmJiBjYWxsSG9vayh2bSwgJ2JlZm9yZU1vdW50Jyk7XG5cbiAgdmFyIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSwgaHlkcmF0aW5nKTtcbiAgfTtcblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG4gIHJldHVybiB2bVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyogICovXHJcblxyXG52YXIgTVBfTUVUSE9EUyA9IFsnY3JlYXRlU2VsZWN0b3JRdWVyeScsICdjcmVhdGVJbnRlcnNlY3Rpb25PYnNlcnZlcicsICdzZWxlY3RBbGxDb21wb25lbnRzJywgJ3NlbGVjdENvbXBvbmVudCddO1xyXG5cclxuZnVuY3Rpb24gZ2V0VGFyZ2V0KG9iaiwgcGF0aCkge1xyXG4gIHZhciBwYXJ0cyA9IHBhdGguc3BsaXQoJy4nKTtcclxuICB2YXIga2V5ID0gcGFydHNbMF07XHJcbiAgaWYgKGtleS5pbmRleE9mKCdfXyRuJykgPT09IDApIHsgLy9udW1iZXIgaW5kZXhcclxuICAgIGtleSA9IHBhcnNlSW50KGtleS5yZXBsYWNlKCdfXyRuJywgJycpKTtcclxuICB9XHJcbiAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgcmV0dXJuIG9ialtrZXldXHJcbiAgfVxyXG4gIHJldHVybiBnZXRUYXJnZXQob2JqW2tleV0sIHBhcnRzLnNsaWNlKDEpLmpvaW4oJy4nKSlcclxufVxyXG5cclxuZnVuY3Rpb24gaW50ZXJuYWxNaXhpbihWdWUpIHtcclxuXHJcbiAgVnVlLmNvbmZpZy5lcnJvckhhbmRsZXIgPSBmdW5jdGlvbihlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuICAgIHZhciBhcHAgPSBnZXRBcHAoKTtcclxuICAgIGlmIChhcHAgJiYgYXBwLm9uRXJyb3IpIHtcclxuICAgICAgYXBwLm9uRXJyb3IoZXJyKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgb2xkRW1pdCA9IFZ1ZS5wcm90b3R5cGUuJGVtaXQ7XHJcblxyXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgaWYgKHRoaXMuJHNjb3BlICYmIGV2ZW50KSB7XHJcbiAgICAgIHRoaXMuJHNjb3BlWyd0cmlnZ2VyRXZlbnQnXShldmVudCwge1xyXG4gICAgICAgIF9fYXJnc19fOiB0b0FycmF5KGFyZ3VtZW50cywgMSlcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2xkRW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXHJcbiAgfTtcclxuXHJcbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbihmbikge1xyXG4gICAgcmV0dXJuIG5leHRUaWNrJDEodGhpcywgZm4pXHJcbiAgfTtcclxuXHJcbiAgTVBfTUVUSE9EUy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuICAgIFZ1ZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZ3MpIHtcclxuICAgICAgaWYgKHRoaXMuJHNjb3BlICYmIHRoaXMuJHNjb3BlW21ldGhvZF0pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kc2NvcGVbbWV0aG9kXShhcmdzKVxyXG4gICAgICB9XHJcbiAgICAgIC8vIG1wLWFsaXBheVxyXG4gICAgICBpZiAodHlwZW9mIG15ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtZXRob2QgPT09ICdjcmVhdGVTZWxlY3RvclF1ZXJ5Jykge1xyXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXHJcbiAgICAgICAgcmV0dXJuIG15LmNyZWF0ZVNlbGVjdG9yUXVlcnkoYXJncylcclxuICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdjcmVhdGVJbnRlcnNlY3Rpb25PYnNlcnZlcicpIHtcclxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xyXG4gICAgICAgIHJldHVybiBteS5jcmVhdGVJbnRlcnNlY3Rpb25PYnNlcnZlcihhcmdzKVxyXG4gICAgICB9XHJcbiAgICAgIC8vIFRPRE8gbXAtYWxpcGF5IOaaguS4jeaUr+aMgSBzZWxlY3RBbGxDb21wb25lbnRzLHNlbGVjdENvbXBvbmVudFxyXG4gICAgfTtcclxuICB9KTtcclxuXHJcbiAgVnVlLnByb3RvdHlwZS5fX2luaXRfcHJvdmlkZSA9IGluaXRQcm92aWRlO1xyXG5cclxuICBWdWUucHJvdG90eXBlLl9faW5pdF9pbmplY3Rpb25zID0gaW5pdEluamVjdGlvbnM7XHJcblxyXG4gIFZ1ZS5wcm90b3R5cGUuX19jYWxsX2hvb2sgPSBmdW5jdGlvbihob29rLCBhcmdzKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xyXG4gICAgcHVzaFRhcmdldCgpO1xyXG4gICAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XHJcbiAgICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XHJcbiAgICB2YXIgcmV0O1xyXG4gICAgaWYgKGhhbmRsZXJzKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XHJcbiAgICAgICAgcmV0ID0gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBhcmdzID8gW2FyZ3NdIDogbnVsbCwgdm0sIGluZm8pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xyXG4gICAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vaywgYXJncyk7XHJcbiAgICB9XHJcbiAgICBwb3BUYXJnZXQoKTtcclxuICAgIHJldHVybiByZXRcclxuICB9O1xyXG5cclxuICBWdWUucHJvdG90eXBlLl9fc2V0X21vZGVsID0gZnVuY3Rpb24odGFyZ2V0LCBrZXksIHZhbHVlLCBtb2RpZmllcnMpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZGlmaWVycykpIHtcclxuICAgICAgaWYgKG1vZGlmaWVycy5pbmRleE9mKCd0cmltJykgIT09IC0xKSB7XHJcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1vZGlmaWVycy5pbmRleE9mKCdudW1iZXInKSAhPT0gLTEpIHtcclxuICAgICAgICB2YWx1ZSA9IHRoaXMuX24odmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICB0YXJnZXQgPSB0aGlzO1xyXG4gICAgfVxyXG4gICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcclxuICB9O1xyXG5cclxuICBWdWUucHJvdG90eXBlLl9fc2V0X3N5bmMgPSBmdW5jdGlvbih0YXJnZXQsIGtleSwgdmFsdWUpIHtcclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgIHRhcmdldCA9IHRoaXM7XHJcbiAgICB9XHJcbiAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xyXG4gIH07XHJcblxyXG4gIFZ1ZS5wcm90b3R5cGUuX19nZXRfb3JpZyA9IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIGlmIChpc1BsYWluT2JqZWN0KGl0ZW0pKSB7XHJcbiAgICAgIHJldHVybiBpdGVtWyckb3JpZyddIHx8IGl0ZW1cclxuICAgIH1cclxuICAgIHJldHVybiBpdGVtXHJcbiAgfTtcclxuXHJcbiAgVnVlLnByb3RvdHlwZS5fX2dldF92YWx1ZSA9IGZ1bmN0aW9uKGRhdGFQYXRoLCB0YXJnZXQpIHtcclxuICAgIHJldHVybiBnZXRUYXJnZXQodGFyZ2V0IHx8IHRoaXMsIGRhdGFQYXRoKVxyXG4gIH07XHJcblxyXG5cclxuICBWdWUucHJvdG90eXBlLl9fZ2V0X2NsYXNzID0gZnVuY3Rpb24oZHluYW1pY0NsYXNzLCBzdGF0aWNDbGFzcykge1xyXG4gICAgcmV0dXJuIHJlbmRlckNsYXNzKHN0YXRpY0NsYXNzLCBkeW5hbWljQ2xhc3MpXHJcbiAgfTtcclxuXHJcbiAgVnVlLnByb3RvdHlwZS5fX2dldF9zdHlsZSA9IGZ1bmN0aW9uKGR5bmFtaWNTdHlsZSwgc3RhdGljU3R5bGUpIHtcclxuICAgIGlmICghZHluYW1pY1N0eWxlICYmICFzdGF0aWNTdHlsZSkge1xyXG4gICAgICByZXR1cm4gJydcclxuICAgIH1cclxuICAgIHZhciBkeW5hbWljU3R5bGVPYmogPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZHluYW1pY1N0eWxlKTtcclxuICAgIHZhciBzdHlsZU9iaiA9IHN0YXRpY1N0eWxlID8gZXh0ZW5kKHN0YXRpY1N0eWxlLCBkeW5hbWljU3R5bGVPYmopIDogZHluYW1pY1N0eWxlT2JqO1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0eWxlT2JqKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICgoaHlwaGVuYXRlKG5hbWUpKSArIFwiOlwiICsgKHN0eWxlT2JqW25hbWVdKSk7IH0pLmpvaW4oJzsnKVxyXG4gIH07XHJcblxyXG4gIFZ1ZS5wcm90b3R5cGUuX19tYXAgPSBmdW5jdGlvbih2YWwsIGl0ZXJhdGVlKSB7XHJcbiAgICAvL1RPRE8g5pqC5LiN6ICD6JmRIHN0cmluZyxudW1iZXJcclxuICAgIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcclxuICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xyXG4gICAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIHJldFtpXSA9IGl0ZXJhdGVlKHZhbFtpXSwgaSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJldFxyXG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XHJcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xyXG4gICAgICByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBrZXkgPSBrZXlzW2ldO1xyXG4gICAgICAgIHJldFtrZXldID0gaXRlcmF0ZWUodmFsW2tleV0sIGtleSwgaSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJldFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtdXHJcbiAgfTtcclxuXHJcbn1cblxuLyogICovXHJcblxyXG52YXIgTElGRUNZQ0xFX0hPT0tTJDEgPSBbXHJcbiAgICAvL0FwcFxyXG4gICAgJ29uTGF1bmNoJyxcclxuICAgICdvblNob3cnLFxyXG4gICAgJ29uSGlkZScsXHJcbiAgICAnb25VbmlOVmlld01lc3NhZ2UnLFxuICAgICdvbkVycm9yJyxcclxuICAgIC8vUGFnZVxyXG4gICAgJ29uTG9hZCcsXHJcbiAgICAvLyAnb25TaG93JyxcclxuICAgICdvblJlYWR5JyxcclxuICAgIC8vICdvbkhpZGUnLFxyXG4gICAgJ29uVW5sb2FkJyxcclxuICAgICdvblB1bGxEb3duUmVmcmVzaCcsXHJcbiAgICAnb25SZWFjaEJvdHRvbScsXHJcbiAgICAnb25UYWJJdGVtVGFwJyxcclxuICAgICdvblNoYXJlQXBwTWVzc2FnZScsXG4gICAgJ29uUmVzaXplJyxcclxuICAgICdvblBhZ2VTY3JvbGwnLFxyXG4gICAgJ29uTmF2aWdhdGlvbkJhckJ1dHRvblRhcCcsXHJcbiAgICAnb25CYWNrUHJlc3MnLFxyXG4gICAgJ29uTmF2aWdhdGlvbkJhclNlYXJjaElucHV0Q2hhbmdlZCcsXHJcbiAgICAnb25OYXZpZ2F0aW9uQmFyU2VhcmNoSW5wdXRDb25maXJtZWQnLFxyXG4gICAgJ29uTmF2aWdhdGlvbkJhclNlYXJjaElucHV0Q2xpY2tlZCcsXHJcbiAgICAvL0NvbXBvbmVudFxyXG4gICAgLy8gJ29uUmVhZHknLCAvLyDlhbzlrrnml6fniYjmnKzvvIzlupTor6Xnp7vpmaTor6Xkuovku7ZcclxuICAgICdvblBhZ2VTaG93JyxcclxuICAgICdvblBhZ2VIaWRlJyxcclxuICAgICdvblBhZ2VSZXNpemUnXHJcbl07XHJcbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluJDEoVnVlKSB7XHJcblxyXG4gICAgLy9maXhlZCB2dWUtY2xhc3MtY29tcG9uZW50XHJcbiAgICB2YXIgb2xkRXh0ZW5kID0gVnVlLmV4dGVuZDtcclxuICAgIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbihleHRlbmRPcHRpb25zKSB7XHJcbiAgICAgICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XHJcblxyXG4gICAgICAgIHZhciBtZXRob2RzID0gZXh0ZW5kT3B0aW9ucy5tZXRob2RzO1xyXG4gICAgICAgIGlmIChtZXRob2RzKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG1ldGhvZHMpLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChMSUZFQ1lDTEVfSE9PS1MkMS5pbmRleE9mKG1ldGhvZE5hbWUpIT09LTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHRlbmRPcHRpb25zW21ldGhvZE5hbWVdID0gbWV0aG9kc1ttZXRob2ROYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWV0aG9kc1ttZXRob2ROYW1lXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb2xkRXh0ZW5kLmNhbGwodGhpcywgZXh0ZW5kT3B0aW9ucylcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHN0cmF0ZWdpZXMgPSBWdWUuY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcclxuICAgIHZhciBtZXJnZUhvb2sgPSBzdHJhdGVnaWVzLmNyZWF0ZWQ7XHJcbiAgICBMSUZFQ1lDTEVfSE9PS1MkMS5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XHJcbiAgICAgICAgc3RyYXRlZ2llc1tob29rXSA9IG1lcmdlSG9vaztcclxuICAgIH0pO1xyXG5cclxuICAgIFZ1ZS5wcm90b3R5cGUuX19saWZlY3ljbGVfaG9va3NfXyA9IExJRkVDWUNMRV9IT09LUyQxO1xyXG59XG5cbi8qICAqL1xyXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cclxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBwYXRjaDtcclxuXHJcbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcclxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbihcclxuICAgIGVsICxcclxuICAgIGh5ZHJhdGluZyBcclxuKSB7XHJcbiAgICByZXR1cm4gbW91bnRDb21wb25lbnQkMSh0aGlzLCBlbCwgaHlkcmF0aW5nKVxyXG59O1xyXG5cclxubGlmZWN5Y2xlTWl4aW4kMShWdWUpO1xyXG5pbnRlcm5hbE1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5leHBvcnQgZGVmYXVsdCBWdWU7XG4iLCJpbXBvcnQgZGVlcENsb25lIGZyb20gXCIuL2RlZXBDbG9uZVwiO1xyXG5cclxuLy8gSlPlr7nosaHmt7HluqblkIjlubZcclxuZnVuY3Rpb24gZGVlcE1lcmdlKHRhcmdldCA9IHt9LCBzb3VyY2UgPSB7fSkge1xyXG5cdHRhcmdldCA9IGRlZXBDbG9uZSh0YXJnZXQpO1xyXG5cdGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xyXG5cdGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XHJcblx0XHRpZiAoIXNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgY29udGludWU7XHJcblx0XHRpZiAocHJvcCBpbiB0YXJnZXQpIHtcclxuXHRcdFx0aWYgKHR5cGVvZiB0YXJnZXRbcHJvcF0gIT09ICdvYmplY3QnKSB7XHJcblx0XHRcdFx0dGFyZ2V0W3Byb3BdID0gc291cmNlW3Byb3BdO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGlmICh0eXBlb2Ygc291cmNlW3Byb3BdICE9PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRcdFx0dGFyZ2V0W3Byb3BdID0gc291cmNlW3Byb3BdO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpZiAodGFyZ2V0W3Byb3BdLmNvbmNhdCAmJiBzb3VyY2VbcHJvcF0uY29uY2F0KSB7XHJcblx0XHRcdFx0XHRcdHRhcmdldFtwcm9wXSA9IHRhcmdldFtwcm9wXS5jb25jYXQoc291cmNlW3Byb3BdKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRhcmdldFtwcm9wXSA9IGRlZXBNZXJnZSh0YXJnZXRbcHJvcF0sIHNvdXJjZVtwcm9wXSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiB0YXJnZXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRlZXBNZXJnZTsiLCIvLyDliKTmlq1hcnLmmK/lkKbkuLrkuIDkuKrmlbDnu4TvvIzov5Tlm57kuIDkuKpib29s5YC8XHJcbmZ1bmN0aW9uIGlzQXJyYXkgKGFycikge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09PSAnW29iamVjdCBBcnJheV0nO1xyXG59XHJcblxyXG4vLyDmt7HluqblhYvpmoZcclxuZnVuY3Rpb24gZGVlcENsb25lIChvYmopIHtcclxuXHQvLyDlr7nluLjop4HnmoTigJzpnZ7igJ3lgLzvvIznm7TmjqXov5Tlm57ljp/mnaXlgLxcclxuXHRpZihbbnVsbCwgdW5kZWZpbmVkLCBOYU4sIGZhbHNlXS5pbmNsdWRlcyhvYmopKSByZXR1cm4gb2JqO1xyXG4gICAgaWYodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSAnZnVuY3Rpb24nKSB7XHJcblx0XHQvL+WOn+Wni+exu+Wei+ebtOaOpei/lOWbnlxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcbiAgICB2YXIgbyA9IGlzQXJyYXkob2JqKSA/IFtdIDoge307XHJcbiAgICBmb3IobGV0IGkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYob2JqLmhhc093blByb3BlcnR5KGkpKXtcclxuICAgICAgICAgICAgb1tpXSA9IHR5cGVvZiBvYmpbaV0gPT09IFwib2JqZWN0XCIgPyBkZWVwQ2xvbmUob2JqW2ldKSA6IG9ialtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbztcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGVlcENsb25lO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vLyBUaGlzIG1ldGhvZCBvZiBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgbmVlZHMgdG8gYmVcbi8vIGtlcHQgaWRlbnRpY2FsIHRvIHRoZSB3YXkgaXQgaXMgb2J0YWluZWQgaW4gcnVudGltZS5qc1xudmFyIGcgPSAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzIHx8ICh0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBzZWxmKTtcbn0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuXG4vLyBVc2UgYGdldE93blByb3BlcnR5TmFtZXNgIGJlY2F1c2Ugbm90IGFsbCBicm93c2VycyBzdXBwb3J0IGNhbGxpbmdcbi8vIGBoYXNPd25Qcm9wZXJ0eWAgb24gdGhlIGdsb2JhbCBgc2VsZmAgb2JqZWN0IGluIGEgd29ya2VyLiBTZWUgIzE4My5cbnZhciBoYWRSdW50aW1lID0gZy5yZWdlbmVyYXRvclJ1bnRpbWUgJiZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZykuaW5kZXhPZihcInJlZ2VuZXJhdG9yUnVudGltZVwiKSA+PSAwO1xuXG4vLyBTYXZlIHRoZSBvbGQgcmVnZW5lcmF0b3JSdW50aW1lIGluIGNhc2UgaXQgbmVlZHMgdG8gYmUgcmVzdG9yZWQgbGF0ZXIuXG52YXIgb2xkUnVudGltZSA9IGhhZFJ1bnRpbWUgJiYgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG5cbi8vIEZvcmNlIHJlZXZhbHV0YXRpb24gb2YgcnVudGltZS5qcy5cbmcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5cbmlmIChoYWRSdW50aW1lKSB7XG4gIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIHJ1bnRpbWUuXG4gIGcucmVnZW5lcmF0b3JSdW50aW1lID0gb2xkUnVudGltZTtcbn0gZWxzZSB7XG4gIC8vIFJlbW92ZSB0aGUgZ2xvYmFsIHByb3BlcnR5IGFkZGVkIGJ5IHJ1bnRpbWUuanMuXG4gIHRyeSB7XG4gICAgZGVsZXRlIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuICB9IGNhdGNoKGUpIHtcbiAgICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gSW4gc2xvcHB5IG1vZGUsIHVuYm91bmQgYHRoaXNgIHJlZmVycyB0byB0aGUgZ2xvYmFsIG9iamVjdCwgZmFsbGJhY2sgdG9cbiAgLy8gRnVuY3Rpb24gY29uc3RydWN0b3IgaWYgd2UncmUgaW4gZ2xvYmFsIHN0cmljdCBtb2RlLiBUaGF0IGlzIHNhZGx5IGEgZm9ybVxuICAvLyBvZiBpbmRpcmVjdCBldmFsIHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5LlxuICAoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMgfHwgKHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiICYmIHNlbGYpO1xuICB9KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKVxuKTtcbiIsIi8qKlxyXG4gKiDpqozor4HnlLXlrZDpgq7nrrHmoLzlvI9cclxuICovXHJcbmZ1bmN0aW9uIGVtYWlsKHZhbHVlKSB7XHJcblx0cmV0dXJuIC9eXFx3KygoLVxcdyspfChcXC5cXHcrKSkqXFxAW0EtWmEtejAtOV0rKChcXC58LSlbQS1aYS16MC05XSspKlxcLltBLVphLXowLTldKyQvLnRlc3QodmFsdWUpO1xyXG59XHJcblxyXG4vKipcclxuICog6aqM6K+B5omL5py65qC85byPXHJcbiAqL1xyXG5mdW5jdGlvbiBtb2JpbGUodmFsdWUpIHtcclxuXHRyZXR1cm4gL14xWzIzNDU2Nzg5XVxcZHs5fSQvLnRlc3QodmFsdWUpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDpqozor4FVUkzmoLzlvI9cclxuICovXHJcbmZ1bmN0aW9uIHVybCh2YWx1ZSkge1xyXG5cdHJldHVybiAvXigoaHR0cHN8aHR0cHxmdHB8cnRzcHxtbXMpOlxcL1xcLykoKFswLTlhLXpBLVpfIX4qJygpLiY9KyQlLV0rOiApP1swLTlhLXpBLVpfIX4qJygpLiY9KyQlLV0rQCk/KChbMC05XXsxLDN9Lil7M31bMC05XXsxLDN9fChbMC05YS16QS1aXyF+KicoKS1dKy4pKihbMC05YS16QS1aXVswLTlhLXpBLVotXXswLDYxfSk/WzAtOWEtekEtWl0uW2EtekEtWl17Miw2fSkoOlswLTldezEsNH0pPygoXFwvPyl8KFxcL1swLTlhLXpBLVpfIX4qJygpLjs/OkAmPSskLCUjLV0rKStcXC8/KSQvXHJcblx0XHQudGVzdCh2YWx1ZSlcclxufVxyXG5cclxuLyoqXHJcbiAqIOmqjOivgeaXpeacn+agvOW8j1xyXG4gKi9cclxuZnVuY3Rpb24gZGF0ZSh2YWx1ZSkge1xyXG5cdHJldHVybiAhL0ludmFsaWR8TmFOLy50ZXN0KG5ldyBEYXRlKHZhbHVlKS50b1N0cmluZygpKVxyXG59XHJcblxyXG4vKipcclxuICog6aqM6K+BSVNP57G75Z6L55qE5pel5pyf5qC85byPXHJcbiAqL1xyXG5mdW5jdGlvbiBkYXRlSVNPKHZhbHVlKSB7XHJcblx0cmV0dXJuIC9eXFxkezR9W1xcL1xcLV0oMD9bMS05XXwxWzAxMl0pW1xcL1xcLV0oMD9bMS05XXxbMTJdWzAtOV18M1swMV0pJC8udGVzdCh2YWx1ZSlcclxufVxyXG5cclxuLyoqXHJcbiAqIOmqjOivgeWNgei/m+WItuaVsOWtl1xyXG4gKi9cclxuZnVuY3Rpb24gbnVtYmVyKHZhbHVlKSB7XHJcblx0cmV0dXJuIC9eKD86LT9cXGQrfC0/XFxkezEsM30oPzosXFxkezN9KSspPyg/OlxcLlxcZCspPyQvLnRlc3QodmFsdWUpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDpqozor4HmlbTmlbBcclxuICovXHJcbmZ1bmN0aW9uIGRpZ2l0cyh2YWx1ZSkge1xyXG5cdHJldHVybiAvXlxcZCskLy50ZXN0KHZhbHVlKVxyXG59XHJcblxyXG4vKipcclxuICog6aqM6K+B6Lqr5Lu96K+B5Y+356CBXHJcbiAqL1xyXG5mdW5jdGlvbiBpZENhcmQodmFsdWUpIHtcclxuXHRyZXR1cm4gL15bMS05XVxcZHs1fVsxLTldXFxkezN9KCgwXFxkKXwoMVswLTJdKSkoKFswfDF8Ml1cXGQpfDNbMC0xXSlcXGR7M30oWzAtOV18WCkkLy50ZXN0KFxyXG5cdFx0dmFsdWUpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmmK/lkKbovabniYzlj7dcclxuICovXHJcbmZ1bmN0aW9uIGNhck5vKHZhbHVlKSB7XHJcblx0Ly8g5paw6IO95rqQ6L2m54mMXHJcblx0Y29uc3QgeHJlZyA9IC9eW+S6rOa0peayqua4neWGgOixq+S6kei+vem7kea5mOealumygeaWsOiLj+a1mei1o+mEguahgueUmOaZi+iSmemZleWQiemXvei0teeypOmdkuiXj+W3neWugeeQvOS9v+mihkEtWl17MX1bQS1aXXsxfSgoWzAtOV17NX1bREZdJCl8KFtERl1bQS1ISi1OUC1aMC05XVswLTldezR9JCkpLztcclxuXHQvLyDml6fovabniYxcclxuXHRjb25zdCBjcmVnID0gL15b5Lqs5rSl5rKq5rid5YaA6LGr5LqR6L696buR5rmY55qW6bKB5paw6IuP5rWZ6LWj6YSC5qGC55SY5pmL6JKZ6ZmV5ZCJ6Ze96LS157Kk6Z2S6JeP5bed5a6B55C85L2/6aKGQS1aXXsxfVtBLVpdezF9W0EtSEotTlAtWjAtOV17NH1bQS1ISi1OUC1aMC055oyC5a2m6K2m5riv5r6zXXsxfSQvO1xyXG5cdGlmICh2YWx1ZS5sZW5ndGggPT09IDcpIHtcclxuXHRcdHJldHVybiBjcmVnLnRlc3QodmFsdWUpO1xyXG5cdH0gZWxzZSBpZiAodmFsdWUubGVuZ3RoID09PSA4KSB7XHJcblx0XHRyZXR1cm4geHJlZy50ZXN0KHZhbHVlKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbiAqIOmHkeminSzlj6rlhYHorrgy5L2N5bCP5pWwXHJcbiAqL1xyXG5mdW5jdGlvbiBhbW91bnQodmFsdWUpIHtcclxuXHQvL+mHkemine+8jOWPquWFgeiuuOS/neeVmeS4pOS9jeWwj+aVsFxyXG5cdHJldHVybiAvXlsxLTldXFxkKigsXFxkezN9KSooXFwuXFxkezEsMn0pPyR8XjBcXC5cXGR7MSwyfSQvLnRlc3QodmFsdWUpO1xyXG59XHJcblxyXG4vKipcclxuICog5Lit5paHXHJcbiAqL1xyXG5mdW5jdGlvbiBjaGluZXNlKHZhbHVlKSB7XHJcblx0bGV0IHJlZyA9IC9eW1xcdTRlMDAtXFx1OWZhNV0rJC9naTtcclxuXHRyZXR1cm4gcmVnLnRlc3QodmFsdWUpO1xyXG59XHJcblxyXG4vKipcclxuICog5Y+q6IO96L6T5YWl5a2X5q+NXHJcbiAqL1xyXG5mdW5jdGlvbiBsZXR0ZXIodmFsdWUpIHtcclxuXHRyZXR1cm4gL15bYS16QS1aXSokLy50ZXN0KHZhbHVlKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOWPquiDveaYr+Wtl+avjeaIluiAheaVsOWtl1xyXG4gKi9cclxuZnVuY3Rpb24gZW5Pck51bSh2YWx1ZSkge1xyXG5cdC8v6Iux5paH5oiW6ICF5pWw5a2XXHJcblx0bGV0IHJlZyA9IC9eWzAtOWEtekEtWl0qJC9nO1xyXG5cdHJldHVybiByZWcudGVzdCh2YWx1ZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDpqozor4HmmK/lkKbljIXlkKvmn5DkuKrlgLxcclxuICovXHJcbmZ1bmN0aW9uIGNvbnRhaW5zKHZhbHVlLCBwYXJhbSkge1xyXG5cdHJldHVybiB2YWx1ZS5pbmRleE9mKHBhcmFtKSA+PSAwXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDpqozor4HkuIDkuKrlgLzojIPlm7RbbWluLCBtYXhdXHJcbiAqL1xyXG5mdW5jdGlvbiByYW5nZSh2YWx1ZSwgcGFyYW0pIHtcclxuXHRyZXR1cm4gdmFsdWUgPj0gcGFyYW1bMF0gJiYgdmFsdWUgPD0gcGFyYW1bMV1cclxufVxyXG5cclxuLyoqXHJcbiAqIOmqjOivgeS4gOS4qumVv+W6puiMg+WbtFttaW4sIG1heF1cclxuICovXHJcbmZ1bmN0aW9uIHJhbmdlTGVuZ3RoKHZhbHVlLCBwYXJhbSkge1xyXG5cdHJldHVybiB2YWx1ZS5sZW5ndGggPj0gcGFyYW1bMF0gJiYgdmFsdWUubGVuZ3RoIDw9IHBhcmFtWzFdXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmmK/lkKblm7rlrprnlLXor51cclxuICovXHJcbmZ1bmN0aW9uIGxhbmRsaW5lKHZhbHVlKSB7XHJcblx0bGV0IHJlZyA9IC9eXFxkezMsNH0tXFxkezcsOH0oLVxcZHszLDR9KT8kLztcclxuXHRyZXR1cm4gcmVnLnRlc3QodmFsdWUpO1xyXG59XHJcblxyXG4vKipcclxuICog5Yik5pat5piv5ZCm5Li656m6XHJcbiAqL1xyXG5mdW5jdGlvbiBlbXB0eSh2YWx1ZSkge1xyXG5cdHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XHJcblx0XHRjYXNlICd1bmRlZmluZWQnOlxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdGNhc2UgJ3N0cmluZyc6XHJcblx0XHRcdGlmICh2YWx1ZS5yZXBsYWNlKC8oXlsgXFx0XFxuXFxyXSopfChbIFxcdFxcblxccl0qJCkvZywgJycpLmxlbmd0aCA9PSAwKSByZXR1cm4gdHJ1ZTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICdib29sZWFuJzpcclxuXHRcdFx0aWYgKCF2YWx1ZSkgcmV0dXJuIHRydWU7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnbnVtYmVyJzpcclxuXHRcdFx0aWYgKDAgPT09IHZhbHVlIHx8IGlzTmFOKHZhbHVlKSkgcmV0dXJuIHRydWU7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnb2JqZWN0JzpcclxuXHRcdFx0aWYgKG51bGwgPT09IHZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRydWU7XHJcblx0XHRcdGZvciAodmFyIGkgaW4gdmFsdWUpIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOaYr+WQpmpzb27lrZfnrKbkuLJcclxuICovXHJcbmZ1bmN0aW9uIGpzb25TdHJpbmcodmFsdWUpIHtcclxuXHRpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHR2YXIgb2JqID0gSlNPTi5wYXJzZSh2YWx1ZSk7XHJcblx0XHRcdGlmICh0eXBlb2Ygb2JqID09ICdvYmplY3QnICYmIG9iaikge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiDmmK/lkKbmlbDnu4RcclxuICovXHJcbmZ1bmN0aW9uIGFycmF5KHZhbHVlKSB7XHJcblx0aWYgKHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSBcImZ1bmN0aW9uXCIpIHtcclxuXHRcdHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBBcnJheV1cIjtcclxuXHR9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICog5piv5ZCm5a+56LGhXHJcbiAqL1xyXG5mdW5jdGlvbiBvYmplY3QodmFsdWUpIHtcclxuXHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0ZW1haWwsXHJcblx0bW9iaWxlLFxyXG5cdHVybCxcclxuXHRkYXRlLFxyXG5cdGRhdGVJU08sXHJcblx0bnVtYmVyLFxyXG5cdGRpZ2l0cyxcclxuXHRpZENhcmQsXHJcblx0Y2FyTm8sXHJcblx0YW1vdW50LFxyXG5cdGNoaW5lc2UsXHJcblx0bGV0dGVyLFxyXG5cdGVuT3JOdW0sXHJcblx0Y29udGFpbnMsXHJcblx0cmFuZ2UsXHJcblx0cmFuZ2VMZW5ndGgsXHJcblx0ZW1wdHksXHJcblx0aXNFbXB0eTogZW1wdHksXHJcblx0anNvblN0cmluZyxcclxuXHRsYW5kbGluZSxcclxuXHRvYmplY3QsXHJcblx0YXJyYXlcclxufVxyXG4iLCIvKipcclxuICog5a+56LGh6L2sdXJs5Y+C5pWwXHJcbiAqIEBwYXJhbSB7Kn0gZGF0YSzlr7nosaFcclxuICogQHBhcmFtIHsqfSBpc1ByZWZpeCzmmK/lkKboh6rliqjliqDkuIpcIj9cIlxyXG4gKi9cclxuZnVuY3Rpb24gcXVlcnlQYXJhbXMoZGF0YSA9IHt9LCBpc1ByZWZpeCA9IHRydWUsIGFycmF5Rm9ybWF0ID0gJ2JyYWNrZXRzJykge1xyXG5cdGxldCBwcmVmaXggPSBpc1ByZWZpeCA/ICc/JyA6ICcnXHJcblx0bGV0IF9yZXN1bHQgPSBbXVxyXG5cdGlmIChbJ2luZGljZXMnLCAnYnJhY2tldHMnLCAncmVwZWF0JywgJ2NvbW1hJ10uaW5kZXhPZihhcnJheUZvcm1hdCkgPT0gLTEpIGFycmF5Rm9ybWF0ID0gJ2JyYWNrZXRzJztcclxuXHRmb3IgKGxldCBrZXkgaW4gZGF0YSkge1xyXG5cdFx0bGV0IHZhbHVlID0gZGF0YVtrZXldXHJcblx0XHQvLyDljrvmjonkuLrnqbrnmoTlj4LmlbBcclxuXHRcdGlmIChbJycsIHVuZGVmaW5lZCwgbnVsbF0uaW5kZXhPZih2YWx1ZSkgPj0gMCkge1xyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHRcdC8vIOWmguaenOWAvOS4uuaVsOe7hO+8jOWPpuihjOWkhOeQhlxyXG5cdFx0aWYgKHZhbHVlLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG5cdFx0XHQvLyBlLmcuIHtpZHM6IFsxLCAyLCAzXX1cclxuXHRcdFx0c3dpdGNoIChhcnJheUZvcm1hdCkge1xyXG5cdFx0XHRcdGNhc2UgJ2luZGljZXMnOlxyXG5cdFx0XHRcdFx0Ly8g57uT5p6cOiBpZHNbMF09MSZpZHNbMV09MiZpZHNbMl09M1xyXG5cdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdFx0XHRfcmVzdWx0LnB1c2goa2V5ICsgJ1snICsgaSArICddPScgKyB2YWx1ZVtpXSlcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ2JyYWNrZXRzJzpcclxuXHRcdFx0XHRcdC8vIOe7k+aenDogaWRzW109MSZpZHNbXT0yJmlkc1tdPTNcclxuXHRcdFx0XHRcdHZhbHVlLmZvckVhY2goX3ZhbHVlID0+IHtcclxuXHRcdFx0XHRcdFx0X3Jlc3VsdC5wdXNoKGtleSArICdbXT0nICsgX3ZhbHVlKVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ3JlcGVhdCc6XHJcblx0XHRcdFx0XHQvLyDnu5Pmnpw6IGlkcz0xJmlkcz0yJmlkcz0zXHJcblx0XHRcdFx0XHR2YWx1ZS5mb3JFYWNoKF92YWx1ZSA9PiB7XHJcblx0XHRcdFx0XHRcdF9yZXN1bHQucHVzaChrZXkgKyAnPScgKyBfdmFsdWUpXHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAnY29tbWEnOlxyXG5cdFx0XHRcdFx0Ly8g57uT5p6cOiBpZHM9MSwyLDNcclxuXHRcdFx0XHRcdGxldCBjb21tYVN0ciA9IFwiXCI7XHJcblx0XHRcdFx0XHR2YWx1ZS5mb3JFYWNoKF92YWx1ZSA9PiB7XHJcblx0XHRcdFx0XHRcdGNvbW1hU3RyICs9IChjb21tYVN0ciA/IFwiLFwiIDogXCJcIikgKyBfdmFsdWU7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0X3Jlc3VsdC5wdXNoKGtleSArICc9JyArIGNvbW1hU3RyKVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdHZhbHVlLmZvckVhY2goX3ZhbHVlID0+IHtcclxuXHRcdFx0XHRcdFx0X3Jlc3VsdC5wdXNoKGtleSArICdbXT0nICsgX3ZhbHVlKVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0X3Jlc3VsdC5wdXNoKGtleSArICc9JyArIHZhbHVlKVxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gX3Jlc3VsdC5sZW5ndGggPyBwcmVmaXggKyBfcmVzdWx0LmpvaW4oJyYnKSA6ICcnXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHF1ZXJ5UGFyYW1zO1xyXG4iLCJpbXBvcnQgcXVlcnlQYXJhbXMgZnJvbSAnLi4vLi4vbGlicy9mdW5jdGlvbi9xdWVyeVBhcmFtcy5qcyc7XHJcbi8qKlxyXG4gKiDot6/nlLHot7PovaxcclxuICog5rOo5oSPOuacrOaWueazleayoeacieWvuei3s+i9rOeahOWbnuiwg+WHveaVsOi/m+ihjOWwgeijhVxyXG4gKi9cclxuZnVuY3Rpb24gcm91dGUob3B0aW9ucyA9IHt9LCBwYXJhbXMgPSBmYWxzZSkge1xyXG5cdGxldCBjb25maWcgPSB7XHJcblx0XHR0eXBlOiAnbmF2aWdhdGVUbycsXHJcblx0XHR1cmw6ICcnLFxyXG5cdFx0ZGVsdGE6IDEsIC8vIG5hdmlnYXRlQmFja+mhtemdouWQjumAgOaXtizlm57pgIDnmoTlsYLmlbBcclxuXHRcdHBhcmFtczoge30sIC8vIOS8oOmAkueahOWPguaVsFxyXG5cdFx0YW5pbWF0aW9uVHlwZTogJ3BvcC1pbicsIC8vIOeql+WPo+WKqOeUuyzlj6rlnKhBUFDmnInmlYhcclxuXHRcdGFuaW1hdGlvbkR1cmF0aW9uOiAzMDAsIC8vIOeql+WPo+WKqOeUu+aMgee7reaXtumXtCzljZXkvY3mr6vnp5Is5Y+q5ZyoQVBQ5pyJ5pWIXHJcblx0fTtcclxuXHRjb25maWcgPSBPYmplY3QuYXNzaWduKGNvbmZpZywgb3B0aW9ucyk7XHJcblx0Ly8g5aaC5p6cdXJs5rKh5pyJXCIvXCLlvIDlpLTvvIzmt7vliqDkuIrvvIzlm6DkuLp1bmnnmoTot6/nlLHot7PovazpnIDopoFcIi9cIuW8gOWktFxyXG5cdGlmIChjb25maWcudXJsWzBdICE9ICcvJykgY29uZmlnLnVybCA9ICcvJyArIGNvbmZpZy51cmw7XHJcblx0Ly8g5Yik5pat5piv5ZCm5pyJ5Lyg6YCS5pi+5byP55qE5Y+C5pWwLE9iamVjdC5rZXlz6L2s5Li65pWw57uE5bm25Yik5pat6ZW/5bqmLHN3aXRjaFRhYuexu+Wei+aXtuS4jeiDveaQuuW4puWPguaVsFxyXG5cdGlmIChPYmplY3Qua2V5cyhjb25maWcucGFyYW1zKS5sZW5ndGggJiYgY29uZmlnLnR5cGUgIT0gJ3N3aXRjaFRhYicpIHtcclxuXHRcdC8vIOWIpOaWreeUqOaIt+S8oOmAkueahHVybOS4re+8jOaYr+WQpuW4puacieWPguaVsFxyXG5cdFx0Ly8g5L2/55So5q2j5YiZ5Yy56YWN77yM5Li76KaB5L6d5o2u5piv5Yik5pat5piv5ZCm5pyJXCIvXCIsXCI/XCIsXCI9XCLnrYnvvIzlpoLigJwvcGFnZS9pbmRleC9pbmRleD9uYW1lPW1hcnlcIlxyXG5cdFx0Ly8g5aaC5p6c5pyJdXJs5Lit5pyJZ2V05Y+C5pWw77yM6L2s5o2i5ZCO5peg6ZyA5bim5LiKXCI/XCJcclxuXHRcdGxldCBxdWVyeSA9ICcnO1xyXG5cdFx0aWYgKC8uKlxcLy4qXFw/Lio9LiovLnRlc3QoY29uZmlnLnVybCkpIHtcclxuXHRcdFx0Ly8gb2JqZWN05a+56LGh6L2s5Li6Z2V057G75Z6L55qE5Y+C5pWwXHJcblx0XHRcdHF1ZXJ5ID0gcXVlcnlQYXJhbXMoY29uZmlnLnBhcmFtcywgZmFsc2UpO1xyXG5cdFx0XHQvLyDlm6DkuLrlt7LmnIlnZXTlj4LmlbAs5omA5Lul5ZCO6Z2i5ou85o6l55qE5Y+C5pWw6ZyA6KaB5bim5LiKXCImXCLpmpTlvIBcclxuXHRcdFx0Y29uZmlnLnVybCArPSBcIiZcIiArIHF1ZXJ5O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cXVlcnkgPSBxdWVyeVBhcmFtcyhjb25maWcucGFyYW1zKTtcclxuXHRcdFx0Y29uZmlnLnVybCArPSBxdWVyeTtcclxuXHRcdH1cclxuXHR9XHJcblx0Ly8g566A5YaZ5b2i5byP77yM5oqKdXJs5ZKM5Y+C5pWw5ou85o6l6LW35p2lXHJcblx0aWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgcGFyYW1zID09ICdvYmplY3QnKSB7XHJcblx0XHRsZXQgcXVlcnkgPSAnJztcclxuXHRcdGlmICgvLipcXC8uKlxcPy4qPS4qLy50ZXN0KG9wdGlvbnMpKSB7XHJcblx0XHRcdC8vIG9iamVjdOWvueixoei9rOS4umdldOexu+Wei+eahOWPguaVsFxyXG5cdFx0XHRxdWVyeSA9IHF1ZXJ5UGFyYW1zKHBhcmFtcywgZmFsc2UpO1xyXG5cdFx0XHQvLyDlm6DkuLrlt7LmnIlnZXTlj4LmlbAs5omA5Lul5ZCO6Z2i5ou85o6l55qE5Y+C5pWw6ZyA6KaB5bim5LiKXCImXCLpmpTlvIBcclxuXHRcdFx0b3B0aW9ucyArPSBcIiZcIiArIHF1ZXJ5O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cXVlcnkgPSBxdWVyeVBhcmFtcyhwYXJhbXMpO1xyXG5cdFx0XHRvcHRpb25zICs9IHF1ZXJ5O1xyXG5cdFx0fVxyXG5cdH1cclxuXHQvLyDliKTmlq3mmK/lkKbkuIDkuKrlrZfnrKbkuLLvvIzlpoLmnpzmmK/vvIznm7TmjqXot7Povawo566A5YaZ5rOVKVxyXG5cdC8vIOWmguaenOaYr+S4reaDheW9ou+8jOm7mOiupOesrOS6jOS4quWPguaVsOS4uuWvueixoeW9ouW8j+eahOWPguaVsFxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcclxuXHRcdGlmIChvcHRpb25zWzBdICE9ICcvJykgb3B0aW9ucyA9ICcvJyArIG9wdGlvbnM7XHJcblx0XHRyZXR1cm4gdW5pLm5hdmlnYXRlVG8oe1xyXG5cdFx0XHR1cmw6IG9wdGlvbnNcclxuXHRcdH0pO1xyXG5cdH1cclxuXHQvLyBuYXZpZ2F0ZVRv57G75Z6L55qE6Lez6L2sXHJcblx0aWYgKGNvbmZpZy50eXBlID09ICduYXZpZ2F0ZVRvJyB8fCBjb25maWcudHlwZSA9PSAndG8nKSB7XHJcblx0XHRyZXR1cm4gdW5pLm5hdmlnYXRlVG8oe1xyXG5cdFx0XHR1cmw6IGNvbmZpZy51cmwsXHJcblx0XHRcdGFuaW1hdGlvblR5cGU6IGNvbmZpZy5hbmltYXRpb25UeXBlLFxyXG5cdFx0XHRhbmltYXRpb25EdXJhdGlvbjogY29uZmlnLmFuaW1hdGlvbkR1cmF0aW9uLFxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdGlmIChjb25maWcudHlwZSA9PSAncmVkaXJlY3RUbycgfHwgY29uZmlnLnR5cGUgPT0gJ3JlZGlyZWN0Jykge1xyXG5cdFx0cmV0dXJuIHVuaS5yZWRpcmVjdFRvKHtcclxuXHRcdFx0dXJsOiBjb25maWcudXJsLFxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdGlmIChjb25maWcudHlwZSA9PSAnc3dpdGNoVGFiJyB8fCBjb25maWcudHlwZSA9PSAndGFiJykge1xyXG5cdFx0cmV0dXJuIHVuaS5zd2l0Y2hUYWIoe1xyXG5cdFx0XHR1cmw6IGNvbmZpZy51cmwsXHJcblx0XHR9KTtcclxuXHR9XHJcblx0aWYgKGNvbmZpZy50eXBlID09ICdyZUxhdW5jaCcpIHtcclxuXHRcdHJldHVybiB1bmkucmVMYXVuY2goe1xyXG5cdFx0XHR1cmw6IGNvbmZpZy51cmxcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRpZiAoY29uZmlnLnR5cGUgPT0gJ25hdmlnYXRlQmFjaycgfHwgY29uZmlnLnR5cGUgPT0gJ2JhY2snKSB7XHJcblx0XHRyZXR1cm4gdW5pLm5hdmlnYXRlQmFjayh7XHJcblx0XHRcdGRlbHRhOiBwYXJzZUludChjb25maWcuZGVsdGEgPyBjb25maWcuZGVsdGEgOiB0aGlzLmRlbHRhKVxyXG5cdFx0fSk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCByb3V0ZTtcclxuIiwiZnVuY3Rpb24gdGltZUZvcm1hdCh0aW1lc3RhbXAgPSBudWxsLCBmbXQgPSAneXl5eS1tbS1kZCcpIHtcclxuXHQvLyDlhbbku5bmm7TlpJrmmK/moLzlvI/ljJbmnInlpoLkuIs6XHJcblx0Ly8geXl5eTptbTpkZHx5eXl5Om1tfHl5eXnlubRtbeaciGRk5pelfHl5eXnlubRtbeaciGRk5pelIGho5pe2TU3liIbnrYks5Y+v6Ieq5a6a5LmJ57uE5ZCIXHJcblx0dGltZXN0YW1wID0gcGFyc2VJbnQodGltZXN0YW1wKTtcclxuXHQvLyDlpoLmnpzkuLpudWxsLOWImeagvOW8j+WMluW9k+WJjeaXtumXtFxyXG5cdGlmICghdGltZXN0YW1wKSB0aW1lc3RhbXAgPSBOdW1iZXIobmV3IERhdGUoKSk7XHJcblx0Ly8g5Yik5pat55So5oi36L6T5YWl55qE5pe26Ze05oiz5piv56eS6L+Y5piv5q+r56eSLOS4gOiIrOWJjeerr2pz6I635Y+W55qE5pe26Ze05oiz5piv5q+r56eSKDEz5L2NKSzlkI7nq6/kvKDov4fmnaXnmoTkuLrnp5IoMTDkvY0pXHJcblx0aWYgKHRpbWVzdGFtcC50b1N0cmluZygpLmxlbmd0aCA9PSAxMCkgdGltZXN0YW1wICo9IDEwMDA7XHJcblx0bGV0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApO1xyXG5cdGxldCByZXQ7XHJcblx0bGV0IG9wdCA9IHtcclxuXHRcdFwieStcIjogZGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCksIC8vIOW5tFxyXG5cdFx0XCJtK1wiOiAoZGF0ZS5nZXRNb250aCgpICsgMSkudG9TdHJpbmcoKSwgLy8g5pyIXHJcblx0XHRcImQrXCI6IGRhdGUuZ2V0RGF0ZSgpLnRvU3RyaW5nKCksIC8vIOaXpVxyXG5cdFx0XCJoK1wiOiBkYXRlLmdldEhvdXJzKCkudG9TdHJpbmcoKSwgLy8g5pe2XHJcblx0XHRcIk0rXCI6IGRhdGUuZ2V0TWludXRlcygpLnRvU3RyaW5nKCksIC8vIOWIhlxyXG5cdFx0XCJzK1wiOiBkYXRlLmdldFNlY29uZHMoKS50b1N0cmluZygpIC8vIOenklxyXG5cdFx0Ly8g5pyJ5YW25LuW5qC85byP5YyW5a2X56ym6ZyA5rGC5Y+v5Lul57un57ut5re75Yqg77yM5b+F6aG76L2s5YyW5oiQ5a2X56ym5LiyXHJcblx0fTtcclxuXHRmb3IgKGxldCBrIGluIG9wdCkge1xyXG5cdFx0cmV0ID0gbmV3IFJlZ0V4cChcIihcIiArIGsgKyBcIilcIikuZXhlYyhmbXQpO1xyXG5cdFx0aWYgKHJldCkge1xyXG5cdFx0XHRmbXQgPSBmbXQucmVwbGFjZShyZXRbMV0sIChyZXRbMV0ubGVuZ3RoID09IDEpID8gKG9wdFtrXSkgOiAob3B0W2tdLnBhZFN0YXJ0KHJldFsxXS5sZW5ndGgsIFwiMFwiKSkpXHJcblx0XHR9O1xyXG5cdH07XHJcblx0cmV0dXJuIGZtdDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgdGltZUZvcm1hdFxyXG4iLCJpbXBvcnQgdGltZUZvcm1hdCBmcm9tICcuLi8uLi9saWJzL2Z1bmN0aW9uL3RpbWVGb3JtYXQuanMnO1xyXG5cclxuLyoqXHJcbiAqIOaXtumXtOaIs+i9rOS4uuWkmuS5heS5i+WJjVxyXG4gKiBAcGFyYW0gU3RyaW5nIHRpbWVzdGFtcCDml7bpl7TmiLNcclxuICogQHBhcmFtIFN0cmluZyB8IEJvb2xlYW4gZm9ybWF0IOWmguaenOS4uuaXtumXtOagvOW8j+Wtl+espuS4su+8jOi2heWHuuS4gOWumuaXtumXtOiMg+WbtO+8jOi/lOWbnuWbuuWumueahOaXtumXtOagvOW8j++8m1xyXG4gKiDlpoLmnpzkuLrluIPlsJTlgLxmYWxzZe+8jOaXoOiuuuS7gOS5iOaXtumXtO+8jOmDvei/lOWbnuWkmuS5heS7peWJjeeahOagvOW8j1xyXG4gKi9cclxuZnVuY3Rpb24gdGltZUZyb20odGltZXN0YW1wID0gbnVsbCwgZm9ybWF0ID0gJ3l5eXktbW0tZGQnKSB7XHJcblx0aWYgKHRpbWVzdGFtcCA9PSBudWxsKSB0aW1lc3RhbXAgPSBOdW1iZXIobmV3IERhdGUoKSk7XHJcblx0dGltZXN0YW1wID0gcGFyc2VJbnQodGltZXN0YW1wKTtcclxuXHQvLyDliKTmlq3nlKjmiLfovpPlhaXnmoTml7bpl7TmiLPmmK/np5Lov5jmmK/mr6vnp5Is5LiA6Iis5YmN56uvanPojrflj5bnmoTml7bpl7TmiLPmmK/mr6vnp5IoMTPkvY0pLOWQjuerr+S8oOi/h+adpeeahOS4uuenkigxMOS9jSlcclxuXHRpZiAodGltZXN0YW1wLnRvU3RyaW5nKCkubGVuZ3RoID09IDEwKSB0aW1lc3RhbXAgKj0gMTAwMDtcclxuXHR2YXIgdGltZXIgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gdGltZXN0YW1wO1xyXG5cdHRpbWVyID0gcGFyc2VJbnQodGltZXIgLyAxMDAwKTtcclxuXHQvLyDlpoLmnpzlsI/kuo415YiG6ZKfLOWImei/lOWbnlwi5Yia5YiaXCIs5YW25LuW5Lul5q2k57G75o6oXHJcblx0bGV0IHRpcHMgPSAnJztcclxuXHRzd2l0Y2ggKHRydWUpIHtcclxuXHRcdGNhc2UgdGltZXIgPCAzMDA6XHJcblx0XHRcdHRpcHMgPSAn5Yia5YiaJztcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIHRpbWVyID49IDMwMCAmJiB0aW1lciA8IDM2MDA6XHJcblx0XHRcdHRpcHMgPSBwYXJzZUludCh0aW1lciAvIDYwKSArICfliIbpkp/liY0nO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgdGltZXIgPj0gMzYwMCAmJiB0aW1lciA8IDg2NDAwOlxyXG5cdFx0XHR0aXBzID0gcGFyc2VJbnQodGltZXIgLyAzNjAwKSArICflsI/ml7bliY0nO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgdGltZXIgPj0gODY0MDAgJiYgdGltZXIgPCAyNTkyMDAwOlxyXG5cdFx0XHR0aXBzID0gcGFyc2VJbnQodGltZXIgLyA4NjQwMCkgKyAn5aSp5YmNJztcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHQvLyDlpoLmnpxmb3JtYXTkuLpmYWxzZe+8jOWImeaXoOiuuuS7gOS5iOaXtumXtOaIs++8jOmDveaYvuekunh45LmL5YmNXHJcblx0XHRcdGlmKGZvcm1hdCA9PT0gZmFsc2UpIHtcclxuXHRcdFx0XHRpZih0aW1lciA+PSAyNTkyMDAwICYmIHRpbWVyIDwgMzY1ICogODY0MDApIHtcclxuXHRcdFx0XHRcdHRpcHMgPSBwYXJzZUludCh0aW1lciAvICg4NjQwMCAqIDMwKSkgKyAn5Liq5pyI5YmNJztcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGlwcyA9IHBhcnNlSW50KHRpbWVyIC8gKDg2NDAwICogMzY1KSkgKyAn5bm05YmNJztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGlwcyA9IHRpbWVGb3JtYXQodGltZXN0YW1wLCBmb3JtYXQpO1xyXG5cdFx0XHR9XHJcblx0fVxyXG5cdHJldHVybiB0aXBzO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB0aW1lRnJvbTtcclxuIiwiLyoqXG4gKiDmsYLkuKTkuKrpopzoibLkuYvpl7TnmoTmuJDlj5jlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGFydENvbG9yIOW8gOWni+eahOminOiJslxuICogQHBhcmFtIHtzdHJpbmd9IGVuZENvbG9yIOe7k+adn+eahOminOiJslxuICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAg6aKc6Imy562J5YiG55qE5Lu96aKdXG4gKiAqL1xuZnVuY3Rpb24gY29sb3JHcmFkaWVudChzdGFydENvbG9yID0gJ3JnYigwLCAwLCAwKScsIGVuZENvbG9yID0gJ3JnYigyNTUsIDI1NSwgMjU1KScsIHN0ZXAgPSAxMCkge1xuXHRsZXQgc3RhcnRSR0IgPSBoZXhUb1JnYihzdGFydENvbG9yLCBmYWxzZSk7IC8v6L2s5o2i5Li6cmdi5pWw57uE5qih5byPXG5cdGxldCBzdGFydFIgPSBzdGFydFJHQlswXTtcblx0bGV0IHN0YXJ0RyA9IHN0YXJ0UkdCWzFdO1xuXHRsZXQgc3RhcnRCID0gc3RhcnRSR0JbMl07XG5cblx0bGV0IGVuZFJHQiA9IGhleFRvUmdiKGVuZENvbG9yLCBmYWxzZSk7XG5cdGxldCBlbmRSID0gZW5kUkdCWzBdO1xuXHRsZXQgZW5kRyA9IGVuZFJHQlsxXTtcblx0bGV0IGVuZEIgPSBlbmRSR0JbMl07XG5cblx0bGV0IHNSID0gKGVuZFIgLSBzdGFydFIpIC8gc3RlcDsgLy/mgLvlt67lgLxcblx0bGV0IHNHID0gKGVuZEcgLSBzdGFydEcpIC8gc3RlcDtcblx0bGV0IHNCID0gKGVuZEIgLSBzdGFydEIpIC8gc3RlcDtcblx0bGV0IGNvbG9yQXJyID0gW107XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc3RlcDsgaSsrKSB7XG5cdFx0Ly/orqHnrpfmr4/kuIDmraXnmoRoZXjlgLwgXG5cdFx0bGV0IGhleCA9IHJnYlRvSGV4KCdyZ2IoJyArIE1hdGgucm91bmQoKHNSICogaSArIHN0YXJ0UikpICsgJywnICsgTWF0aC5yb3VuZCgoc0cgKiBpICsgc3RhcnRHKSkgKyAnLCcgKyBNYXRoLnJvdW5kKChzQiAqXG5cdFx0XHRpICsgc3RhcnRCKSkgKyAnKScpO1xuXHRcdGNvbG9yQXJyLnB1c2goaGV4KTtcblx0fVxuXHRyZXR1cm4gY29sb3JBcnI7XG59XG5cbi8vIOWwhmhleOihqOekuuaWueW8j+i9rOaNouS4unJnYuihqOekuuaWueW8jyjov5nph4zov5Tlm55yZ2LmlbDnu4TmqKHlvI8pXG5mdW5jdGlvbiBoZXhUb1JnYihzQ29sb3IsIHN0ciA9IHRydWUpIHtcblx0bGV0IHJlZyA9IC9eIyhbMC05YS1mQS1mXXszfXxbMC05YS1mQS1mXXs2fSkkLztcblx0c0NvbG9yID0gc0NvbG9yLnRvTG93ZXJDYXNlKCk7XG5cdGlmIChzQ29sb3IgJiYgcmVnLnRlc3Qoc0NvbG9yKSkge1xuXHRcdGlmIChzQ29sb3IubGVuZ3RoID09PSA0KSB7XG5cdFx0XHRsZXQgc0NvbG9yTmV3ID0gXCIjXCI7XG5cdFx0XHRmb3IgKGxldCBpID0gMTsgaSA8IDQ7IGkgKz0gMSkge1xuXHRcdFx0XHRzQ29sb3JOZXcgKz0gc0NvbG9yLnNsaWNlKGksIGkgKyAxKS5jb25jYXQoc0NvbG9yLnNsaWNlKGksIGkgKyAxKSk7XG5cdFx0XHR9XG5cdFx0XHRzQ29sb3IgPSBzQ29sb3JOZXc7XG5cdFx0fVxuXHRcdC8v5aSE55CG5YWt5L2N55qE6aKc6Imy5YC8XG5cdFx0bGV0IHNDb2xvckNoYW5nZSA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgNzsgaSArPSAyKSB7XG5cdFx0XHRzQ29sb3JDaGFuZ2UucHVzaChwYXJzZUludChcIjB4XCIgKyBzQ29sb3Iuc2xpY2UoaSwgaSArIDIpKSk7XG5cdFx0fVxuXHRcdGlmKCFzdHIpIHtcblx0XHRcdHJldHVybiBzQ29sb3JDaGFuZ2U7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBgcmdiKCR7c0NvbG9yQ2hhbmdlWzBdfSwke3NDb2xvckNoYW5nZVsxXX0sJHtzQ29sb3JDaGFuZ2VbMl19KWA7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKC9eKHJnYnxSR0IpLy50ZXN0KHNDb2xvcikpIHtcblx0XHRsZXQgYXJyID0gc0NvbG9yLnJlcGxhY2UoLyg/OlxcKHxcXCl8cmdifFJHQikqL2csIFwiXCIpLnNwbGl0KFwiLFwiKVxuXHRcdHJldHVybiBhcnIubWFwKHZhbCA9PiBOdW1iZXIodmFsKSk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHNDb2xvcjtcblx0fVxufTtcblxuLy8g5bCGcmdi6KGo56S65pa55byP6L2s5o2i5Li6aGV46KGo56S65pa55byPXG5mdW5jdGlvbiByZ2JUb0hleChyZ2IpIHtcblx0bGV0IF90aGlzID0gcmdiO1xuXHRsZXQgcmVnID0gL14jKFswLTlhLWZBLWZdezN9fFswLTlhLWZBLWZdezZ9KSQvO1xuXHRpZiAoL14ocmdifFJHQikvLnRlc3QoX3RoaXMpKSB7XG5cdFx0bGV0IGFDb2xvciA9IF90aGlzLnJlcGxhY2UoLyg/OlxcKHxcXCl8cmdifFJHQikqL2csIFwiXCIpLnNwbGl0KFwiLFwiKTtcblx0XHRsZXQgc3RySGV4ID0gXCIjXCI7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhQ29sb3IubGVuZ3RoOyBpKyspIHtcblx0XHRcdGxldCBoZXggPSBOdW1iZXIoYUNvbG9yW2ldKS50b1N0cmluZygxNik7XG5cdFx0XHRoZXggPSBTdHJpbmcoaGV4KS5sZW5ndGggPT0gMSA/IDAgKyAnJyArIGhleCA6IGhleDsgLy8g5L+d6K+B5q+P5Liqcmdi55qE5YC85Li6MuS9jVxuXHRcdFx0aWYgKGhleCA9PT0gXCIwXCIpIHtcblx0XHRcdFx0aGV4ICs9IGhleDtcblx0XHRcdH1cblx0XHRcdHN0ckhleCArPSBoZXg7XG5cdFx0fVxuXHRcdGlmIChzdHJIZXgubGVuZ3RoICE9PSA3KSB7XG5cdFx0XHRzdHJIZXggPSBfdGhpcztcblx0XHR9XG5cdFx0cmV0dXJuIHN0ckhleDtcblx0fSBlbHNlIGlmIChyZWcudGVzdChfdGhpcykpIHtcblx0XHRsZXQgYU51bSA9IF90aGlzLnJlcGxhY2UoLyMvLCBcIlwiKS5zcGxpdChcIlwiKTtcblx0XHRpZiAoYU51bS5sZW5ndGggPT09IDYpIHtcblx0XHRcdHJldHVybiBfdGhpcztcblx0XHR9IGVsc2UgaWYgKGFOdW0ubGVuZ3RoID09PSAzKSB7XG5cdFx0XHRsZXQgbnVtSGV4ID0gXCIjXCI7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFOdW0ubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdFx0bnVtSGV4ICs9IChhTnVtW2ldICsgYU51bVtpXSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVtSGV4O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gX3RoaXM7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuXHRjb2xvckdyYWRpZW50LFxuXHRoZXhUb1JnYixcblx0cmdiVG9IZXhcbn0iLCIvKipcclxuICog5pys566X5rOV5p2l5rqQ5LqO566A5Lmm5byA5rqQ5Luj56CB77yM6K+m6KeB77yaaHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mZGJmMjkzZDBhODVcclxuICog5YWo5bGA5ZSv5LiA5qCH6K+G56ym77yIdXVpZO+8jEdsb2JhbGx5IFVuaXF1ZSBJZGVudGlmaWVy77yJLOS5n+ensOS9nCB1dWlkKFVuaXZlcnNhbGx5IFVuaXF1ZSBJRGVudGlmaWVyKSBcclxuICog5LiA6Iis55So5LqO5aSa5Liq57uE5Lu25LmL6Ze0LOe7meWug+S4gOS4quWUr+S4gOeahOagh+ivhuespizmiJbogIV2LWZvcuW+queOr+eahOaXtuWAmSzlpoLmnpzkvb/nlKjmlbDnu4TnmoRpbmRleOWPr+iDveS8muWvvOiHtOabtOaWsOWIl+ihqOWHuueOsOmXrumimFxyXG4gKiDmnIDlj6/og73nmoTmg4XlhrXmmK/lt6bmu5HliKDpmaRpdGVt5oiW6ICF5a+55p+Q5p2h5L+h5oGv5rWBXCLkuI3llpzmrKJcIuW5tuWOu+aOieWug+eahOaXtuWAmSzkvJrlr7zoh7Tnu4Tku7blhoXnmoTmlbDmja7lj6/og73lh7rnjrDplJnkubFcclxuICogdi1mb3LnmoTml7blgJks5o6o6I2Q5L2/55So5ZCO56uv6L+U5Zue55qEaWTogIzkuI3mmK/lvqrnjq/nmoRpbmRleFxyXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuIHV1aWTnmoTplb/luqZcclxuICogQHBhcmFtIHtCb29sZWFufSBmaXJzdFUg5bCG6L+U5Zue55qE6aaW5a2X5q+N572u5Li6XCJ1XCJcclxuICogQHBhcmFtIHtOdWJtZXJ9IHJhZGl4IOeUn+aIkHV1aWTnmoTln7rmlbAo5oSP5ZGz552A6L+U5Zue55qE5a2X56ym5Liy6YO95piv6L+Z5Liq5Z+65pWwKSwyLeS6jOi/m+WItiw4LeWFq+i/m+WItiwxMC3ljYHov5vliLYsMTYt5Y2B5YWt6L+b5Yi2XHJcbiAqL1xyXG5mdW5jdGlvbiBndWlkKGxlbiA9IDMyLCBmaXJzdFUgPSB0cnVlLCByYWRpeCA9IG51bGwpIHtcclxuXHRsZXQgY2hhcnMgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLnNwbGl0KCcnKTtcclxuXHRsZXQgdXVpZCA9IFtdO1xyXG5cdHJhZGl4ID0gcmFkaXggfHwgY2hhcnMubGVuZ3RoO1xyXG5cclxuXHRpZiAobGVuKSB7XHJcblx0XHQvLyDlpoLmnpzmjIflrpp1dWlk6ZW/5bqmLOWPquaYr+WPlumaj+acuueahOWtl+espiwwfHjkuLrkvY3ov5Dnrpcs6IO95Y675o6JeOeahOWwj+aVsOS9jSzov5Tlm57mlbTmlbDkvY1cclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHV1aWRbaV0gPSBjaGFyc1swIHwgTWF0aC5yYW5kb20oKSAqIHJhZGl4XTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0bGV0IHI7XHJcblx0XHQvLyByZmM0MTIy5qCH5YeG6KaB5rGC6L+U5Zue55qEdXVpZOS4rSzmn5DkupvkvY3kuLrlm7rlrprnmoTlrZfnrKZcclxuXHRcdHV1aWRbOF0gPSB1dWlkWzEzXSA9IHV1aWRbMThdID0gdXVpZFsyM10gPSAnLSc7XHJcblx0XHR1dWlkWzE0XSA9ICc0JztcclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDM2OyBpKyspIHtcclxuXHRcdFx0aWYgKCF1dWlkW2ldKSB7XHJcblx0XHRcdFx0ciA9IDAgfCBNYXRoLnJhbmRvbSgpICogMTY7XHJcblx0XHRcdFx0dXVpZFtpXSA9IGNoYXJzWyhpID09IDE5KSA/IChyICYgMHgzKSB8IDB4OCA6IHJdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdC8vIOenu+mZpOesrOS4gOS4quWtl+espizlubbnlKh15pu/5LujLOWboOS4uuesrOS4gOS4quWtl+espuS4uuaVsOWAvOaXtizor6VndXVpZOS4jeiDveeUqOS9nGlk5oiW6ICFY2xhc3NcclxuXHRpZiAoZmlyc3RVKSB7XHJcblx0XHR1dWlkLnNoaWZ0KCk7XHJcblx0XHRyZXR1cm4gJ3UnICsgdXVpZC5qb2luKCcnKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIHV1aWQuam9pbignJyk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBndWlkO1xyXG4iLCIvLyDkuLrkuoborqnnlKjmiLfog73lpJ/oh6rlrprkuYnkuLvpopjvvIzkvJrpgJDmraXlvIPnlKjmraTmlofku7bvvIzlkITpopzoibLpgJrov4djc3Pmj5DkvptcclxuLy8g5Li65LqG57uZ5p+Q5Lqb54m55q6K5Zy65pmv5L2/55So5ZKM5ZCR5ZCO5YW85a6577yM5peg6ZyA5Yig6Zmk5q2k5paH5Lu2KDIwMjAtMDYtMjApXHJcbmxldCBjb2xvciA9IHtcclxuXHRwcmltYXJ5OiBcIiMyOTc5ZmZcIixcclxuXHRwcmltYXJ5RGFyazogXCIjMmI4NWU0XCIsXHJcblx0cHJpbWFyeURpc2FibGVkOiBcIiNhMGNmZmZcIixcclxuXHRwcmltYXJ5TGlnaHQ6IFwiI2VjZjVmZlwiLFxyXG5cdGJnQ29sb3I6IFwiI2YzZjRmNlwiLFxyXG5cdFxyXG5cdGluZm86IFwiIzkwOTM5OVwiLFxyXG5cdGluZm9EYXJrOiBcIiM4Mjg0OGFcIixcclxuXHRpbmZvRGlzYWJsZWQ6IFwiI2M4YzljY1wiLFxyXG5cdGluZm9MaWdodDogXCIjZjRmNGY1XCIsXHJcblx0XHJcblx0d2FybmluZzogXCIjZmY5OTAwXCIsXHJcblx0d2FybmluZ0Rhcms6IFwiI2YyOTEwMFwiLFxyXG5cdHdhcm5pbmdEaXNhYmxlZDogXCIjZmNiZDcxXCIsXHJcblx0d2FybmluZ0xpZ2h0OiBcIiNmZGY2ZWNcIixcclxuXHRcclxuXHRlcnJvcjogXCIjZmEzNTM0XCIsXHJcblx0ZXJyb3JEYXJrOiBcIiNkZDYxNjFcIixcclxuXHRlcnJvckRpc2FibGVkOiBcIiNmYWI2YjZcIixcclxuXHRlcnJvckxpZ2h0OiBcIiNmZWYwZjBcIixcclxuXHRcclxuXHRzdWNjZXNzOiBcIiMxOWJlNmJcIixcclxuXHRzdWNjZXNzRGFyazogXCIjMThiNTY2XCIsXHJcblx0c3VjY2Vzc0Rpc2FibGVkOiBcIiM3MWQ1YTFcIixcclxuXHRzdWNjZXNzTGlnaHQ6IFwiI2RiZjFlMVwiLFxyXG5cdFxyXG5cdG1haW5Db2xvcjogXCIjMzAzMTMzXCIsXHJcblx0Y29udGVudENvbG9yOiBcIiM2MDYyNjZcIixcclxuXHR0aXBzQ29sb3I6IFwiIzkwOTM5OVwiLFxyXG5cdGxpZ2h0Q29sb3I6IFwiI2MwYzRjY1wiLFxyXG5cdGJvcmRlckNvbG9yOiBcIiNlNGU3ZWRcIlxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb2xvcjsiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKipcclxuICog5qC55o2u5Li76aKYdHlwZeWAvCzojrflj5blr7nlupTnmoTlm77moIdcclxuICogQHBhcmFtIFN0cmluZyB0eXBlIOS4u+mimOWQjeensCxwcmltYXJ5fGluZm98ZXJyb3J8d2FybmluZ3xzdWNjZXNzXHJcbiAqIEBwYXJhbSBTdHJpbmcgZmlsbCDmmK/lkKbkvb/nlKhmaWxs5aGr5YWF5a6e5L2T55qE5Zu+5qCHICBcclxuICovXHJcbmZ1bmN0aW9uIHR5cGUyaWNvbih0eXBlID0gJ3N1Y2Nlc3MnLCBmaWxsID0gZmFsc2UpIHtcclxuXHQvLyDlpoLmnpzpnZ7pooTnva7lgLws6buY6K6k5Li6c3VjY2Vzc1xyXG5cdGlmIChbJ3ByaW1hcnknLCAnaW5mbycsICdlcnJvcicsICd3YXJuaW5nJywgJ3N1Y2Nlc3MnXS5pbmRleE9mKHR5cGUpID09IC0xKSB0eXBlID0gJ3N1Y2Nlc3MnO1xyXG5cdGxldCBpY29uTmFtZSA9ICcnO1xyXG5cdC8vIOebruWJjSgyMDE5LTEyLTEyKSxpbmZv5ZKMcHJpbWFyeeS9v+eUqOWQjOS4gOS4quWbvuagh1xyXG5cdHN3aXRjaCAodHlwZSkge1xyXG5cdFx0Y2FzZSAncHJpbWFyeSc6XHJcblx0XHRcdGljb25OYW1lID0gJ2luZm8tY2lyY2xlJztcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICdpbmZvJzpcclxuXHRcdFx0aWNvbk5hbWUgPSAnaW5mby1jaXJjbGUnO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ2Vycm9yJzpcclxuXHRcdFx0aWNvbk5hbWUgPSAnY2xvc2UtY2lyY2xlJztcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICd3YXJuaW5nJzpcclxuXHRcdFx0aWNvbk5hbWUgPSAnZXJyb3ItY2lyY2xlJztcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICdzdWNjZXNzJzpcclxuXHRcdFx0aWNvbk5hbWUgPSAnY2hlY2ttYXJrLWNpcmNsZSc7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0aWNvbk5hbWUgPSAnY2hlY2ttYXJrLWNpcmNsZSc7XHJcblx0fVxyXG5cdC8vIOaYr+WQpuaYr+WunuS9k+exu+WeiyzliqDkuIotZmlsbCzlnKhpY29u57uE5Lu25bqT5LitLOWunuS9k+eahOexu+WQjeaYr+WQjumdouWKoC1maWxs55qEXHJcblx0aWYgKGZpbGwpIGljb25OYW1lICs9ICctZmlsbCc7XHJcblx0cmV0dXJuIGljb25OYW1lO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB0eXBlMmljb25cclxuIiwiLy8g5omT5Lmx5pWw57uEXHJcbmZ1bmN0aW9uIHJhbmRvbUFycmF5KGFycmF5ID0gW10pIHtcclxuXHQvLyDljp/nkIbmmK9zb3J05o6S5bqPLE1hdGgucmFuZG9tKCnkuqfnlJ8wPD0geCA8IDHkuYvpl7TnmoTmlbAs5Lya5a+86Ie0eC0wLjA15aSn5LqO5oiW6ICF5bCP5LqOMFxyXG5cdHJldHVybiBhcnJheS5zb3J0KCgpID0+IE1hdGgucmFuZG9tKCkgLSAwLjUpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCByYW5kb21BcnJheVxyXG4iLCJpbXBvcnQgdmFsaWRhdGlvbiBmcm9tICcuL3Rlc3QuanMnO1xyXG5cclxuLy8g5re75Yqg5Y2V5L2N77yM5aaC5p6c5pyJcnB477yMJe+8jHB4562J5Y2V5L2N57uT5bC+5oiW6ICF5YC85Li6YXV0b++8jOebtOaOpei/lOWbnu+8jOWQpuWImeWKoOS4inJweOWNleS9jee7k+WwvlxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRVbml0KHZhbHVlID0gJ2F1dG8nLCB1bml0ID0gJ3JweCcpIHtcclxuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcclxuXHQvLyDnlKh1Vmlld+WGhee9rumqjOivgeinhOWImeS4reeahG51bWJlcuWIpOaWreaYr+WQpuS4uuaVsOWAvFxyXG4gICAgcmV0dXJuIHZhbGlkYXRpb24ubnVtYmVyKHZhbHVlKSA/IGAke3ZhbHVlfSR7dW5pdH1gIDogdmFsdWU7XHJcbn0iLCJmdW5jdGlvbiByYW5kb20obWluLCBtYXgpIHtcclxuXHRpZiAobWluID49IDAgJiYgbWF4ID4gMCAmJiBtYXggPj0gbWluKSB7XHJcblx0XHRsZXQgZ2FiID0gbWF4IC0gbWluICsgMTtcclxuXHRcdHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBnYWIgKyBtaW4pO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRyZXR1cm4gMDtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJhbmRvbTtcclxuIiwiZnVuY3Rpb24gdHJpbShzdHIsIHBvcyA9ICdib3RoJykge1xyXG5cdGlmIChwb3MgPT0gJ2JvdGgnKSB7XHJcblx0XHRyZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csIFwiXCIpO1xyXG5cdH0gZWxzZSBpZiAocG9zID09IFwibGVmdFwiKSB7XHJcblx0XHRyZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpO1xyXG5cdH0gZWxzZSBpZiAocG9zID09ICdyaWdodCcpIHtcclxuXHRcdHJldHVybiBzdHIucmVwbGFjZSgvKFxccyokKS9nLCBcIlwiKTtcclxuXHR9IGVsc2UgaWYgKHBvcyA9PSAnYWxsJykge1xyXG5cdFx0cmV0dXJuIHN0ci5yZXBsYWNlKC9cXHMrL2csIFwiXCIpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRyZXR1cm4gc3RyO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgdHJpbVxyXG4iLCJmdW5jdGlvbiB0b2FzdCh0aXRsZSwgZHVyYXRpb24gPSAxNTAwKSB7XHJcblx0dW5pLnNob3dUb2FzdCh7XHJcblx0XHR0aXRsZTogdGl0bGUsXHJcblx0XHRpY29uOiAnbm9uZScsXHJcblx0XHRkdXJhdGlvbjogZHVyYXRpb25cclxuXHR9KVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB0b2FzdFxyXG4iLCIvLyDojrflj5bniLbnu4Tku7bnmoTlj4LmlbDvvIzlm6DkuLrmlK/ku5jlrp3lsI/nqIvluo/kuI3mlK/mjIFwcm92aWRlL2luamVjdOeahOWGmeazlVxyXG4vLyB0aGlzLiRwYXJlbnTlnKjpnZ5INeS4re+8jOWPr+S7peWHhuehruiOt+WPluWIsOeItue7hOS7tu+8jOS9huaYr+WcqEg15Lit77yM6ZyA6KaB5aSa5qyhdGhpcy4kcGFyZW50LiRwYXJlbnQueHh4XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBhcmVudChuYW1lLCBrZXlzKSB7XHJcblx0bGV0IHBhcmVudCA9IHRoaXMuJHBhcmVudDtcclxuXHQvLyDpgJrov4d3aGlsZeWOhumBje+8jOi/memHjOS4u+imgeaYr+S4uuS6hkg16ZyA6KaB5aSa5bGC6Kej5p6Q55qE6Zeu6aKYXHJcblx0d2hpbGUgKHBhcmVudCkge1xyXG5cdFx0Ly8g54i257uE5Lu2XHJcblx0XHRpZiAocGFyZW50LiRvcHRpb25zLm5hbWUgIT09IG5hbWUpIHtcclxuXHRcdFx0Ly8g5aaC5p6c57uE5Lu255qEbmFtZeS4jeebuOetie+8jOe7p+e7reS4iuS4gOe6p+Wvu+aJvlxyXG5cdFx0XHRwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGxldCBkYXRhID0ge307XHJcblx0XHRcdC8vIOWIpOaWrWtleXPmmK/lkKbmlbDnu4TvvIzlpoLmnpzkvKDov4fmnaXnmoTmmK/kuIDkuKrmlbDnu4TvvIzpgqPkuYjnm7TmjqXkvb/nlKjmlbDnu4TlhYPntKDlgLzlvZPlgZrplK7lgLzljrvniLbnu4Tku7blr7vmib5cclxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShrZXlzKSkge1xyXG5cdFx0XHRcdGtleXMubWFwKHZhbCA9PiB7XHJcblx0XHRcdFx0XHRkYXRhW3ZhbF0gPSBwYXJlbnRbdmFsXSA/IHBhcmVudFt2YWxdIDogJyc7XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyDljobpgY3kvKDov4fmnaXnmoTlr7nosaHlj4LmlbBcclxuXHRcdFx0XHRmb3IobGV0IGkgaW4ga2V5cykge1xyXG5cdFx0XHRcdFx0Ly8g5aaC5p6c5a2Q57uE5Lu25pyJ5q2k5YC85YiZ55So77yM5peg5q2k5YC85YiZ55So54i257uE5Lu255qE5YC8XHJcblx0XHRcdFx0XHQvLyDliKTmlq3mmK/lkKbnqbrmlbDnu4TvvIzlpoLmnpzmmK/vvIzliJnnlKjniLbnu4Tku7bnmoTlgLzvvIzlkKbliJnnlKjlrZDnu4Tku7bnmoTlgLxcclxuXHRcdFx0XHRcdGlmKEFycmF5LmlzQXJyYXkoa2V5c1tpXSkpIHtcclxuXHRcdFx0XHRcdFx0aWYoa2V5c1tpXS5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0XHRkYXRhW2ldID0ga2V5c1tpXTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRkYXRhW2ldID0gcGFyZW50W2ldO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYoa2V5c1tpXS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XHJcblx0XHRcdFx0XHRcdC8vIOWIpOaWreaYr+WQpuWvueixoe+8jOWmguaenOaYr+Wvueixoe+8jOS4lOacieWxnuaAp++8jOmCo+S5iOS9v+eUqOWtkOe7hOS7tueahOWAvO+8jOWQpuWImeS9v+eUqOeItue7hOS7tueahOWAvFxyXG5cdFx0XHRcdFx0XHRpZihPYmplY3Qua2V5cyhrZXlzW2ldKS5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0XHRkYXRhW2ldID0ga2V5c1tpXTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRkYXRhW2ldID0gcGFyZW50W2ldO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHQvLyDlj6ropoHlrZDnu4Tku7bmnInkvKDlgLzvvIzljbPkvb/mmK9mYWxzZeWAvO+8jOS5n+aYr+KAnOS8oOWAvOKAneS6hu+8jOS5n+mcgOimgeimhueblueItue7hOS7tueahOWQjOWQjeWPguaVsFxyXG5cdFx0XHRcdFx0XHRkYXRhW2ldID0gKGtleXNbaV0gfHwga2V5c1tpXSA9PT0gZmFsc2UpID8ga2V5c1tpXSA6IHBhcmVudFtpXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4ge307XHJcbn0iLCIvLyDojrflj5bniLbnu4Tku7bnmoTlj4LmlbDvvIzlm6DkuLrmlK/ku5jlrp3lsI/nqIvluo/kuI3mlK/mjIFwcm92aWRlL2luamVjdOeahOWGmeazlVxyXG4vLyB0aGlzLiRwYXJlbnTlnKjpnZ5INeS4re+8jOWPr+S7peWHhuehruiOt+WPluWIsOeItue7hOS7tu+8jOS9huaYr+WcqEg15Lit77yM6ZyA6KaB5aSa5qyhdGhpcy4kcGFyZW50LiRwYXJlbnQueHh4XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICRwYXJlbnQobmFtZSwga2V5cykge1xyXG5cdGxldCBwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7XHJcblx0Ly8g6YCa6L+Hd2hpbGXljobpgY3vvIzov5nph4zkuLvopoHmmK/kuLrkuoZINemcgOimgeWkmuWxguino+aekOeahOmXrumimFxyXG5cdHdoaWxlIChwYXJlbnQpIHtcclxuXHRcdC8vIOeItue7hOS7tlxyXG5cdFx0aWYgKHBhcmVudC4kb3B0aW9ucy5uYW1lICE9PSBuYW1lKSB7XHJcblx0XHRcdC8vIOWmguaenOe7hOS7tueahG5hbWXkuI3nm7jnrYnvvIznu6fnu63kuIrkuIDnuqflr7vmib5cclxuXHRcdFx0cGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gcGFyZW50O1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gZmFsc2U7XHJcbn0iLCIvLyDmraTniYjmnKzlj5HluIPkuo4yMDIwLTA3LTIxXHJcbmxldCB2ZXJzaW9uID0gJzEuNS40JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHR2OiB2ZXJzaW9uLFxyXG5cdHZlcnNpb246IHZlcnNpb24sXHJcblx0Ly8g5Li76aKY5ZCN56ewXHJcblx0dHlwZTogW1xyXG5cdFx0J3ByaW1hcnknLFxyXG5cdFx0J3N1Y2Nlc3MnLFxyXG5cdFx0J2luZm8nLFxyXG5cdFx0J2Vycm9yJyxcclxuXHRcdCd3YXJuaW5nJ1xyXG5cdF1cclxufSIsIi8vIHVuaWFwcOWcqEg15Lit5ZCEQVBJ55qEei1pbmRleOWAvOWmguS4i++8mlxyXG4vKipcclxuICogYWN0aW9uc2hlZXQ6IDk5OVxyXG4gKiBtb2RhbDogOTk5XHJcbiAqIG5hdmlnYXRlOiA5OThcclxuICogdGFiYmFyOiA5OThcclxuICogdG9hc3Q6IDk5OVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHR0b2FzdDogMTAwOTAsXHJcblx0bm9OZXR3b3JrOiAxMDA4MCxcclxuXHQvLyBwb3B1cOWMheWQq3BvcHVw77yMYWN0aW9uc2hlZXTvvIxrZXlib2FyZO+8jHBpY2tlcueahOWAvFxyXG5cdHBvcHVwOiAxMDA3NSxcclxuXHRtYXNrOiAxMDA3MCxcclxuXHRuYXZiYXI6IDk4MCxcclxuXHR0b3BUaXBzOiA5NzUsXHJcblx0c3RpY2t5OiA5NzAsXHJcblx0aW5kZXhMaXN0U3RpY2t5OiA5NjUsXHJcbn0iLCJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi4vcGFja2FnZS5qc29uJztcclxuXHJcbmNvbnN0IFNUQVRfVkVSU0lPTiA9IHZlcnNpb247XHJcbmNvbnN0IFNUQVRfVVJMID0gJ2h0dHBzOi8vdG9uZ2ppLmRjbG91ZC5pby91bmkvc3RhdCc7XHJcbmNvbnN0IFNUQVRfSDVfVVJMID0gJ2h0dHBzOi8vdG9uZ2ppLmRjbG91ZC5pby91bmkvc3RhdC5naWYnOyBcclxuY29uc3QgUEFHRV9QVkVSX1RJTUUgPSAxODAwO1xyXG5jb25zdCBBUFBfUFZFUl9USU1FID0gMzAwO1xyXG5jb25zdCBPUEVSQVRJTkdfVElNRSA9IDEwO1xyXG5cclxuY29uc3QgVVVJRF9LRVkgPSAnX19EQ19TVEFUX1VVSUQnO1xyXG5jb25zdCBVVUlEX1ZBTFVFID0gJ19fRENfVVVJRF9WQUxVRSc7XHJcblxyXG5mdW5jdGlvbiBnZXRVdWlkKCkge1xyXG4gIGxldCB1dWlkID0gJyc7XHJcbiAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHV1aWQgPSBwbHVzLnJ1bnRpbWUuZ2V0RENsb3VkSWQoKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgdXVpZCA9ICcnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHV1aWRcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICB1dWlkID0gdW5pLmdldFN0b3JhZ2VTeW5jKFVVSURfS0VZKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICB1dWlkID0gVVVJRF9WQUxVRTtcclxuICB9XHJcblxyXG4gIGlmICghdXVpZCkge1xyXG4gICAgdXVpZCA9IERhdGUubm93KCkgKyAnJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDFlNyk7XHJcbiAgICB0cnkge1xyXG4gICAgICB1bmkuc2V0U3RvcmFnZVN5bmMoVVVJRF9LRVksIHV1aWQpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICB1bmkuc2V0U3RvcmFnZVN5bmMoVVVJRF9LRVksIFVVSURfVkFMVUUpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdXVpZDtcclxufVxyXG5cclxuY29uc3QgZ2V0U2dpbiA9IChzdGF0RGF0YSkgPT4ge1xyXG4gIGxldCBhcnIgPSBPYmplY3Qua2V5cyhzdGF0RGF0YSk7XHJcbiAgbGV0IHNvcnRBcnIgPSBhcnIuc29ydCgpO1xyXG4gIGxldCBzZ2luID0ge307XHJcbiAgbGV0IHNnaW5TdHIgPSAnJztcclxuICBmb3IgKHZhciBpIGluIHNvcnRBcnIpIHtcclxuICAgIHNnaW5bc29ydEFycltpXV0gPSBzdGF0RGF0YVtzb3J0QXJyW2ldXTtcclxuICAgIHNnaW5TdHIgKz0gc29ydEFycltpXSArICc9JyArIHN0YXREYXRhW3NvcnRBcnJbaV1dICsgJyYnO1xyXG4gIH1cclxuICAvLyBjb25zdCBvcHRpb25zID0gc2dpblN0ci5zdWJzdHIoMCwgc2dpblN0ci5sZW5ndGggLSAxKVxyXG4gIC8vIHNnaW5TdHIgPSBzZ2luU3RyLnN1YnN0cigwLCBzZ2luU3RyLmxlbmd0aCAtIDEpICsgJyZrZXk9JyArIFNUQVRfS0VZO1xyXG4gIC8vIGNvbnN0IHNpID0gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShzZ2luU3RyKS5kaWdlc3QoJ2hleCcpO1xyXG4gIHJldHVybiB7XHJcbiAgICBzaWduOiAnJyxcclxuICAgIG9wdGlvbnM6IHNnaW5TdHIuc3Vic3RyKDAsIHNnaW5TdHIubGVuZ3RoIC0gMSlcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgZ2V0U3BsaWNpbmcgPSAoZGF0YSkgPT4ge1xyXG4gIGxldCBzdHIgPSAnJztcclxuICBmb3IgKHZhciBpIGluIGRhdGEpIHtcclxuICAgIHN0ciArPSBpICsgJz0nICsgZGF0YVtpXSArICcmJztcclxuICB9XHJcbiAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgc3RyLmxlbmd0aCAtIDEpXHJcbn07XHJcblxyXG5jb25zdCBnZXRUaW1lID0gKCkgPT4ge1xyXG4gIHJldHVybiBwYXJzZUludChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0UGxhdGZvcm1OYW1lID0gKCkgPT4ge1xyXG4gIGNvbnN0IHBsYXRmb3JtTGlzdCA9IHtcclxuICAgICdhcHAtcGx1cyc6ICduJyxcclxuICAgICdoNSc6ICdoNScsXHJcbiAgICAnbXAtd2VpeGluJzogJ3d4JyxcclxuICAgICdtcC1hbGlwYXknOiAnYWxpJyxcclxuICAgICdtcC1iYWlkdSc6ICdiZCcsXHJcbiAgICAnbXAtdG91dGlhbyc6ICd0dCcsXHJcbiAgICAnbXAtcXEnOiAncXEnXHJcbiAgfTtcclxuICByZXR1cm4gcGxhdGZvcm1MaXN0W3Byb2Nlc3MuZW52LlZVRV9BUFBfUExBVEZPUk1dO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0UGFja05hbWUgPSAoKSA9PiB7XHJcbiAgbGV0IHBhY2tOYW1lID0gJyc7XHJcbiAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnd3gnIHx8IGdldFBsYXRmb3JtTmFtZSgpID09PSAncXEnKSB7XHJcbiAgICAvLyDlhbzlrrnlvq7kv6HlsI/nqIvluo/kvY7niYjmnKzln7rnoYDlupNcclxuICAgIGlmKHVuaS5jYW5JVXNlKCdnZXRBY2NvdW50SW5mb1N5bmMnKSl7XHJcbiAgICAgIHBhY2tOYW1lID0gdW5pLmdldEFjY291bnRJbmZvU3luYygpLm1pbmlQcm9ncmFtLmFwcElkIHx8ICcnO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcGFja05hbWVcclxufTtcclxuXHJcbmNvbnN0IGdldFZlcnNpb24gPSAoKSA9PiB7XHJcbiAgcmV0dXJuIGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicgPyBwbHVzLnJ1bnRpbWUudmVyc2lvbiA6ICcnO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0Q2hhbm5lbCA9ICgpID0+IHtcclxuICBjb25zdCBwbGF0Zm9ybU5hbWUgPSBnZXRQbGF0Zm9ybU5hbWUoKTtcclxuICBsZXQgY2hhbm5lbCA9ICcnO1xyXG4gIGlmIChwbGF0Zm9ybU5hbWUgPT09ICduJykge1xyXG4gICAgY2hhbm5lbCA9IHBsdXMucnVudGltZS5jaGFubmVsO1xyXG4gIH1cclxuICByZXR1cm4gY2hhbm5lbDtcclxufTtcclxuXHJcbmNvbnN0IGdldFNjZW5lID0gKG9wdGlvbnMpID0+IHtcclxuICBjb25zdCBwbGF0Zm9ybU5hbWUgPSBnZXRQbGF0Zm9ybU5hbWUoKTtcclxuICBsZXQgc2NlbmUgPSAnJztcclxuICBpZiAob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgfVxyXG4gIGlmIChwbGF0Zm9ybU5hbWUgPT09ICd3eCcpIHtcclxuICAgIHNjZW5lID0gdW5pLmdldExhdW5jaE9wdGlvbnNTeW5jKCkuc2NlbmU7XHJcbiAgfVxyXG4gIHJldHVybiBzY2VuZTtcclxufTtcclxuY29uc3QgRmlyc3RfX1Zpc2l0X19UaW1lX19LRVkgPSAnRmlyc3RfX1Zpc2l0X19UaW1lJztcclxuY29uc3QgTGFzdF9fVmlzaXRfX1RpbWVfX0tFWSA9ICdMYXN0X19WaXNpdF9fVGltZSc7XHJcblxyXG5jb25zdCBnZXRGaXJzdFZpc2l0VGltZSA9ICgpID0+IHtcclxuICBjb25zdCB0aW1lU3RvcmdlID0gdW5pLmdldFN0b3JhZ2VTeW5jKEZpcnN0X19WaXNpdF9fVGltZV9fS0VZKTtcclxuICBsZXQgdGltZSA9IDA7XHJcbiAgaWYgKHRpbWVTdG9yZ2UpIHtcclxuICAgIHRpbWUgPSB0aW1lU3RvcmdlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aW1lID0gZ2V0VGltZSgpO1xyXG4gICAgdW5pLnNldFN0b3JhZ2VTeW5jKEZpcnN0X19WaXNpdF9fVGltZV9fS0VZLCB0aW1lKTtcclxuICAgIHVuaS5yZW1vdmVTdG9yYWdlU3luYyhMYXN0X19WaXNpdF9fVGltZV9fS0VZKTtcclxuICB9XHJcbiAgcmV0dXJuIHRpbWU7XHJcbn07XHJcblxyXG5jb25zdCBnZXRMYXN0VmlzaXRUaW1lID0gKCkgPT4ge1xyXG4gIGNvbnN0IHRpbWVTdG9yZ2UgPSB1bmkuZ2V0U3RvcmFnZVN5bmMoTGFzdF9fVmlzaXRfX1RpbWVfX0tFWSk7XHJcbiAgbGV0IHRpbWUgPSAwO1xyXG4gIGlmICh0aW1lU3RvcmdlKSB7XHJcbiAgICB0aW1lID0gdGltZVN0b3JnZTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGltZSA9ICcnO1xyXG4gIH1cclxuICB1bmkuc2V0U3RvcmFnZVN5bmMoTGFzdF9fVmlzaXRfX1RpbWVfX0tFWSwgZ2V0VGltZSgpKTtcclxuICByZXR1cm4gdGltZTtcclxufTtcclxuXHJcblxyXG5jb25zdCBQQUdFX1JFU0lERU5DRV9USU1FID0gJ19fcGFnZV9fcmVzaWRlbmNlX190aW1lJztcclxubGV0IEZpcnN0X1BhZ2VfcmVzaWRlbmNlX3RpbWUgPSAwO1xyXG5sZXQgTGFzdF9QYWdlX3Jlc2lkZW5jZV90aW1lID0gMDtcclxuXHJcblxyXG5jb25zdCBzZXRQYWdlUmVzaWRlbmNlVGltZSA9ICgpID0+IHtcclxuICBGaXJzdF9QYWdlX3Jlc2lkZW5jZV90aW1lID0gZ2V0VGltZSgpO1xyXG4gIGlmIChnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ24nKSB7XHJcbiAgICB1bmkuc2V0U3RvcmFnZVN5bmMoUEFHRV9SRVNJREVOQ0VfVElNRSwgZ2V0VGltZSgpKTtcclxuICB9XHJcbiAgcmV0dXJuIEZpcnN0X1BhZ2VfcmVzaWRlbmNlX3RpbWVcclxufTtcclxuXHJcbmNvbnN0IGdldFBhZ2VSZXNpZGVuY2VUaW1lID0gKCkgPT4ge1xyXG4gIExhc3RfUGFnZV9yZXNpZGVuY2VfdGltZSA9IGdldFRpbWUoKTtcclxuICBpZiAoZ2V0UGxhdGZvcm1OYW1lKCkgPT09ICduJykge1xyXG4gICAgRmlyc3RfUGFnZV9yZXNpZGVuY2VfdGltZSA9IHVuaS5nZXRTdG9yYWdlU3luYyhQQUdFX1JFU0lERU5DRV9USU1FKTtcclxuICB9XHJcbiAgcmV0dXJuIExhc3RfUGFnZV9yZXNpZGVuY2VfdGltZSAtIEZpcnN0X1BhZ2VfcmVzaWRlbmNlX3RpbWVcclxufTtcclxuY29uc3QgVE9UQUxfX1ZJU0lUX19DT1VOVCA9ICdUb3RhbF9fVmlzaXRfX0NvdW50JztcclxuY29uc3QgZ2V0VG90YWxWaXNpdENvdW50ID0gKCkgPT4ge1xyXG4gIGNvbnN0IHRpbWVTdG9yZ2UgPSB1bmkuZ2V0U3RvcmFnZVN5bmMoVE9UQUxfX1ZJU0lUX19DT1VOVCk7XHJcbiAgbGV0IGNvdW50ID0gMTtcclxuICBpZiAodGltZVN0b3JnZSkge1xyXG4gICAgY291bnQgPSB0aW1lU3RvcmdlO1xyXG4gICAgY291bnQrKztcclxuICB9XHJcbiAgdW5pLnNldFN0b3JhZ2VTeW5jKFRPVEFMX19WSVNJVF9fQ09VTlQsIGNvdW50KTtcclxuICByZXR1cm4gY291bnQ7XHJcbn07XHJcblxyXG5jb25zdCBHZXRFbmNvZGVVUklDb21wb25lbnRPcHRpb25zID0gKHN0YXREYXRhKSA9PiB7XHJcbiAgbGV0IGRhdGEgPSB7fTtcclxuICBmb3IgKGxldCBwcm9wIGluIHN0YXREYXRhKSB7XHJcbiAgICBkYXRhW3Byb3BdID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0YXREYXRhW3Byb3BdKTtcclxuICB9XHJcbiAgcmV0dXJuIGRhdGE7XHJcbn07XHJcblxyXG5sZXQgU2V0X19GaXJzdF9fVGltZSA9IDA7XHJcbmxldCBTZXRfX0xhc3RfX1RpbWUgPSAwO1xyXG5cclxuY29uc3QgZ2V0Rmlyc3RUaW1lID0gKCkgPT4ge1xyXG4gIGxldCB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgU2V0X19GaXJzdF9fVGltZSA9IHRpbWU7XHJcbiAgU2V0X19MYXN0X19UaW1lID0gMDtcclxuICByZXR1cm4gdGltZTtcclxufTtcclxuXHJcblxyXG5jb25zdCBnZXRMYXN0VGltZSA9ICgpID0+IHtcclxuICBsZXQgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gIFNldF9fTGFzdF9fVGltZSA9IHRpbWU7XHJcbiAgcmV0dXJuIHRpbWU7XHJcbn07XHJcblxyXG5cclxuY29uc3QgZ2V0UmVzaWRlbmNlVGltZSA9ICh0eXBlKSA9PiB7XHJcbiAgbGV0IHJlc2lkZW5jZVRpbWUgPSAwO1xyXG4gIGlmIChTZXRfX0ZpcnN0X19UaW1lICE9PSAwKSB7XHJcbiAgICByZXNpZGVuY2VUaW1lID0gU2V0X19MYXN0X19UaW1lIC0gU2V0X19GaXJzdF9fVGltZTtcclxuICB9XHJcblxyXG4gIHJlc2lkZW5jZVRpbWUgPSBwYXJzZUludChyZXNpZGVuY2VUaW1lIC8gMTAwMCk7XHJcbiAgcmVzaWRlbmNlVGltZSA9IHJlc2lkZW5jZVRpbWUgPCAxID8gMSA6IHJlc2lkZW5jZVRpbWU7XHJcbiAgaWYgKHR5cGUgPT09ICdhcHAnKSB7XHJcbiAgICBsZXQgb3ZlcnRpbWUgPSByZXNpZGVuY2VUaW1lID4gQVBQX1BWRVJfVElNRSA/IHRydWUgOiBmYWxzZTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc2lkZW5jZVRpbWUsXHJcbiAgICAgIG92ZXJ0aW1lXHJcbiAgICB9O1xyXG4gIH1cclxuICBpZiAodHlwZSA9PT0gJ3BhZ2UnKSB7XHJcbiAgICBsZXQgb3ZlcnRpbWUgPSByZXNpZGVuY2VUaW1lID4gUEFHRV9QVkVSX1RJTUUgPyB0cnVlIDogZmFsc2U7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXNpZGVuY2VUaW1lLFxyXG4gICAgICBvdmVydGltZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICByZXNpZGVuY2VUaW1lXHJcbiAgfTtcclxuXHJcbn07XHJcblxyXG5jb25zdCBnZXRSb3V0ZSA9ICgpID0+IHtcclxuICB2YXIgcGFnZXMgPSBnZXRDdXJyZW50UGFnZXMoKTtcclxuICB2YXIgcGFnZSA9IHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdO1xyXG4gIGxldCBfc2VsZiA9IHBhZ2UuJHZtO1xyXG5cclxuICBpZiAoZ2V0UGxhdGZvcm1OYW1lKCkgPT09ICdiZCcpIHtcclxuICAgIHJldHVybiBfc2VsZi4kbXAgJiYgX3NlbGYuJG1wLnBhZ2UuaXM7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiAoX3NlbGYuJHNjb3BlICYmIF9zZWxmLiRzY29wZS5yb3V0ZSkgfHwgKF9zZWxmLiRtcCAmJiBfc2VsZi4kbXAucGFnZS5yb3V0ZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgZ2V0UGFnZVJvdXRlID0gKHNlbGYpID0+IHtcclxuICB2YXIgcGFnZXMgPSBnZXRDdXJyZW50UGFnZXMoKTtcclxuICB2YXIgcGFnZSA9IHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdO1xyXG4gIGxldCBfc2VsZiA9IHBhZ2UuJHZtO1xyXG4gIGxldCBxdWVyeSA9IHNlbGYuX3F1ZXJ5O1xyXG4gIGxldCBzdHIgPSBxdWVyeSAmJiBKU09OLnN0cmluZ2lmeShxdWVyeSkgIT09ICd7fScgPyAnPycgKyBKU09OLnN0cmluZ2lmeShxdWVyeSkgOiAnJztcclxuICAvLyBjbGVhclxyXG4gIHNlbGYuX3F1ZXJ5ID0gJyc7XHJcbiAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnYmQnKSB7XHJcbiAgICByZXR1cm4gX3NlbGYuJG1wICYmIF9zZWxmLiRtcC5wYWdlLmlzICsgc3RyO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gKF9zZWxmLiRzY29wZSAmJiBfc2VsZi4kc2NvcGUucm91dGUgKyBzdHIgKXx8IChfc2VsZi4kbXAgJiYgX3NlbGYuJG1wLnBhZ2Uucm91dGUgKyBzdHIpO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGdldFBhZ2VUeXBlcyA9IChzZWxmKSA9PiB7XHJcbiAgaWYgKHNlbGYubXBUeXBlID09PSAncGFnZScgfHwgKHNlbGYuJG1wICYmIHNlbGYuJG1wLm1wVHlwZSA9PT0gJ3BhZ2UnKSB8fCBzZWxmLiRvcHRpb25zLm1wVHlwZSA9PT0gJ3BhZ2UnKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuY29uc3QgY2FsaWJyYXRpb24gPSAoZXZlbnROYW1lLCBvcHRpb25zKSA9PiB7XHJcbiAgLy8gIGxvZ2luIOOAgSBzaGFyZSDjgIFwYXlfc3VjY2VzcyDjgIFwYXlfZmFpbCDjgIFyZWdpc3RlciDjgIF0aXRsZVxyXG4gIGlmKCFldmVudE5hbWUpe1xyXG4gICAgY29uc29sZS5lcnJvcihgdW5pLnJlcG9ydCDnvLrlsJEgW2V2ZW50TmFtZV0g5Y+C5pWwYCk7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuICBpZiAodHlwZW9mIGV2ZW50TmFtZSAhPT0gJ3N0cmluZycpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYHVuaS5yZXBvcnQgW2V2ZW50TmFtZV0g5Y+C5pWw57G75Z6L6ZSZ6K+vLOWPquiDveS4uiBTdHJpbmcg57G75Z6LYCk7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuICBpZiAoZXZlbnROYW1lLmxlbmd0aCA+IDI1NSkge1xyXG4gICAgY29uc29sZS5lcnJvcihgdW5pLnJlcG9ydCBbZXZlbnROYW1lXSDlj4LmlbDplb/luqbkuI3og73lpKfkuo4gMjU1YCk7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYHVuaS5yZXBvcnQgW29wdGlvbnNdIOWPguaVsOexu+Wei+mUmeivryzlj6rog73kuLogU3RyaW5nIOaIliBPYmplY3Qg57G75Z6LYCk7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmxlbmd0aCA+IDI1NSkge1xyXG4gICAgY29uc29sZS5lcnJvcihgdW5pLnJlcG9ydCBbb3B0aW9uc10g5Y+C5pWw6ZW/5bqm5LiN6IO95aSn5LqOIDI1NWApO1xyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIGlmIChldmVudE5hbWUgPT09ICd0aXRsZScgJiYgdHlwZW9mIG9wdGlvbnMgIT09ICdzdHJpbmcnKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCd1bmkucmVwb3J0IFtldmVudE5hbWVdIOWPguaVsOS4uiB0aXRsZSDml7bvvIxbb3B0aW9uc10g5Y+C5pWw5Y+q6IO95Li6IFN0cmluZyDnsbvlnosnKTtcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgUGFnZXNKc29uID0gcmVxdWlyZSgndW5pLXBhZ2VzP3tcInR5cGVcIjpcInN0eWxlXCJ9JykuZGVmYXVsdDtcclxuY29uc3Qgc3RhdENvbmZpZyA9IHJlcXVpcmUoJ3VuaS1zdGF0LWNvbmZpZycpLmRlZmF1bHQgfHwgcmVxdWlyZSgndW5pLXN0YXQtY29uZmlnJyk7XHJcblxyXG5jb25zdCByZXN1bHRPcHRpb25zID0gdW5pLmdldFN5c3RlbUluZm9TeW5jKCk7XHJcblxyXG5jbGFzcyBVdGlsIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuc2VsZiA9ICcnO1xyXG4gICAgdGhpcy5fcmV0cnkgPSAwO1xyXG4gICAgdGhpcy5fcGxhdGZvcm0gPSAnJztcclxuICAgIHRoaXMuX3F1ZXJ5ID0ge307XHJcbiAgICB0aGlzLl9uYXZpZ2F0aW9uQmFyVGl0bGUgPSB7XHJcbiAgICAgIGNvbmZpZzogJycsXHJcbiAgICAgIHBhZ2U6ICcnLFxyXG4gICAgICByZXBvcnQ6ICcnLFxyXG4gICAgICBsdDogJydcclxuICAgIH07XHJcbiAgICB0aGlzLl9vcGVyYXRpbmdUaW1lID0gMDtcclxuICAgIHRoaXMuX3JlcG9ydGluZ1JlcXVlc3REYXRhID0ge1xyXG4gICAgICAnMSc6IFtdLFxyXG4gICAgICAnMTEnOiBbXVxyXG4gICAgfTtcclxuICAgIHRoaXMuX19wcmV2ZW50X3RyaWdnZXJpbmcgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLl9fbGljYXRpb25IaWRlID0gZmFsc2U7XHJcbiAgICB0aGlzLl9fbGljYXRpb25TaG93ID0gZmFsc2U7XHJcbiAgICB0aGlzLl9sYXN0UGFnZVJvdXRlID0gJyc7XHJcbiAgICB0aGlzLnN0YXREYXRhID0ge1xyXG4gICAgICB1dWlkOiBnZXRVdWlkKCksXHJcbiAgICAgIHV0OiBnZXRQbGF0Zm9ybU5hbWUoKSxcclxuICAgICAgbXBuOiBnZXRQYWNrTmFtZSgpLFxyXG4gICAgICBhazogc3RhdENvbmZpZy5hcHBpZCxcclxuICAgICAgdXN2OiBTVEFUX1ZFUlNJT04sXHJcbiAgICAgIHY6IGdldFZlcnNpb24oKSxcclxuICAgICAgY2g6IGdldENoYW5uZWwoKSxcclxuICAgICAgY246ICcnLFxyXG4gICAgICBwbjogJycsXHJcbiAgICAgIGN0OiAnJyxcclxuICAgICAgdDogZ2V0VGltZSgpLFxyXG4gICAgICB0dDogJycsXHJcbiAgICAgIHA6IHJlc3VsdE9wdGlvbnMucGxhdGZvcm0gPT09ICdhbmRyb2lkJyA/ICdhJyA6ICdpJyxcclxuICAgICAgYnJhbmQ6IHJlc3VsdE9wdGlvbnMuYnJhbmQgfHwgJycsXHJcbiAgICAgIG1kOiByZXN1bHRPcHRpb25zLm1vZGVsLFxyXG4gICAgICBzdjogcmVzdWx0T3B0aW9ucy5zeXN0ZW0ucmVwbGFjZSgvKEFuZHJvaWR8aU9TKVxccy8sICcnKSxcclxuICAgICAgbXBzZGs6IHJlc3VsdE9wdGlvbnMuU0RLVmVyc2lvbiB8fCAnJyxcclxuICAgICAgbXB2OiByZXN1bHRPcHRpb25zLnZlcnNpb24gfHwgJycsXHJcbiAgICAgIGxhbmc6IHJlc3VsdE9wdGlvbnMubGFuZ3VhZ2UsXHJcbiAgICAgIHByOiByZXN1bHRPcHRpb25zLnBpeGVsUmF0aW8sXHJcbiAgICAgIHd3OiByZXN1bHRPcHRpb25zLndpbmRvd1dpZHRoLFxyXG4gICAgICB3aDogcmVzdWx0T3B0aW9ucy53aW5kb3dIZWlnaHQsXHJcbiAgICAgIHN3OiByZXN1bHRPcHRpb25zLnNjcmVlbldpZHRoLFxyXG4gICAgICBzaDogcmVzdWx0T3B0aW9ucy5zY3JlZW5IZWlnaHRcclxuICAgIH07XHJcblxyXG4gIH1cclxuXHJcbiAgX2FwcGxpY2F0aW9uU2hvdygpIHtcclxuICAgIGlmICh0aGlzLl9fbGljYXRpb25IaWRlKSB7XHJcbiAgICAgIGdldExhc3RUaW1lKCk7XHJcbiAgICAgIGNvbnN0IHRpbWUgPSBnZXRSZXNpZGVuY2VUaW1lKCdhcHAnKTtcclxuICAgICAgaWYgKHRpbWUub3ZlcnRpbWUpIHtcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHtcclxuICAgICAgICAgIHBhdGg6IHRoaXMuX2xhc3RQYWdlUm91dGUsXHJcbiAgICAgICAgICBzY2VuZTogdGhpcy5zdGF0RGF0YS5zY1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5fc2VuZFJlcG9ydFJlcXVlc3Qob3B0aW9ucyk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5fX2xpY2F0aW9uSGlkZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2FwcGxpY2F0aW9uSGlkZShzZWxmLCB0eXBlKSB7XHJcblxyXG4gICAgdGhpcy5fX2xpY2F0aW9uSGlkZSA9IHRydWU7XHJcbiAgICBnZXRMYXN0VGltZSgpO1xyXG4gICAgY29uc3QgdGltZSA9IGdldFJlc2lkZW5jZVRpbWUoKTtcclxuICAgIGdldEZpcnN0VGltZSgpO1xyXG4gICAgY29uc3Qgcm91dGUgPSBnZXRQYWdlUm91dGUodGhpcyk7XHJcbiAgICB0aGlzLl9zZW5kSGlkZVJlcXVlc3Qoe1xyXG4gICAgICB1cmxyZWY6IHJvdXRlLFxyXG4gICAgICB1cmxyZWZfdHM6IHRpbWUucmVzaWRlbmNlVGltZVxyXG4gICAgfSwgdHlwZSk7XHJcbiAgfVxyXG5cclxuICBfcGFnZVNob3coKSB7XHJcbiAgICBjb25zdCByb3V0ZSA9IGdldFBhZ2VSb3V0ZSh0aGlzKTtcclxuICAgIGNvbnN0IHJvdXRlcGF0aCA9IGdldFJvdXRlKCk7XHJcbiAgICB0aGlzLl9uYXZpZ2F0aW9uQmFyVGl0bGUuY29uZmlnID0gUGFnZXNKc29uICYmXHJcbiAgICAgIFBhZ2VzSnNvbi5wYWdlc1tyb3V0ZXBhdGhdICYmXHJcbiAgICAgIFBhZ2VzSnNvbi5wYWdlc1tyb3V0ZXBhdGhdLnRpdGxlTlZpZXcgJiZcclxuICAgICAgUGFnZXNKc29uLnBhZ2VzW3JvdXRlcGF0aF0udGl0bGVOVmlldy50aXRsZVRleHQgfHxcclxuICAgICAgUGFnZXNKc29uICYmXHJcbiAgICAgIFBhZ2VzSnNvbi5wYWdlc1tyb3V0ZXBhdGhdICYmXHJcbiAgICAgIFBhZ2VzSnNvbi5wYWdlc1tyb3V0ZXBhdGhdLm5hdmlnYXRpb25CYXJUaXRsZVRleHQgfHwgJyc7XHJcblxyXG4gICAgaWYgKHRoaXMuX19saWNhdGlvblNob3cpIHtcclxuICAgICAgZ2V0Rmlyc3RUaW1lKCk7XHJcbiAgICAgIHRoaXMuX19saWNhdGlvblNob3cgPSBmYWxzZTtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ+i/meaYryBvbkxhdWNoIOS5i+WQjuaJp+ihjOeahOesrOS4gOasoSBwYWdlU2hvdyDvvIzkuLrkuIvmrKHorrDlvZXml7bpl7TlgZrlh4blpIcnKTtcclxuICAgICAgdGhpcy5fbGFzdFBhZ2VSb3V0ZSA9IHJvdXRlO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGFzdFRpbWUoKTtcclxuICAgIHRoaXMuX2xhc3RQYWdlUm91dGUgPSByb3V0ZTtcclxuICAgIGNvbnN0IHRpbWUgPSBnZXRSZXNpZGVuY2VUaW1lKCdwYWdlJyk7XHJcbiAgICBpZiAodGltZS5vdmVydGltZSkge1xyXG4gICAgICBsZXQgb3B0aW9ucyA9IHtcclxuICAgICAgICBwYXRoOiB0aGlzLl9sYXN0UGFnZVJvdXRlLFxyXG4gICAgICAgIHNjZW5lOiB0aGlzLnN0YXREYXRhLnNjXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuX3NlbmRSZXBvcnRSZXF1ZXN0KG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgZ2V0Rmlyc3RUaW1lKCk7XHJcbiAgfVxyXG5cclxuICBfcGFnZUhpZGUoKSB7XHJcbiAgICBpZiAoIXRoaXMuX19saWNhdGlvbkhpZGUpIHtcclxuICAgICAgZ2V0TGFzdFRpbWUoKTtcclxuICAgICAgY29uc3QgdGltZSA9IGdldFJlc2lkZW5jZVRpbWUoJ3BhZ2UnKTtcclxuICAgICAgdGhpcy5fc2VuZFBhZ2VSZXF1ZXN0KHtcclxuICAgICAgICB1cmw6IHRoaXMuX2xhc3RQYWdlUm91dGUsXHJcbiAgICAgICAgdXJscmVmOiB0aGlzLl9sYXN0UGFnZVJvdXRlLFxyXG4gICAgICAgIHVybHJlZl90czogdGltZS5yZXNpZGVuY2VUaW1lXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLl9uYXZpZ2F0aW9uQmFyVGl0bGUgPSB7XHJcbiAgICAgICAgY29uZmlnOiAnJyxcclxuICAgICAgICBwYWdlOiAnJyxcclxuICAgICAgICByZXBvcnQ6ICcnLFxyXG4gICAgICAgIGx0OiAnJ1xyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfbG9naW4oKSB7XHJcbiAgICB0aGlzLl9zZW5kRXZlbnRSZXF1ZXN0KHtcclxuICAgICAga2V5OiAnbG9naW4nXHJcbiAgICB9LCAwKTtcclxuICB9XHJcblxyXG4gIF9zaGFyZSgpIHtcclxuICAgIHRoaXMuX3NlbmRFdmVudFJlcXVlc3Qoe1xyXG4gICAgICBrZXk6ICdzaGFyZSdcclxuICAgIH0sIDApO1xyXG4gIH1cclxuICBfcGF5bWVudChrZXkpIHtcclxuICAgIHRoaXMuX3NlbmRFdmVudFJlcXVlc3Qoe1xyXG4gICAgICBrZXlcclxuICAgIH0sIDApO1xyXG4gIH1cclxuICBfc2VuZFJlcG9ydFJlcXVlc3Qob3B0aW9ucykge1xyXG5cclxuICAgIHRoaXMuX25hdmlnYXRpb25CYXJUaXRsZS5sdCA9ICcxJztcclxuICAgIGxldCBxdWVyeSA9IG9wdGlvbnMucXVlcnkgJiYgSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5xdWVyeSkgIT09ICd7fScgPyAnPycgKyBKU09OLnN0cmluZ2lmeShvcHRpb25zLnF1ZXJ5KSA6ICcnO1xyXG4gICAgdGhpcy5zdGF0RGF0YS5sdCA9ICcxJztcclxuICAgIHRoaXMuc3RhdERhdGEudXJsID0gKG9wdGlvbnMucGF0aCArIHF1ZXJ5KSB8fCAnJztcclxuICAgIHRoaXMuc3RhdERhdGEudCA9IGdldFRpbWUoKTtcclxuICAgIHRoaXMuc3RhdERhdGEuc2MgPSBnZXRTY2VuZShvcHRpb25zLnNjZW5lKTtcclxuICAgIHRoaXMuc3RhdERhdGEuZnZ0cyA9IGdldEZpcnN0VmlzaXRUaW1lKCk7XHJcbiAgICB0aGlzLnN0YXREYXRhLmx2dHMgPSBnZXRMYXN0VmlzaXRUaW1lKCk7XHJcbiAgICB0aGlzLnN0YXREYXRhLnR2YyA9IGdldFRvdGFsVmlzaXRDb3VudCgpO1xyXG4gICAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicpIHtcclxuICAgICAgdGhpcy5nZXRQcm9wZXJ0eSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5nZXROZXR3b3JrSW5mbygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3NlbmRQYWdlUmVxdWVzdChvcHQpIHtcclxuICAgIGxldCB7XHJcbiAgICAgIHVybCxcclxuICAgICAgdXJscmVmLFxyXG4gICAgICB1cmxyZWZfdHNcclxuICAgIH0gPSBvcHQ7XHJcbiAgICB0aGlzLl9uYXZpZ2F0aW9uQmFyVGl0bGUubHQgPSAnMTEnO1xyXG4gICAgbGV0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGFrOiB0aGlzLnN0YXREYXRhLmFrLFxyXG4gICAgICB1dWlkOiB0aGlzLnN0YXREYXRhLnV1aWQsXHJcbiAgICAgIGx0OiAnMTEnLFxyXG4gICAgICB1dDogdGhpcy5zdGF0RGF0YS51dCxcclxuICAgICAgdXJsLFxyXG4gICAgICB0dDogdGhpcy5zdGF0RGF0YS50dCxcclxuICAgICAgdXJscmVmLFxyXG4gICAgICB1cmxyZWZfdHMsXHJcbiAgICAgIGNoOiB0aGlzLnN0YXREYXRhLmNoLFxyXG4gICAgICB1c3Y6IHRoaXMuc3RhdERhdGEudXN2LFxyXG4gICAgICB0OiBnZXRUaW1lKCksXHJcbiAgICAgIHA6IHRoaXMuc3RhdERhdGEucFxyXG4gICAgfTtcclxuICAgIHRoaXMucmVxdWVzdChvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIF9zZW5kSGlkZVJlcXVlc3Qob3B0LCB0eXBlKSB7XHJcbiAgICBsZXQge1xyXG4gICAgICB1cmxyZWYsXHJcbiAgICAgIHVybHJlZl90c1xyXG4gICAgfSA9IG9wdDtcclxuICAgIGxldCBvcHRpb25zID0ge1xyXG4gICAgICBhazogdGhpcy5zdGF0RGF0YS5hayxcclxuICAgICAgdXVpZDogdGhpcy5zdGF0RGF0YS51dWlkLFxyXG4gICAgICBsdDogJzMnLFxyXG4gICAgICB1dDogdGhpcy5zdGF0RGF0YS51dCxcclxuICAgICAgdXJscmVmLFxyXG4gICAgICB1cmxyZWZfdHMsXHJcbiAgICAgIGNoOiB0aGlzLnN0YXREYXRhLmNoLFxyXG4gICAgICB1c3Y6IHRoaXMuc3RhdERhdGEudXN2LFxyXG4gICAgICB0OiBnZXRUaW1lKCksXHJcbiAgICAgIHA6IHRoaXMuc3RhdERhdGEucFxyXG4gICAgfTtcclxuICAgIHRoaXMucmVxdWVzdChvcHRpb25zLCB0eXBlKTtcclxuICB9XHJcbiAgX3NlbmRFdmVudFJlcXVlc3Qoe1xyXG4gICAga2V5ID0gJycsXHJcbiAgICB2YWx1ZSA9IFwiXCJcclxuICB9ID0ge30pIHtcclxuICAgIGNvbnN0IHJvdXRlID0gdGhpcy5fbGFzdFBhZ2VSb3V0ZTtcclxuICAgIGxldCBvcHRpb25zID0ge1xyXG4gICAgICBhazogdGhpcy5zdGF0RGF0YS5hayxcclxuICAgICAgdXVpZDogdGhpcy5zdGF0RGF0YS51dWlkLFxyXG4gICAgICBsdDogJzIxJyxcclxuICAgICAgdXQ6IHRoaXMuc3RhdERhdGEudXQsXHJcbiAgICAgIHVybDogcm91dGUsXHJcbiAgICAgIGNoOiB0aGlzLnN0YXREYXRhLmNoLFxyXG4gICAgICBlX246IGtleSxcclxuICAgICAgZV92OiB0eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IHZhbHVlLnRvU3RyaW5nKCksXHJcbiAgICAgIHVzdjogdGhpcy5zdGF0RGF0YS51c3YsXHJcbiAgICAgIHQ6IGdldFRpbWUoKSxcclxuICAgICAgcDogdGhpcy5zdGF0RGF0YS5wXHJcbiAgICB9O1xyXG4gICAgdGhpcy5yZXF1ZXN0KG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0TmV0d29ya0luZm8oKSB7XHJcbiAgICB1bmkuZ2V0TmV0d29ya1R5cGUoe1xyXG4gICAgICBzdWNjZXNzOiAocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgdGhpcy5zdGF0RGF0YS5uZXQgPSByZXN1bHQubmV0d29ya1R5cGU7XHJcbiAgICAgICAgdGhpcy5nZXRMb2NhdGlvbigpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFByb3BlcnR5KCkge1xyXG4gICAgcGx1cy5ydW50aW1lLmdldFByb3BlcnR5KHBsdXMucnVudGltZS5hcHBpZCwgKHdndGluZm8pID0+IHtcclxuICAgICAgdGhpcy5zdGF0RGF0YS52ID0gd2d0aW5mby52ZXJzaW9uIHx8ICcnO1xyXG4gICAgICB0aGlzLmdldE5ldHdvcmtJbmZvKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldExvY2F0aW9uKCkge1xyXG4gICAgaWYgKHN0YXRDb25maWcuZ2V0TG9jYXRpb24pIHtcclxuICAgICAgdW5pLmdldExvY2F0aW9uKHtcclxuICAgICAgICB0eXBlOiAnd2dzODQnLFxyXG4gICAgICAgIGdlb2NvZGU6IHRydWUsXHJcbiAgICAgICAgc3VjY2VzczogKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHJlc3VsdC5hZGRyZXNzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdERhdGEuY24gPSByZXN1bHQuYWRkcmVzcy5jb3VudHJ5O1xyXG4gICAgICAgICAgICB0aGlzLnN0YXREYXRhLnBuID0gcmVzdWx0LmFkZHJlc3MucHJvdmluY2U7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdERhdGEuY3QgPSByZXN1bHQuYWRkcmVzcy5jaXR5O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRoaXMuc3RhdERhdGEubGF0ID0gcmVzdWx0LmxhdGl0dWRlO1xyXG4gICAgICAgICAgdGhpcy5zdGF0RGF0YS5sbmcgPSByZXN1bHQubG9uZ2l0dWRlO1xyXG4gICAgICAgICAgdGhpcy5yZXF1ZXN0KHRoaXMuc3RhdERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXREYXRhLmxhdCA9IDA7XHJcbiAgICAgIHRoaXMuc3RhdERhdGEubG5nID0gMDtcclxuICAgICAgdGhpcy5yZXF1ZXN0KHRoaXMuc3RhdERhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVxdWVzdChkYXRhLCB0eXBlKSB7XHJcbiAgICBsZXQgdGltZSA9IGdldFRpbWUoKTtcclxuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5fbmF2aWdhdGlvbkJhclRpdGxlO1xyXG4gICAgZGF0YS50dG4gPSB0aXRsZS5wYWdlO1xyXG4gICAgZGF0YS50dHBqID0gdGl0bGUuY29uZmlnO1xyXG4gICAgZGF0YS50dGMgPSB0aXRsZS5yZXBvcnQ7XHJcblxyXG4gICAgbGV0IHJlcXVlc3REYXRhID0gdGhpcy5fcmVwb3J0aW5nUmVxdWVzdERhdGE7XHJcbiAgICBpZiAoZ2V0UGxhdGZvcm1OYW1lKCkgPT09ICduJykge1xyXG4gICAgICByZXF1ZXN0RGF0YSA9IHVuaS5nZXRTdG9yYWdlU3luYygnX19VTklfX1NUQVRfX0RBVEEnKSB8fCB7fTtcclxuICAgIH1cclxuICAgIGlmICghcmVxdWVzdERhdGFbZGF0YS5sdF0pIHtcclxuICAgICAgcmVxdWVzdERhdGFbZGF0YS5sdF0gPSBbXTtcclxuICAgIH1cclxuICAgIHJlcXVlc3REYXRhW2RhdGEubHRdLnB1c2goZGF0YSk7XHJcblxyXG4gICAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicpIHtcclxuICAgICAgdW5pLnNldFN0b3JhZ2VTeW5jKCdfX1VOSV9fU1RBVF9fREFUQScsIHJlcXVlc3REYXRhKTtcclxuICAgIH1cclxuICAgIGlmIChnZXRQYWdlUmVzaWRlbmNlVGltZSgpIDwgT1BFUkFUSU5HX1RJTUUgJiYgIXR5cGUpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBsZXQgdW5pU3RhdERhdGEgPSB0aGlzLl9yZXBvcnRpbmdSZXF1ZXN0RGF0YTtcclxuICAgIGlmIChnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ24nKSB7XHJcbiAgICAgIHVuaVN0YXREYXRhID0gdW5pLmdldFN0b3JhZ2VTeW5jKCdfX1VOSV9fU1RBVF9fREFUQScpO1xyXG4gICAgfVxyXG4gICAgLy8g5pe26Ze06LaF6L+H77yM6YeN5paw6I635Y+W5pe26Ze05oizXHJcbiAgICBzZXRQYWdlUmVzaWRlbmNlVGltZSgpO1xyXG4gICAgbGV0IGZpcnN0QXJyID0gW107XHJcbiAgICBsZXQgY29udGVudEFyciA9IFtdO1xyXG4gICAgbGV0IGxhc3RBcnIgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpIGluIHVuaVN0YXREYXRhKSB7XHJcbiAgICAgIGNvbnN0IHJkID0gdW5pU3RhdERhdGFbaV07XHJcbiAgICAgIHJkLmZvckVhY2goKGVsbSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSBnZXRTcGxpY2luZyhlbG0pO1xyXG4gICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICBmaXJzdEFyci5wdXNoKG5ld0RhdGEpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMykge1xyXG4gICAgICAgICAgbGFzdEFyci5wdXNoKG5ld0RhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb250ZW50QXJyLnB1c2gobmV3RGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmaXJzdEFyci5wdXNoKC4uLmNvbnRlbnRBcnIsIC4uLmxhc3RBcnIpO1xyXG4gICAgbGV0IG9wdGlvbnNEYXRhID0ge1xyXG4gICAgICB1c3Y6IFNUQVRfVkVSU0lPTiwgLy/nu5/orqEgU0RLIOeJiOacrOWPt1xyXG4gICAgICB0OiB0aW1lLCAvL+WPkemAgeivt+axguaXtueahOaXtumXtOaIrlxyXG4gICAgICByZXF1ZXN0czogSlNPTi5zdHJpbmdpZnkoZmlyc3RBcnIpLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLl9yZXBvcnRpbmdSZXF1ZXN0RGF0YSA9IHt9O1xyXG4gICAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicpIHtcclxuICAgICAgdW5pLnJlbW92ZVN0b3JhZ2VTeW5jKCdfX1VOSV9fU1RBVF9fREFUQScpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkYXRhLnV0ID09PSAnaDUnKSB7XHJcbiAgICAgIHRoaXMuaW1hZ2VSZXF1ZXN0KG9wdGlvbnNEYXRhKTtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicgJiYgdGhpcy5zdGF0RGF0YS5wID09PSAnYScpIHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fc2VuZFJlcXVlc3Qob3B0aW9uc0RhdGEpO1xyXG4gICAgICB9LCAyMDApO1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIHRoaXMuX3NlbmRSZXF1ZXN0KG9wdGlvbnNEYXRhKTtcclxuICB9XHJcbiAgX3NlbmRSZXF1ZXN0KG9wdGlvbnNEYXRhKSB7XHJcbiAgICB1bmkucmVxdWVzdCh7XHJcbiAgICAgIHVybDogU1RBVF9VUkwsXHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAvLyBoZWFkZXI6IHtcclxuICAgICAgLy8gICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIC8vIOm7mOiupOWAvFxyXG4gICAgICAvLyB9LFxyXG4gICAgICBkYXRhOiBvcHRpb25zRGF0YSxcclxuICAgICAgc3VjY2VzczogKCkgPT4ge1xyXG4gICAgICAgIC8vIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xyXG4gICAgICAgIC8vICAgY29uc29sZS5sb2coJ3N0YXQgcmVxdWVzdCBzdWNjZXNzJyk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICB9LFxyXG4gICAgICBmYWlsOiAoZSkgPT4ge1xyXG4gICAgICAgIGlmICgrK3RoaXMuX3JldHJ5IDwgMykge1xyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbmRSZXF1ZXN0KG9wdGlvbnNEYXRhKTtcclxuICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIGg1IOivt+axglxyXG4gICAqL1xyXG4gIGltYWdlUmVxdWVzdChkYXRhKSB7XHJcbiAgICBsZXQgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgIGxldCBvcHRpb25zID0gZ2V0U2dpbihHZXRFbmNvZGVVUklDb21wb25lbnRPcHRpb25zKGRhdGEpKS5vcHRpb25zO1xyXG4gICAgaW1hZ2Uuc3JjID0gU1RBVF9INV9VUkwgKyAnPycgKyBvcHRpb25zO1xyXG4gIH1cclxuXHJcbiAgc2VuZEV2ZW50KGtleSwgdmFsdWUpIHtcclxuICAgIC8vIOagoemqjCB0eXBlIOWPguaVsFxyXG4gICAgaWYgKGNhbGlicmF0aW9uKGtleSwgdmFsdWUpKSByZXR1cm5cclxuXHJcbiAgICBpZiAoa2V5ID09PSAndGl0bGUnKSB7XHJcbiAgICAgIHRoaXMuX25hdmlnYXRpb25CYXJUaXRsZS5yZXBvcnQgPSB2YWx1ZTtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICB0aGlzLl9zZW5kRXZlbnRSZXF1ZXN0KHtcclxuICAgICAga2V5LFxyXG4gICAgICB2YWx1ZTogdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiB2YWx1ZVxyXG4gICAgfSwgMSk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgU3RhdCBleHRlbmRzIFV0aWwge1xyXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcclxuICAgIGlmICghdGhpcy5pbnN0YW5jZSkge1xyXG4gICAgICB0aGlzLmluc3RhbmNlID0gbmV3IFN0YXQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmluc3RhbmNlID0gbnVsbDtcclxuICAgIC8vIOazqOWGjOaLpuaIquWZqFxyXG4gICAgaWYgKHR5cGVvZiB1bmkuYWRkSW50ZXJjZXB0b3IgPT09ICdmdW5jdGlvbicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdkZXZlbG9wbWVudCcpIHtcclxuICAgICAgdGhpcy5hZGRJbnRlcmNlcHRvckluaXQoKTtcclxuICAgICAgdGhpcy5pbnRlcmNlcHRMb2dpbigpO1xyXG4gICAgICB0aGlzLmludGVyY2VwdFNoYXJlKHRydWUpO1xyXG4gICAgICB0aGlzLmludGVyY2VwdFJlcXVlc3RQYXltZW50KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGRJbnRlcmNlcHRvckluaXQoKSB7XHJcbiAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICB1bmkuYWRkSW50ZXJjZXB0b3IoJ3NldE5hdmlnYXRpb25CYXJUaXRsZScsIHtcclxuICAgICAgaW52b2tlKGFyZ3MpIHtcclxuICAgICAgICBzZWxmLl9uYXZpZ2F0aW9uQmFyVGl0bGUucGFnZSA9IGFyZ3MudGl0bGU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaW50ZXJjZXB0TG9naW4oKSB7XHJcbiAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICB1bmkuYWRkSW50ZXJjZXB0b3IoJ2xvZ2luJywge1xyXG4gICAgICBjb21wbGV0ZSgpIHtcclxuICAgICAgICBzZWxmLl9sb2dpbigpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGludGVyY2VwdFNoYXJlKHR5cGUpIHtcclxuICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgIGlmICghdHlwZSkge1xyXG4gICAgICBzZWxmLl9zaGFyZSgpO1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIHVuaS5hZGRJbnRlcmNlcHRvcignc2hhcmUnLCB7XHJcbiAgICAgIHN1Y2Nlc3MoKSB7XHJcbiAgICAgICAgc2VsZi5fc2hhcmUoKTtcclxuICAgICAgfSxcclxuICAgICAgZmFpbCgpIHtcclxuICAgICAgICBzZWxmLl9zaGFyZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGludGVyY2VwdFJlcXVlc3RQYXltZW50KCkge1xyXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgdW5pLmFkZEludGVyY2VwdG9yKCdyZXF1ZXN0UGF5bWVudCcsIHtcclxuICAgICAgc3VjY2VzcygpIHtcclxuICAgICAgICBzZWxmLl9wYXltZW50KCdwYXlfc3VjY2VzcycpO1xyXG4gICAgICB9LFxyXG4gICAgICBmYWlsKCkge1xyXG4gICAgICAgIHNlbGYuX3BheW1lbnQoJ3BheV9mYWlsJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVwb3J0KG9wdGlvbnMsIHNlbGYpIHtcclxuICAgIHRoaXMuc2VsZiA9IHNlbGY7XHJcbiAgICAvLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcclxuICAgIC8vICAgY29uc29sZS5sb2coJ3JlcG9ydCBpbml0Jyk7XHJcbiAgICAvLyB9XHJcbiAgICBzZXRQYWdlUmVzaWRlbmNlVGltZSgpO1xyXG4gICAgdGhpcy5fX2xpY2F0aW9uU2hvdyA9IHRydWU7XHJcbiAgICB0aGlzLl9zZW5kUmVwb3J0UmVxdWVzdChvcHRpb25zLCB0cnVlKTtcclxuICB9XHJcblxyXG4gIGxvYWQob3B0aW9ucywgc2VsZikge1xyXG4gICAgaWYgKCFzZWxmLiRzY29wZSAmJiAhc2VsZi4kbXApIHtcclxuICAgICAgY29uc3QgcGFnZSA9IGdldEN1cnJlbnRQYWdlcygpO1xyXG4gICAgICBzZWxmLiRzY29wZSA9IHBhZ2VbcGFnZS5sZW5ndGggLSAxXTtcclxuICAgIH1cclxuICAgIHRoaXMuc2VsZiA9IHNlbGY7XHJcbiAgICB0aGlzLl9xdWVyeSA9IG9wdGlvbnM7XHJcbiAgfVxyXG5cclxuICBzaG93KHNlbGYpIHtcclxuICAgIHRoaXMuc2VsZiA9IHNlbGY7XHJcbiAgICBpZiAoZ2V0UGFnZVR5cGVzKHNlbGYpKSB7XHJcbiAgICAgIHRoaXMuX3BhZ2VTaG93KHNlbGYpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fYXBwbGljYXRpb25TaG93KHNlbGYpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVhZHkoc2VsZikge1xyXG4gICAgLy8gdGhpcy5zZWxmID0gc2VsZjtcclxuICAgIC8vIGlmIChnZXRQYWdlVHlwZXMoc2VsZikpIHtcclxuICAgIC8vICAgdGhpcy5fcGFnZVNob3coc2VsZik7XHJcbiAgICAvLyB9XHJcbiAgfVxyXG4gIGhpZGUoc2VsZikge1xyXG4gICAgdGhpcy5zZWxmID0gc2VsZjtcclxuICAgIGlmIChnZXRQYWdlVHlwZXMoc2VsZikpIHtcclxuICAgICAgdGhpcy5fcGFnZUhpZGUoc2VsZik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9hcHBsaWNhdGlvbkhpZGUoc2VsZiwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGVycm9yKGVtKSB7XHJcbiAgICBpZiAodGhpcy5fcGxhdGZvcm0gPT09ICdkZXZ0b29scycpIHtcclxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKCflvZPliY3ov5DooYznjq/looPkuLrlvIDlj5HogIXlt6XlhbfvvIzkuI3kuIrmiqXmlbDmja7jgIInKTtcclxuICAgICAgfVxyXG4gICAgICAvLyByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgZW1WYWwgPSAnJztcclxuICAgIGlmICghZW0ubWVzc2FnZSkge1xyXG4gICAgICBlbVZhbCA9IEpTT04uc3RyaW5naWZ5KGVtKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGVtVmFsID0gZW0uc3RhY2s7XHJcbiAgICB9XHJcbiAgICBsZXQgb3B0aW9ucyA9IHtcclxuICAgICAgYWs6IHRoaXMuc3RhdERhdGEuYWssXHJcbiAgICAgIHV1aWQ6IHRoaXMuc3RhdERhdGEudXVpZCxcclxuICAgICAgbHQ6ICczMScsXHJcbiAgICAgIHV0OiB0aGlzLnN0YXREYXRhLnV0LFxyXG4gICAgICBjaDogdGhpcy5zdGF0RGF0YS5jaCxcclxuICAgICAgbXBzZGs6IHRoaXMuc3RhdERhdGEubXBzZGssXHJcbiAgICAgIG1wdjogdGhpcy5zdGF0RGF0YS5tcHYsXHJcbiAgICAgIHY6IHRoaXMuc3RhdERhdGEudixcclxuICAgICAgZW06IGVtVmFsLFxyXG4gICAgICB1c3Y6IHRoaXMuc3RhdERhdGEudXN2LFxyXG4gICAgICB0OiBnZXRUaW1lKCksXHJcbiAgICAgIHA6IHRoaXMuc3RhdERhdGEucFxyXG4gICAgfTtcclxuICAgIHRoaXMucmVxdWVzdChvcHRpb25zKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHN0YXQgPSBTdGF0LmdldEluc3RhbmNlKCk7XHJcbmxldCBpc0hpZGUgPSBmYWxzZTtcclxuY29uc3QgbGlmZWN5Y2xlID0ge1xyXG4gIG9uTGF1bmNoKG9wdGlvbnMpIHtcclxuICAgIHN0YXQucmVwb3J0KG9wdGlvbnMsIHRoaXMpO1xyXG4gIH0sXHJcbiAgb25SZWFkeSgpIHtcclxuICAgIHN0YXQucmVhZHkodGhpcyk7XHJcbiAgfSxcclxuICBvbkxvYWQob3B0aW9ucykge1xyXG4gICAgc3RhdC5sb2FkKG9wdGlvbnMsIHRoaXMpO1xyXG4gICAgLy8g6YeN5YaZ5YiG5Lqr77yM6I635Y+W5YiG5Lqr5LiK5oql5LqL5Lu2XHJcbiAgICBpZiAodGhpcy4kc2NvcGUgJiYgdGhpcy4kc2NvcGUub25TaGFyZUFwcE1lc3NhZ2UpIHtcclxuICAgICAgbGV0IG9sZFNoYXJlQXBwTWVzc2FnZSA9IHRoaXMuJHNjb3BlLm9uU2hhcmVBcHBNZXNzYWdlO1xyXG4gICAgICB0aGlzLiRzY29wZS5vblNoYXJlQXBwTWVzc2FnZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICBzdGF0LmludGVyY2VwdFNoYXJlKGZhbHNlKTtcclxuICAgICAgICByZXR1cm4gb2xkU2hhcmVBcHBNZXNzYWdlLmNhbGwodGhpcywgb3B0aW9ucylcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9LFxyXG4gIG9uU2hvdygpIHtcclxuICAgIGlzSGlkZSA9IGZhbHNlO1xyXG4gICAgc3RhdC5zaG93KHRoaXMpO1xyXG4gIH0sXHJcbiAgb25IaWRlKCkge1xyXG4gICAgaXNIaWRlID0gdHJ1ZTtcclxuICAgIHN0YXQuaGlkZSh0aGlzKTtcclxuICB9LFxyXG4gIG9uVW5sb2FkKCkge1xyXG4gICAgaWYgKGlzSGlkZSkge1xyXG4gICAgICBpc0hpZGUgPSBmYWxzZTtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBzdGF0LmhpZGUodGhpcyk7XHJcbiAgfSxcclxuICBvbkVycm9yKGUpIHtcclxuICAgIHN0YXQuZXJyb3IoZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gbWFpbigpIHtcclxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcclxuICAgIHVuaS5yZXBvcnQgPSBmdW5jdGlvbih0eXBlLCBvcHRpb25zKSB7fTtcclxuICB9ZWxzZXtcclxuICAgIGNvbnN0IFZ1ZSA9IHJlcXVpcmUoJ3Z1ZScpO1xyXG4gICAgKFZ1ZS5kZWZhdWx0IHx8IFZ1ZSkubWl4aW4obGlmZWN5Y2xlKTtcclxuICAgIHVuaS5yZXBvcnQgPSBmdW5jdGlvbih0eXBlLCBvcHRpb25zKSB7XHJcbiAgICAgIHN0YXQuc2VuZEV2ZW50KHR5cGUsIG9wdGlvbnMpO1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbm1haW4oKTtcclxuIiwiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX183QzI1MzAyXCJ9IiwidmFyIGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnt9O2Z1bmN0aW9uIHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZSYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkZWZhdWx0XCIpP2UuZGVmYXVsdDplfWZ1bmN0aW9uIG4oZSx0KXtyZXR1cm4gZSh0PXtleHBvcnRzOnt9fSx0LmV4cG9ydHMpLHQuZXhwb3J0c312YXIgcj1uKChmdW5jdGlvbihlLHQpe3ZhciBuO2UuZXhwb3J0cz0obj1ufHxmdW5jdGlvbihlLHQpe3ZhciBuPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZnVuY3Rpb24odCl7dmFyIG47cmV0dXJuIGUucHJvdG90eXBlPXQsbj1uZXcgZSxlLnByb3RvdHlwZT1udWxsLG59fSgpLHI9e30sbz1yLmxpYj17fSxzPW8uQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGUpe3ZhciB0PW4odGhpcyk7cmV0dXJuIGUmJnQubWl4SW4oZSksdC5oYXNPd25Qcm9wZXJ0eShcImluaXRcIikmJnRoaXMuaW5pdCE9PXQuaW5pdHx8KHQuaW5pdD1mdW5jdGlvbigpe3QuJHN1cGVyLmluaXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSksdC5pbml0LnByb3RvdHlwZT10LHQuJHN1cGVyPXRoaXMsdH0sY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5leHRlbmQoKTtyZXR1cm4gZS5pbml0LmFwcGx5KGUsYXJndW1lbnRzKSxlfSxpbml0OmZ1bmN0aW9uKCl7fSxtaXhJbjpmdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gZSllLmhhc093blByb3BlcnR5KHQpJiYodGhpc1t0XT1lW3RdKTtlLmhhc093blByb3BlcnR5KFwidG9TdHJpbmdcIikmJih0aGlzLnRvU3RyaW5nPWUudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LGk9by5Xb3JkQXJyYXk9cy5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZSx0KXtlPXRoaXMud29yZHM9ZXx8W10sdGhpcy5zaWdCeXRlcz1udWxsIT10P3Q6NCplLmxlbmd0aH0sdG9TdHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuKGV8fGMpLnN0cmluZ2lmeSh0aGlzKX0sY29uY2F0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMud29yZHMsbj1lLndvcmRzLHI9dGhpcy5zaWdCeXRlcyxvPWUuc2lnQnl0ZXM7aWYodGhpcy5jbGFtcCgpLHIlNClmb3IodmFyIHM9MDtzPG87cysrKXt2YXIgaT1uW3M+Pj4yXT4+PjI0LXMlNCo4JjI1NTt0W3Ircz4+PjJdfD1pPDwyNC0ocitzKSU0Kjh9ZWxzZSBmb3Iocz0wO3M8bztzKz00KXRbcitzPj4+Ml09bltzPj4+Ml07cmV0dXJuIHRoaXMuc2lnQnl0ZXMrPW8sdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLndvcmRzLG49dGhpcy5zaWdCeXRlczt0W24+Pj4yXSY9NDI5NDk2NzI5NTw8MzItbiU0KjgsdC5sZW5ndGg9ZS5jZWlsKG4vNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGU9cy5jbG9uZS5jYWxsKHRoaXMpO3JldHVybiBlLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCksZX0scmFuZG9tOmZ1bmN0aW9uKHQpe2Zvcih2YXIgbixyPVtdLG89ZnVuY3Rpb24odCl7dD10O3ZhciBuPTk4NzY1NDMyMSxyPTQyOTQ5NjcyOTU7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG89KChuPTM2OTY5Kig2NTUzNSZuKSsobj4+MTYpJnIpPDwxNikrKHQ9MThlMyooNjU1MzUmdCkrKHQ+PjE2KSZyKSZyO3JldHVybiBvLz00Mjk0OTY3Mjk2LChvKz0uNSkqKGUucmFuZG9tKCk+LjU/MTotMSl9fSxzPTA7czx0O3MrPTQpe3ZhciBhPW8oNDI5NDk2NzI5Nioobnx8ZS5yYW5kb20oKSkpO249OTg3NjU0MDcxKmEoKSxyLnB1c2goNDI5NDk2NzI5NiphKCl8MCl9cmV0dXJuIG5ldyBpLmluaXQocix0KX19KSxhPXIuZW5jPXt9LGM9YS5IZXg9e3N0cmluZ2lmeTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS53b3JkcyxuPWUuc2lnQnl0ZXMscj1bXSxvPTA7bzxuO28rKyl7dmFyIHM9dFtvPj4+Ml0+Pj4yNC1vJTQqOCYyNTU7ci5wdXNoKChzPj4+NCkudG9TdHJpbmcoMTYpKSxyLnB1c2goKDE1JnMpLnRvU3RyaW5nKDE2KSl9cmV0dXJuIHIuam9pbihcIlwiKX0scGFyc2U6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUubGVuZ3RoLG49W10scj0wO3I8dDtyKz0yKW5bcj4+PjNdfD1wYXJzZUludChlLnN1YnN0cihyLDIpLDE2KTw8MjQtciU4KjQ7cmV0dXJuIG5ldyBpLmluaXQobix0LzIpfX0sdT1hLkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLndvcmRzLG49ZS5zaWdCeXRlcyxyPVtdLG89MDtvPG47bysrKXt2YXIgcz10W28+Pj4yXT4+PjI0LW8lNCo4JjI1NTtyLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShzKSl9cmV0dXJuIHIuam9pbihcIlwiKX0scGFyc2U6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUubGVuZ3RoLG49W10scj0wO3I8dDtyKyspbltyPj4+Ml18PSgyNTUmZS5jaGFyQ29kZUF0KHIpKTw8MjQtciU0Kjg7cmV0dXJuIG5ldyBpLmluaXQobix0KX19LGw9YS5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHUuc3RyaW5naWZ5KGUpKSl9Y2F0Y2goZSl7dGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIFVURi04IGRhdGFcIil9fSxwYXJzZTpmdW5jdGlvbihlKXtyZXR1cm4gdS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoZSkpKX19LGY9by5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtPXMuZXh0ZW5kKHtyZXNldDpmdW5jdGlvbigpe3RoaXMuX2RhdGE9bmV3IGkuaW5pdCx0aGlzLl9uRGF0YUJ5dGVzPTB9LF9hcHBlbmQ6ZnVuY3Rpb24oZSl7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPWwucGFyc2UoZSkpLHRoaXMuX2RhdGEuY29uY2F0KGUpLHRoaXMuX25EYXRhQnl0ZXMrPWUuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKHQpe3ZhciBuPXRoaXMuX2RhdGEscj1uLndvcmRzLG89bi5zaWdCeXRlcyxzPXRoaXMuYmxvY2tTaXplLGE9by8oNCpzKSxjPShhPXQ/ZS5jZWlsKGEpOmUubWF4KCgwfGEpLXRoaXMuX21pbkJ1ZmZlclNpemUsMCkpKnMsdT1lLm1pbig0KmMsbyk7aWYoYyl7Zm9yKHZhciBsPTA7bDxjO2wrPXMpdGhpcy5fZG9Qcm9jZXNzQmxvY2socixsKTt2YXIgZj1yLnNwbGljZSgwLGMpO24uc2lnQnl0ZXMtPXV9cmV0dXJuIG5ldyBpLmluaXQoZix1KX0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgZT1zLmNsb25lLmNhbGwodGhpcyk7cmV0dXJuIGUuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpLGV9LF9taW5CdWZmZXJTaXplOjB9KSxwPShvLkhhc2hlcj1mLmV4dGVuZCh7Y2ZnOnMuZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihlKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoZSksdGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe2YucmVzZXQuY2FsbCh0aGlzKSx0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fYXBwZW5kKGUpLHRoaXMuX3Byb2Nlc3MoKSx0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmdGhpcy5fYXBwZW5kKGUpLHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQsbil7cmV0dXJuIG5ldyBlLmluaXQobikuZmluYWxpemUodCl9fSxfY3JlYXRlSG1hY0hlbHBlcjpmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxuKXtyZXR1cm4gbmV3IHAuSE1BQy5pbml0KGUsbikuZmluYWxpemUodCl9fX0pLHIuYWxnbz17fSk7cmV0dXJuIHJ9KE1hdGgpLG4pfSkpLG89KG4oKGZ1bmN0aW9uKGUsdCl7dmFyIG47ZS5leHBvcnRzPShuPXIsZnVuY3Rpb24oZSl7dmFyIHQ9bixyPXQubGliLG89ci5Xb3JkQXJyYXkscz1yLkhhc2hlcixpPXQuYWxnbyxhPVtdOyFmdW5jdGlvbigpe2Zvcih2YXIgdD0wO3Q8NjQ7dCsrKWFbdF09NDI5NDk2NzI5NiplLmFicyhlLnNpbih0KzEpKXwwfSgpO3ZhciBjPWkuTUQ1PXMuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IG8uaW5pdChbMTczMjU4NDE5Myw0MDIzMjMzNDE3LDI1NjIzODMxMDIsMjcxNzMzODc4XSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wO248MTY7bisrKXt2YXIgcj10K24sbz1lW3JdO2Vbcl09MTY3MTE5MzUmKG88PDh8bz4+PjI0KXw0Mjc4MjU1MzYwJihvPDwyNHxvPj4+OCl9dmFyIHM9dGhpcy5faGFzaC53b3JkcyxpPWVbdCswXSxjPWVbdCsxXSxoPWVbdCsyXSxkPWVbdCszXSx5PWVbdCs0XSx2PWVbdCs1XSxnPWVbdCs2XSxfPWVbdCs3XSxtPWVbdCs4XSxiPWVbdCs5XSx3PWVbdCsxMF0sRT1lW3QrMTFdLFQ9ZVt0KzEyXSxPPWVbdCsxM10sUz1lW3QrMTRdLGs9ZVt0KzE1XSxBPXNbMF0sUD1zWzFdLEk9c1syXSxOPXNbM107QT11KEEsUCxJLE4saSw3LGFbMF0pLE49dShOLEEsUCxJLGMsMTIsYVsxXSksST11KEksTixBLFAsaCwxNyxhWzJdKSxQPXUoUCxJLE4sQSxkLDIyLGFbM10pLEE9dShBLFAsSSxOLHksNyxhWzRdKSxOPXUoTixBLFAsSSx2LDEyLGFbNV0pLEk9dShJLE4sQSxQLGcsMTcsYVs2XSksUD11KFAsSSxOLEEsXywyMixhWzddKSxBPXUoQSxQLEksTixtLDcsYVs4XSksTj11KE4sQSxQLEksYiwxMixhWzldKSxJPXUoSSxOLEEsUCx3LDE3LGFbMTBdKSxQPXUoUCxJLE4sQSxFLDIyLGFbMTFdKSxBPXUoQSxQLEksTixULDcsYVsxMl0pLE49dShOLEEsUCxJLE8sMTIsYVsxM10pLEk9dShJLE4sQSxQLFMsMTcsYVsxNF0pLEE9bChBLFA9dShQLEksTixBLGssMjIsYVsxNV0pLEksTixjLDUsYVsxNl0pLE49bChOLEEsUCxJLGcsOSxhWzE3XSksST1sKEksTixBLFAsRSwxNCxhWzE4XSksUD1sKFAsSSxOLEEsaSwyMCxhWzE5XSksQT1sKEEsUCxJLE4sdiw1LGFbMjBdKSxOPWwoTixBLFAsSSx3LDksYVsyMV0pLEk9bChJLE4sQSxQLGssMTQsYVsyMl0pLFA9bChQLEksTixBLHksMjAsYVsyM10pLEE9bChBLFAsSSxOLGIsNSxhWzI0XSksTj1sKE4sQSxQLEksUyw5LGFbMjVdKSxJPWwoSSxOLEEsUCxkLDE0LGFbMjZdKSxQPWwoUCxJLE4sQSxtLDIwLGFbMjddKSxBPWwoQSxQLEksTixPLDUsYVsyOF0pLE49bChOLEEsUCxJLGgsOSxhWzI5XSksST1sKEksTixBLFAsXywxNCxhWzMwXSksQT1mKEEsUD1sKFAsSSxOLEEsVCwyMCxhWzMxXSksSSxOLHYsNCxhWzMyXSksTj1mKE4sQSxQLEksbSwxMSxhWzMzXSksST1mKEksTixBLFAsRSwxNixhWzM0XSksUD1mKFAsSSxOLEEsUywyMyxhWzM1XSksQT1mKEEsUCxJLE4sYyw0LGFbMzZdKSxOPWYoTixBLFAsSSx5LDExLGFbMzddKSxJPWYoSSxOLEEsUCxfLDE2LGFbMzhdKSxQPWYoUCxJLE4sQSx3LDIzLGFbMzldKSxBPWYoQSxQLEksTixPLDQsYVs0MF0pLE49ZihOLEEsUCxJLGksMTEsYVs0MV0pLEk9ZihJLE4sQSxQLGQsMTYsYVs0Ml0pLFA9ZihQLEksTixBLGcsMjMsYVs0M10pLEE9ZihBLFAsSSxOLGIsNCxhWzQ0XSksTj1mKE4sQSxQLEksVCwxMSxhWzQ1XSksST1mKEksTixBLFAsaywxNixhWzQ2XSksQT1wKEEsUD1mKFAsSSxOLEEsaCwyMyxhWzQ3XSksSSxOLGksNixhWzQ4XSksTj1wKE4sQSxQLEksXywxMCxhWzQ5XSksST1wKEksTixBLFAsUywxNSxhWzUwXSksUD1wKFAsSSxOLEEsdiwyMSxhWzUxXSksQT1wKEEsUCxJLE4sVCw2LGFbNTJdKSxOPXAoTixBLFAsSSxkLDEwLGFbNTNdKSxJPXAoSSxOLEEsUCx3LDE1LGFbNTRdKSxQPXAoUCxJLE4sQSxjLDIxLGFbNTVdKSxBPXAoQSxQLEksTixtLDYsYVs1Nl0pLE49cChOLEEsUCxJLGssMTAsYVs1N10pLEk9cChJLE4sQSxQLGcsMTUsYVs1OF0pLFA9cChQLEksTixBLE8sMjEsYVs1OV0pLEE9cChBLFAsSSxOLHksNixhWzYwXSksTj1wKE4sQSxQLEksRSwxMCxhWzYxXSksST1wKEksTixBLFAsaCwxNSxhWzYyXSksUD1wKFAsSSxOLEEsYiwyMSxhWzYzXSksc1swXT1zWzBdK0F8MCxzWzFdPXNbMV0rUHwwLHNbMl09c1syXStJfDAsc1szXT1zWzNdK058MH0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9kYXRhLG49dC53b3JkcyxyPTgqdGhpcy5fbkRhdGFCeXRlcyxvPTgqdC5zaWdCeXRlcztuW28+Pj41XXw9MTI4PDwyNC1vJTMyO3ZhciBzPWUuZmxvb3Ioci80Mjk0OTY3Mjk2KSxpPXI7blsxNSsobys2ND4+Pjk8PDQpXT0xNjcxMTkzNSYoczw8OHxzPj4+MjQpfDQyNzgyNTUzNjAmKHM8PDI0fHM+Pj44KSxuWzE0KyhvKzY0Pj4+OTw8NCldPTE2NzExOTM1JihpPDw4fGk+Pj4yNCl8NDI3ODI1NTM2MCYoaTw8MjR8aT4+PjgpLHQuc2lnQnl0ZXM9NCoobi5sZW5ndGgrMSksdGhpcy5fcHJvY2VzcygpO2Zvcih2YXIgYT10aGlzLl9oYXNoLGM9YS53b3Jkcyx1PTA7dTw0O3UrKyl7dmFyIGw9Y1t1XTtjW3VdPTE2NzExOTM1JihsPDw4fGw+Pj4yNCl8NDI3ODI1NTM2MCYobDw8MjR8bD4+PjgpfXJldHVybiBhfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBlPXMuY2xvbmUuY2FsbCh0aGlzKTtyZXR1cm4gZS5faGFzaD10aGlzLl9oYXNoLmNsb25lKCksZX19KTtmdW5jdGlvbiB1KGUsdCxuLHIsbyxzLGkpe3ZhciBhPWUrKHQmbnx+dCZyKStvK2k7cmV0dXJuKGE8PHN8YT4+PjMyLXMpK3R9ZnVuY3Rpb24gbChlLHQsbixyLG8scyxpKXt2YXIgYT1lKyh0JnJ8biZ+cikrbytpO3JldHVybihhPDxzfGE+Pj4zMi1zKSt0fWZ1bmN0aW9uIGYoZSx0LG4scixvLHMsaSl7dmFyIGE9ZSsodF5uXnIpK28raTtyZXR1cm4oYTw8c3xhPj4+MzItcykrdH1mdW5jdGlvbiBwKGUsdCxuLHIsbyxzLGkpe3ZhciBhPWUrKG5eKHR8fnIpKStvK2k7cmV0dXJuKGE8PHN8YT4+PjMyLXMpK3R9dC5NRDU9cy5fY3JlYXRlSGVscGVyKGMpLHQuSG1hY01ENT1zLl9jcmVhdGVIbWFjSGVscGVyKGMpfShNYXRoKSxuLk1ENSl9KSksbigoZnVuY3Rpb24oZSx0KXt2YXIgbixvLHM7ZS5leHBvcnRzPShvPShuPXIpLmxpYi5CYXNlLHM9bi5lbmMuVXRmOCx2b2lkKG4uYWxnby5ITUFDPW8uZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGUsdCl7ZT10aGlzLl9oYXNoZXI9bmV3IGUuaW5pdCxcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9cy5wYXJzZSh0KSk7dmFyIG49ZS5ibG9ja1NpemUscj00Km47dC5zaWdCeXRlcz5yJiYodD1lLmZpbmFsaXplKHQpKSx0LmNsYW1wKCk7Zm9yKHZhciBvPXRoaXMuX29LZXk9dC5jbG9uZSgpLGk9dGhpcy5faUtleT10LmNsb25lKCksYT1vLndvcmRzLGM9aS53b3Jkcyx1PTA7dTxuO3UrKylhW3VdXj0xNTQ5NTU2ODI4LGNbdV1ePTkwOTUyMjQ4NjtvLnNpZ0J5dGVzPWkuc2lnQnl0ZXM9cix0aGlzLnJlc2V0KCl9LHJlc2V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5faGFzaGVyO2UucmVzZXQoKSxlLnVwZGF0ZSh0aGlzLl9pS2V5KX0sdXBkYXRlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9oYXNoZXIudXBkYXRlKGUpLHRoaXN9LGZpbmFsaXplOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2hhc2hlcixuPXQuZmluYWxpemUoZSk7cmV0dXJuIHQucmVzZXQoKSx0LmZpbmFsaXplKHRoaXMuX29LZXkuY2xvbmUoKS5jb25jYXQobikpfX0pKSl9KSksbigoZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ci5IbWFjTUQ1fSkpKTtjbGFzcyBzIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IoZSl7c3VwZXIoZS5tZXNzYWdlKSx0aGlzLmVyck1zZz1lLm1lc3NhZ2V8fFwiXCIsT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcyx7Y29kZTp7Z2V0OigpPT5lLmNvZGV9LHJlcXVlc3RJZDp7Z2V0OigpPT5lLnJlcXVlc3RJZH0sbWVzc2FnZTp7Z2V0KCl7cmV0dXJuIHRoaXMuZXJyTXNnfSxzZXQoZSl7dGhpcy5lcnJNc2c9ZX19fSl9fXZhciBpPXtzaWduOmZ1bmN0aW9uKGUsdCl7bGV0IG49XCJcIjtyZXR1cm4gT2JqZWN0LmtleXMoZSkuc29ydCgpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2VbdF0mJihuPW4rXCImXCIrdCtcIj1cIitlW3RdKX0pKSxuPW4uc2xpY2UoMSksbyhuLHQpLnRvU3RyaW5nKCl9LHdyYXBwZWRSZXF1ZXN0OmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJvbWlzZSgodCxuKT0+e3VuaS5yZXF1ZXN0KE9iamVjdC5hc3NpZ24oZSx7Y29tcGxldGUoZSl7ZXx8KGU9e30pLDA9PT1lLmVyck1zZy5pbmRleE9mKFwicmVxdWVzdDpmYWlsXCIpJiZcImg1XCI9PT1wcm9jZXNzLmVudi5WVUVfQVBQX1BMQVRGT1JNJiZcImRldmVsb3BtZW50XCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOViYmY29uc29sZS53YXJuKFwi5Y+R5biDSDXvvIzpnIDopoHlnKh1bmlDbG91ZOWQjuWPsOaTjeS9nO+8jOe7keWumuWuieWFqOWfn+WQje+8jOWQpuWImeS8muWboOS4uui3qOWfn+mXrumimOiAjOaXoOazleiuv+mXruOAguaVmeeoi+WPguiAg++8mmh0dHBzOi8vdW5pYXBwLmRjbG91ZC5pby91bmlDbG91ZC9xdWlja3N0YXJ0P2lkPUg1JUU0JUI4JUFEJUU0JUJEJUJGJUU3JTk0JUE4dW5pY2xvdWRcIik7Y29uc3Qgcj1lLmRhdGEmJmUuZGF0YS5oZWFkZXImJmUuZGF0YS5oZWFkZXJbXCJ4LXNlcnZlcmxlc3MtcmVxdWVzdC1pZFwiXTtpZighZS5zdGF0dXNDb2RlfHxlLnN0YXR1c0NvZGU+PTQwMClyZXR1cm4gbihuZXcgcyh7Y29kZTpcIlNZU19FUlJcIixtZXNzYWdlOmUuZXJyTXNnfHxcInJlcXVlc3Q6ZmFpbFwiLHJlcXVlc3RJZDpyfSkpO2NvbnN0IG89ZS5kYXRhO2lmKG8uZXJyb3IpcmV0dXJuIG4obmV3IHMoe2NvZGU6by5lcnJvci5jb2RlLG1lc3NhZ2U6by5lcnJvci5tZXNzYWdlLHJlcXVlc3RJZDpyfSkpO28ucmVzdWx0PW8uZGF0YSxvLnJlcXVlc3RJZD1yLGRlbGV0ZSBvLmRhdGEsdChvKX19KSl9KX19O2NvbnN0IGE9e2ltYWdlOlwiaW1hZ2UvKlwiLGpwZzpcImltYWdlL2pwZWdcIixqcGVnOlwiaW1hZ2UvanBlZ1wiLHBuZzpcImltYWdlL3BuZ1wiLGdpZjpcImltYWdlL2dpZlwiLHdlYnA6XCJpbWFnZS93ZWJwXCIsc3ZnOlwiaW1hZ2Uvc3ZnK3htbFwiLG1wMzpcImF1ZGlvL21wM1wiLG1wNDpcInZpZGVvL21wNFwiLG9nZzpcImF1ZGlvL29nZ1wiLHdlYm06XCJ2aWRlby93ZWJtXCJ9O2Z1bmN0aW9uIGMoZSl7cmV0dXJuIGFbZS50b0xvd2VyQ2FzZSgpXX1jbGFzcyB1e2NvbnN0cnVjdG9yKGUpe1tcInNwYWNlSWRcIixcImNsaWVudFNlY3JldFwiXS5mb3JFYWNoKHQ9PntpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCkpdGhyb3cgbmV3IEVycm9yKGDnvLrlsJHlj4LmlbAke3R9YCl9KSx0aGlzLmNvbmZpZz1PYmplY3QuYXNzaWduKHt9LHtlbmRwb2ludDpcImh0dHBzOi8vYXBpLmJzcGFwcC5jb21cIn0sZSksdGhpcy5jb25maWcucHJvdmlkZXI9XCJhbGl5dW5cIix0aGlzLmNvbmZpZy5yZXF1ZXN0VXJsPXRoaXMuY29uZmlnLmVuZHBvaW50K1wiL2NsaWVudFwiLHRoaXMuY29uZmlnLmVudlR5cGU9dGhpcy5jb25maWcuZW52VHlwZXx8XCJwdWJsaWNcIix0aGlzLmNvbmZpZy5hY2Nlc3NUb2tlbktleT1cImFjY2Vzc190b2tlbl9cIit0aGlzLmNvbmZpZy5zcGFjZUlkfWdldCBoYXNBY2Nlc3NUb2tlbigpe3JldHVybiEhdGhpcy5hY2Nlc3NUb2tlbn1zZXRBY2Nlc3NUb2tlbihlKXt0aGlzLmFjY2Vzc1Rva2VuPWV9cmVxdWVzdEF1dGgoZSl7cmV0dXJuIGkud3JhcHBlZFJlcXVlc3QoZSl9cmVxdWVzdChlLHQpe3JldHVybiB0aGlzLmhhc0FjY2Vzc1Rva2VuP3Q/aS53cmFwcGVkUmVxdWVzdChlKTppLndyYXBwZWRSZXF1ZXN0KGUpLmNhdGNoKHQ9Pm5ldyBQcm9taXNlKChlLG4pPT57IXR8fFwiR0FURVdBWV9JTlZBTElEX1RPS0VOXCIhPT10LmNvZGUmJlwiSW52YWxpZFBhcmFtZXRlci5JbnZhbGlkVG9rZW5cIiE9PXQuY29kZT9uKHQpOmUoKX0pLnRoZW4oKCk9PnRoaXMuZ2V0QWNjZXNzVG9rZW4oKSkudGhlbigoKT0+e2NvbnN0IHQ9dGhpcy5yZWJ1aWxkUmVxdWVzdChlKTtyZXR1cm4gdGhpcy5yZXF1ZXN0KHQsITApfSkpOnRoaXMuZ2V0QWNjZXNzVG9rZW4oKS50aGVuKCgpPT57Y29uc3QgdD10aGlzLnJlYnVpbGRSZXF1ZXN0KGUpO3JldHVybiB0aGlzLnJlcXVlc3QodCwhMCl9KX1yZWJ1aWxkUmVxdWVzdChlKXtjb25zdCB0PU9iamVjdC5hc3NpZ24oe30sZSk7cmV0dXJuIHQuZGF0YS50b2tlbj10aGlzLmFjY2Vzc1Rva2VuLHQuaGVhZGVyW1wieC1iYXNlbWVudC10b2tlblwiXT10aGlzLmFjY2Vzc1Rva2VuLHQuaGVhZGVyW1wieC1zZXJ2ZXJsZXNzLXNpZ25cIl09aS5zaWduKHQuZGF0YSx0aGlzLmNvbmZpZy5jbGllbnRTZWNyZXQpLHR9c2V0dXBSZXF1ZXN0KGUsdCl7Y29uc3Qgbj1PYmplY3QuYXNzaWduKHt9LGUse3NwYWNlSWQ6dGhpcy5jb25maWcuc3BhY2VJZCx0aW1lc3RhbXA6RGF0ZS5ub3coKX0pLHI9e1wiQ29udGVudC1UeXBlXCI6XCJhcHBsaWNhdGlvbi9qc29uXCJ9O3JldHVyblwiYXV0aFwiIT09dCYmKG4udG9rZW49dGhpcy5hY2Nlc3NUb2tlbixyW1wieC1iYXNlbWVudC10b2tlblwiXT10aGlzLmFjY2Vzc1Rva2VuKSxyW1wieC1zZXJ2ZXJsZXNzLXNpZ25cIl09aS5zaWduKG4sdGhpcy5jb25maWcuY2xpZW50U2VjcmV0KSx7dXJsOnRoaXMuY29uZmlnLnJlcXVlc3RVcmwsbWV0aG9kOlwiUE9TVFwiLGRhdGE6bixkYXRhVHlwZTpcImpzb25cIixoZWFkZXI6cn19Z2V0QWNjZXNzVG9rZW4oKXtyZXR1cm4gdGhpcy5yZXF1ZXN0QXV0aCh0aGlzLnNldHVwUmVxdWVzdCh7bWV0aG9kOlwic2VydmVybGVzcy5hdXRoLnVzZXIuYW5vbnltb3VzQXV0aG9yaXplXCIscGFyYW1zOlwie31cIn0sXCJhdXRoXCIpKS50aGVuKGU9Pm5ldyBQcm9taXNlKCh0LG4pPT57ZS5yZXN1bHQmJmUucmVzdWx0LmFjY2Vzc1Rva2VuPyh0aGlzLnNldEFjY2Vzc1Rva2VuKGUucmVzdWx0LmFjY2Vzc1Rva2VuKSx0KHRoaXMuYWNjZXNzVG9rZW4pKTpuKG5ldyBzKHtjb2RlOlwiQVVUSF9GQUlMRURcIixtZXNzYWdlOlwi6I635Y+WYWNjZXNzVG9rZW7lpLHotKVcIn0pKX0pKX1hdXRob3JpemUoKXt0aGlzLmdldEFjY2Vzc1Rva2VuKCl9Y2FsbEZ1bmN0aW9uKGUpe2NvbnN0IHQ9e21ldGhvZDpcInNlcnZlcmxlc3MuZnVuY3Rpb24ucnVudGltZS5pbnZva2VcIixwYXJhbXM6SlNPTi5zdHJpbmdpZnkoe2Z1bmN0aW9uVGFyZ2V0OmUubmFtZSxmdW5jdGlvbkFyZ3M6ZS5kYXRhfHx7fX0pfTtyZXR1cm4gdGhpcy5jb25maWcudXNlRGVidWdGdW5jdGlvbj90aGlzLnJlcXVlc3QodGhpcy5zZXR1cFJlcXVlc3QodCkpLnRoZW4odD0+e2lmKHQmJnQucmVxdWVzdElkKXtjb25zdCBuPUpTT04uc3RyaW5naWZ5KHtzcGFjZUlkOnRoaXMuY29uZmlnLnNwYWNlSWQsZnVuY3Rpb25OYW1lOmUubmFtZSxyZXF1ZXN0SWQ6dC5yZXF1ZXN0SWR9KTtjb25zb2xlLmxvZyhgW2FsaXl1bi1yZXF1ZXN0XSR7bn1bL2FsaXl1bi1yZXF1ZXN0XWApfXJldHVybiBQcm9taXNlLnJlc29sdmUodCl9KS5jYXRjaCh0PT57aWYodCYmdC5yZXF1ZXN0SWQpe2NvbnN0IG49SlNPTi5zdHJpbmdpZnkoe3NwYWNlSWQ6dGhpcy5jb25maWcuc3BhY2VJZCxmdW5jdGlvbk5hbWU6ZS5uYW1lLHJlcXVlc3RJZDp0LnJlcXVlc3RJZH0pO2NvbnNvbGUubG9nKGBbYWxpeXVuLXJlcXVlc3RdJHtufVsvYWxpeXVuLXJlcXVlc3RdYCl9cmV0dXJuIFByb21pc2UucmVqZWN0KHQpfSk6dGhpcy5yZXF1ZXN0KHRoaXMuc2V0dXBSZXF1ZXN0KHQpKX1nZXRPU1NVcGxvYWRPcHRpb25zRnJvbVBhdGgoZSl7Y29uc3QgdD17bWV0aG9kOlwic2VydmVybGVzcy5maWxlLnJlc291cmNlLmdlbmVyYXRlUHJveGltYWxTaWduXCIscGFyYW1zOkpTT04uc3RyaW5naWZ5KGUpfTtyZXR1cm4gdGhpcy5yZXF1ZXN0KHRoaXMuc2V0dXBSZXF1ZXN0KHQpKX11cGxvYWRGaWxlVG9PU1Moe3VybDplLGZvcm1EYXRhOnQsZmlsZU5hbWU6bixuYW1lOnIsZmlsZVBhdGg6byxmaWxlVHlwZTppLGNvbnRlbnRUeXBlOmEsb25VcGxvYWRQcm9ncmVzczpjfSl7cmV0dXJuIG5ldyBQcm9taXNlKChhLHUpPT57Y29uc3QgbD11bmkudXBsb2FkRmlsZSh7dXJsOmUsZm9ybURhdGE6dCxmaWxlTmFtZTpuLG5hbWU6cixmaWxlUGF0aDpvLGZpbGVUeXBlOmksaGVhZGVyOntcIlgtT1NTLXNlcnZlci1zaWRlLWVuY3JweXRpb25cIjpcIkFFUzI1NlwifSxzdWNjZXNzKGUpe2UmJmUuc3RhdHVzQ29kZTw0MDA/YShlKTp1KG5ldyBzKHtjb2RlOlwiVVBMT0FEX0ZBSUxFRFwiLG1lc3NhZ2U6XCLmlofku7bkuIrkvKDlpLHotKVcIn0pKX0sZmFpbChlKXt1KGUpfX0pO1wiZnVuY3Rpb25cIj09dHlwZW9mIGMmJmwub25Qcm9ncmVzc1VwZGF0ZShlPT57Yyh7bG9hZGVkOmUudG90YWxCeXRlc1NlbnQsdG90YWw6ZS50b3RhbEJ5dGVzRXhwZWN0ZWRUb1NlbmR9KX0pfSl9cmVwb3J0T1NTVXBsb2FkKGUpe2NvbnN0IHQ9e21ldGhvZDpcInNlcnZlcmxlc3MuZmlsZS5yZXNvdXJjZS5yZXBvcnRcIixwYXJhbXM6SlNPTi5zdHJpbmdpZnkoZSl9O3JldHVybiB0aGlzLnJlcXVlc3QodGhpcy5zZXR1cFJlcXVlc3QodCkpfXVwbG9hZEZpbGUoe2ZpbGVQYXRoOmUsY2xvdWRQYXRoOnQsb25VcGxvYWRQcm9ncmVzczpuLGNvbmZpZzpyfSl7Y29uc3Qgbz1yJiZyLmVudlR5cGV8fHRoaXMuY29uZmlnLmVudlR5cGU7bGV0IGksdSxsLGYscCxoPXR8fGUuc3BsaXQoXCIvXCIpLnBvcCgpO3JldHVybihpPVwiaDVcIj09PXByb2Nlc3MuZW52LlZVRV9BUFBfUExBVEZPUk0/bmV3IFByb21pc2UoKG4scik9Pnt2YXIgbz1uZXcgWE1MSHR0cFJlcXVlc3Q7by5vcGVuKFwiR0VUXCIsZSwhMCksby5yZXNwb25zZVR5cGU9XCJibG9iXCIsby5vbmxvYWQ9ZnVuY3Rpb24oKXsodT1mdW5jdGlvbihlKXtsZXQgdDtyZXR1cm4gT2JqZWN0LmtleXMoYSkuZm9yRWFjaChuPT57YVtuXT09PWUmJih0PW4pfSksdH0odGhpcy5yZXNwb25zZS50eXBlKSl8fHIobmV3IHMoe2NvZGU6XCJVTlNVUFBPUlRFRF9GSUxFX1RZUEVcIixtZXNzYWdlOlwi5LiN5pSv5oyB55qE5paH5Lu257G75Z6LXCJ9KSksdHx8KGgrPVwiLlwiK3UpLG4oKX0sby5zZW5kKCl9KTpjKHU9ZS5zcGxpdChcIj9cIilbMF0uc3BsaXQoXCIuXCIpLnBvcCgpKT9Qcm9taXNlLnJlc29sdmUoKTpQcm9taXNlLnJlamVjdChuZXcgcyh7Y29kZTpcIlVOU1VQUE9SVEVEX0ZJTEVfVFlQRVwiLG1lc3NhZ2U6XCLkuI3mlK/mjIHnmoTmlofku7bnsbvlnotcIn0pKSkudGhlbigoKT0+bmV3IFByb21pc2UoKHQsbik9Pnt1bmkuZ2V0RmlsZUluZm8/dW5pLmdldEZpbGVJbmZvKHtmaWxlUGF0aDplLHN1Y2Nlc3MoZSl7dChlLnNpemUpfSxmYWlsKGUpe24oZSl9fSk6dCgwKX0pKS50aGVuKGU9PnRoaXMuZ2V0T1NTVXBsb2FkT3B0aW9uc0Zyb21QYXRoKHtlbnY6byxmaWxlbmFtZTpoLHNpemU6ZX0pKS50aGVuKHQ9Pntjb25zdCByPXQucmVzdWx0O2w9Yyh1KSxmPXIuaWQscD1cImh0dHBzOi8vXCIrci5jZG5Eb21haW4rXCIvXCIrci5vc3NQYXRoO2NvbnN0IG89e3VybDpcImh0dHBzOi8vXCIrci5ob3N0LGZvcm1EYXRhOntcIkNhY2hlLUNvbnRyb2xcIjpcIm1heC1hZ2U9MjU5MjAwMFwiLFwiQ29udGVudC1EaXNwb3NpdGlvblwiOlwiYXR0YWNobWVudFwiLE9TU0FjY2Vzc0tleUlkOnIuYWNjZXNzS2V5SWQsU2lnbmF0dXJlOnIuc2lnbmF0dXJlLGhvc3Q6ci5ob3N0LGlkOmYsa2V5OnIub3NzUGF0aCxwb2xpY3k6ci5wb2xpY3ksc3VjY2Vzc19hY3Rpb25fc3RhdHVzOjIwMH0sZmlsZU5hbWU6XCJmaWxlXCIsbmFtZTpcImZpbGVcIixmaWxlUGF0aDplLGZpbGVUeXBlOlwiaW1hZ2VcIixjb250ZW50VHlwZTpsfTtyZXR1cm4gdGhpcy51cGxvYWRGaWxlVG9PU1MoT2JqZWN0LmFzc2lnbih7fSxvLHtvblVwbG9hZFByb2dyZXNzOm59KSl9KS50aGVuKCgpPT50aGlzLnJlcG9ydE9TU1VwbG9hZCh7aWQ6Zixjb250ZW50VHlwZTpsfSkpLnRoZW4odD0+bmV3IFByb21pc2UoKG4scik9Pnt0LnN1Y2Nlc3M/bih7c3VjY2VzczohMCxmaWxlUGF0aDplLGZpbGVJRDpwfSk6cihuZXcgcyh7Y29kZTpcIlVQTE9BRF9GQUlMRURcIixtZXNzYWdlOlwi5paH5Lu25LiK5Lyg5aSx6LSlXCJ9KSl9KSl9ZGVsZXRlRmlsZSh7ZmlsZUxpc3Q6ZX0pe2NvbnN0IHQ9e21ldGhvZDpcInNlcnZlcmxlc3MuZmlsZS5yZXNvdXJjZS5kZWxldGVcIixwYXJhbXM6SlNPTi5zdHJpbmdpZnkoe2lkOmVbMF19KX07cmV0dXJuIHRoaXMucmVxdWVzdCh0aGlzLnNldHVwUmVxdWVzdCh0KSl9fWNvbnN0IGw9cmVxdWlyZShcInVuaS1zdGF0LWNvbmZpZ1wiKS5kZWZhdWx0fHxyZXF1aXJlKFwidW5pLXN0YXQtY29uZmlnXCIpLGY9XCJfX0RDX1NUQVRfVVVJRFwiLHA9XCJfX0RDX1VVSURfVkFMVUVcIixoPVwiaHR0cHM6Ly9pZGUuZGNsb3VkLm5ldC5jbi9zZXJ2ZXJsZXNzL2Z1bmN0aW9uL2ludm9rZVwiO2xldCBkLHk7ZnVuY3Rpb24gdigpe2lmKFwiblwiPT09ZygpKXt0cnl7ZD1wbHVzLnJ1bnRpbWUuZ2V0RENsb3VkSWQoKX1jYXRjaChlKXtkPVwiXCJ9cmV0dXJuIGR9cmV0dXJuIGR8fChkPURhdGUubm93KCkrXCJcIitNYXRoLmZsb29yKDFlNypNYXRoLnJhbmRvbSgpKSx1bmkuc2V0U3RvcmFnZSh7a2V5OmYsZGF0YTpkfSkpLGR9ZnVuY3Rpb24gZygpe3JldHVybntcImFwcC1wbHVzXCI6XCJuXCIsaDU6XCJoNVwiLFwibXAtd2VpeGluXCI6XCJ3eFwiLFwibXAtYWxpcGF5XCI6XCJhbGlcIixcIm1wLWJhaWR1XCI6XCJiZFwiLFwibXAtdG91dGlhb1wiOlwidHRcIixcIm1wLXFxXCI6XCJxcVwiLFwicXVpY2thcHAtdnVlXCI6XCJxdlwifVtwcm9jZXNzLmVudi5WVUVfQVBQX1BMQVRGT1JNXX1mdW5jdGlvbiBfKGUpe3JldHVybiBmdW5jdGlvbih0KXtpZighKCh0PXR8fHt9KS5zdWNjZXNzfHx0LmZhaWx8fHQuY29tcGxldGUpKXJldHVybiBlLmNhbGwodGhpcyx0KTtlLmNhbGwodGhpcyx0KS50aGVuKGU9Pnt0LnN1Y2Nlc3MmJnQuc3VjY2VzcyhlKSx0LmNvbXBsZXRlJiZ0LmNvbXBsZXRlKGUpfSkuY2F0Y2goZT0+e3QuZmFpbCYmdC5mYWlsKGUpLHQuY29tcGxldGUmJnQuY29tcGxldGUoZSl9KX19c2V0VGltZW91dCgoZnVuY3Rpb24oKXt1bmkuZ2V0U3RvcmFnZSh7a2V5OmYsc3VjY2VzcyhlKXtkPWUuZGF0YX0sZmFpbCgpe2Q9cH19KSx5PVwicXZcIj09PWcoKT9cImFuZHJvaWRcIjp1bmkuZ2V0U3lzdGVtSW5mb1N5bmMoKS5wbGF0Zm9ybX0pLDApO2NvbnN0IG09e2luaXQoZSl7Y29uc3QgdD1uZXcgdShlKTtyZXR1cm5bXCJ1cGxvYWRGaWxlXCIsXCJkZWxldGVGaWxlXCJdLmZvckVhY2goZT0+e3RbZV09Xyh0W2VdKS5iaW5kKHQpfSksc2V0VGltZW91dCgoKT0+e3QuYXV0aG9yaXplKCl9LDApLHR9fTt2YXIgYjtmdW5jdGlvbiB3KGUsdCxuKXt2b2lkIDA9PT1uJiYobj17fSk7dmFyIHI9L1xcPy8udGVzdCh0KSxvPVwiXCI7Zm9yKHZhciBzIGluIG4pXCJcIj09PW8/IXImJih0Kz1cIj9cIik6bys9XCImXCIsbys9cytcIj1cIitlbmNvZGVVUklDb21wb25lbnQobltzXSk7cmV0dXJuL15odHRwKHMpP1xcOlxcL1xcLy8udGVzdCh0Kz1vKT90OlwiXCIrZSt0fSFmdW5jdGlvbihlKXtlLmxvY2FsPVwibG9jYWxcIixlLm5vbmU9XCJub25lXCIsZS5zZXNzaW9uPVwic2Vzc2lvblwifShifHwoYj17fSkpO3ZhciBFLFQ9KEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4oRT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4gaW4gdCl0Lmhhc093blByb3BlcnR5KG4pJiYoZVtuXT10W25dKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbigpe3RoaXMuY29uc3RydWN0b3I9ZX1FKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KToobi5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IG4pfSksTz1mdW5jdGlvbigpe3JldHVybihPPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKyspZm9yKHZhciBvIGluIHQ9YXJndW1lbnRzW25dKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiYoZVtvXT10W29dKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07dmFyIFM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBudWxsIT09ZSYmZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuIFQodCxlKSx0LnByb3RvdHlwZS5wb3N0PWZ1bmN0aW9uKGUpe3ZhciB0PWUudXJsLG49ZS5kYXRhLHI9ZS5oZWFkZXJzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSxvKXt1bmkucmVxdWVzdCh7dXJsOncoXCJodHRwczpcIix0KSxkYXRhOm4sbWV0aG9kOlwiUE9TVFwiLGhlYWRlcjpyLHN1Y2Nlc3M6ZnVuY3Rpb24odCl7ZSh0KX0sZmFpbDpmdW5jdGlvbihlKXtvKGUpfX0pfSkpfSx0LnByb3RvdHlwZS51cGxvYWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0KXt2YXIgbj1lLnVybCxyPWUuZmlsZSxvPWUuZGF0YSxzPWUuaGVhZGVyczt1bmkudXBsb2FkRmlsZSh7dXJsOncoXCJodHRwczpcIixuKSxuYW1lOlwiZmlsZVwiLGZvcm1EYXRhOk9iamVjdC5hc3NpZ24oe30sbyksZmlsZVBhdGg6cixoZWFkZXI6cyxzdWNjZXNzOmZ1bmN0aW9uKGUpe3ZhciBuPXtzdGF0dXNDb2RlOmUuc3RhdHVzQ29kZSxkYXRhOmUuZGF0YXx8e319OzIwMD09PWUuc3RhdHVzQ29kZSYmby5zdWNjZXNzX2FjdGlvbl9zdGF0dXMmJihuLnN0YXR1c0NvZGU9cGFyc2VJbnQoby5zdWNjZXNzX2FjdGlvbl9zdGF0dXMsMTApKSx0KG4pfSxmYWlsOmZ1bmN0aW9uKGUpe3QoZSl9fSl9KSl9LHQucHJvdG90eXBlLmRvd25sb2FkPWZ1bmN0aW9uKGUpe3ZhciB0PWUudXJsLG49ZS5oZWFkZXJzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSxyKXt1bmkuZG93bmxvYWRGaWxlKHt1cmw6dyhcImh0dHBzOlwiLHQpLGhlYWRlcjpuLHN1Y2Nlc3M6ZnVuY3Rpb24odCl7MjAwPT09dC5zdGF0dXNDb2RlJiZ0LnRlbXBGaWxlUGF0aD9lKHtzdGF0dXNDb2RlOjIwMCx0ZW1wRmlsZVBhdGg6dC50ZW1wRmlsZVBhdGh9KTplKHQpfSxmYWlsOmZ1bmN0aW9uKGUpe3IoZSl9fSl9KSl9LHR9KChmdW5jdGlvbigpe30pKSxrPXtzZXRJdGVtOmZ1bmN0aW9uKGUsdCl7dW5pLnNldFN0b3JhZ2VTeW5jKGUsdCl9LGdldEl0ZW06ZnVuY3Rpb24oZSl7cmV0dXJuIHVuaS5nZXRTdG9yYWdlU3luYyhlKX0scmVtb3ZlSXRlbTpmdW5jdGlvbihlKXt1bmkucmVtb3ZlU3RvcmFnZVN5bmMoZSl9LGNsZWFyOmZ1bmN0aW9uKCl7dW5pLmNsZWFyU3RvcmFnZVN5bmMoKX19LEE9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT10JiYodD17fSk7dmFyIG49dW5pLmNvbm5lY3RTb2NrZXQoTyh7dXJsOmV9LHQpKTtyZXR1cm57c2V0IG9ub3BlbihlKXtuLm9uT3BlbihlKX0sc2V0IG9ubWVzc2FnZShlKXtuLm9uTWVzc2FnZShlKX0sc2V0IG9uY2xvc2UoZSl7bi5vbkNsb3NlKGUpfSxzZXQgb25lcnJvcihlKXtuLm9uRXJyb3IoZSl9LHNlbmQ6ZnVuY3Rpb24oZSl7cmV0dXJuIG4uc2VuZCh7ZGF0YTplfSl9LGNsb3NlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uY2xvc2Uoe2NvZGU6ZSxyZWFzb246dH0pfSxnZXQgcmVhZHlTdGF0ZSgpe3JldHVybiBuLnJlYWR5U3RhdGV9LENPTk5FQ1RJTkc6MCxPUEVOOjEsQ0xPU0lORzoyLENMT1NFRDozfX07dmFyIFA9e2dlbkFkYXB0ZXI6ZnVuY3Rpb24oKXtyZXR1cm57cm9vdDp7fSxyZXFDbGFzczpTLHdzQ2xhc3M6QSxsb2NhbFN0b3JhZ2U6ayxwcmltYXJ5U3RvcmFnZTpiLmxvY2FsfX0saXNNYXRjaDpmdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB1bmkmJiEhdW5pLnJlcXVlc3R9LHJ1bnRpbWU6XCJ1bmlfYXBwXCJ9LEk9bigoZnVuY3Rpb24oZSx0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmdldFF1ZXJ5PWZ1bmN0aW9uKGUsdCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdylyZXR1cm4hMTt2YXIgbj10fHx3aW5kb3cubG9jYXRpb24uc2VhcmNoLHI9bmV3IFJlZ0V4cChcIihefCYpXCIrZStcIj0oW14mXSopKCZ8JClcIiksbz1uLnN1YnN0cihuLmluZGV4T2YoXCI/XCIpKzEpLm1hdGNoKHIpO3JldHVybiBudWxsIT1vP29bMl06XCJcIn0sdC5nZXRIYXNoPWZ1bmN0aW9uKGUpe3ZhciB0PXdpbmRvdy5sb2NhdGlvbi5oYXNoLm1hdGNoKG5ldyBSZWdFeHAoXCJbIz8mL11cIitlK1wiPShbXiYjXSopXCIpKTtyZXR1cm4gdD90WzFdOlwiXCJ9LHQucmVtb3ZlUGFyYW09ZnVuY3Rpb24oZSx0KXt2YXIgbj10LnNwbGl0KFwiP1wiKVswXSxyPVtdLG89LTEhPT10LmluZGV4T2YoXCI/XCIpP3Quc3BsaXQoXCI/XCIpWzFdOlwiXCI7aWYoXCJcIiE9PW8pe2Zvcih2YXIgcz0ocj1vLnNwbGl0KFwiJlwiKSkubGVuZ3RoLTE7cz49MDtzLT0xKXJbc10uc3BsaXQoXCI9XCIpWzBdPT09ZSYmci5zcGxpY2UocywxKTtuPW4rXCI/XCIrci5qb2luKFwiJlwiKX1yZXR1cm4gbn0sdC5jcmVhdGVQcm9taXNlQ2FsbGJhY2s9ZnVuY3Rpb24oKXt2YXIgZTtpZighUHJvbWlzZSl7KGU9ZnVuY3Rpb24oKXt9KS5wcm9taXNlPXt9O3ZhciB0PWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKCdZb3VyIE5vZGUgcnVudGltZSBkb2VzIHN1cHBvcnQgRVM2IFByb21pc2VzLiBTZXQgXCJnbG9iYWwuUHJvbWlzZVwiIHRvIHlvdXIgcHJlZmVycmVkIGltcGxlbWVudGF0aW9uIG9mIHByb21pc2VzLicpfTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvbWlzZSxcInRoZW5cIix7Z2V0OnR9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm9taXNlLFwiY2F0Y2hcIix7Z2V0OnR9KSxlfXZhciBuPW5ldyBQcm9taXNlKChmdW5jdGlvbih0LG4pe2U9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gZT9uKGUpOnQocil9fSkpO3JldHVybiBlLnByb21pc2U9bixlfSx0LmdldFdlaXhpbkNvZGU9ZnVuY3Rpb24oKXtyZXR1cm4gdC5nZXRRdWVyeShcImNvZGVcIil8fHQuZ2V0SGFzaChcImNvZGVcIil9LHQuZ2V0TWluaUFwcENvZGU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKGUsdCl7d3gubG9naW4oe3N1Y2Nlc3M6ZnVuY3Rpb24odCl7ZSh0LmNvZGUpfSxmYWlsOmZ1bmN0aW9uKGUpe3QoZSl9fSl9KSl9LHQuaXNBcnJheT1mdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9LHQuaXNTdHJpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9LHQuaXNVbmRlZmluZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWV9LHQuaXNJbnN0YW5jZU9mPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0fSx0LmlzRm9ybURhdGE9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEZvcm1EYXRhXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSx0LmdlblNlcUlkPWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMTYpLnNsaWNlKDIpfSx0LmdldEFyZ05hbWVzPWZ1bmN0aW9uKGUpe3ZhciB0PWUudG9TdHJpbmcoKTtyZXR1cm4gdC5zbGljZSh0LmluZGV4T2YoXCIoXCIpKzEsdC5pbmRleE9mKFwiKVwiKSkubWF0Y2goLyhbXlxccyxdKykvZyl9LHQuZm9ybWF0VXJsPWZ1bmN0aW9uKGUsdCxuKXt2b2lkIDA9PT1uJiYobj17fSk7dmFyIHI9L1xcPy8udGVzdCh0KSxvPVwiXCI7Zm9yKHZhciBzIGluIG4pXCJcIj09PW8/IXImJih0Kz1cIj9cIik6bys9XCImXCIsbys9cytcIj1cIitlbmNvZGVVUklDb21wb25lbnQobltzXSk7cmV0dXJuL15odHRwKHMpP1xcOlxcL1xcLy8udGVzdCh0Kz1vKT90OlwiXCIrZSt0fX0pKTt0KEkpO0kuZ2V0UXVlcnksSS5nZXRIYXNoLEkucmVtb3ZlUGFyYW0sSS5jcmVhdGVQcm9taXNlQ2FsbGJhY2ssSS5nZXRXZWl4aW5Db2RlLEkuZ2V0TWluaUFwcENvZGUsSS5pc0FycmF5LEkuaXNTdHJpbmcsSS5pc1VuZGVmaW5lZCxJLmlzSW5zdGFuY2VPZixJLmlzRm9ybURhdGEsSS5nZW5TZXFJZCxJLmdldEFyZ05hbWVzLEkuZm9ybWF0VXJsO3ZhciBOLEM9XCJkaXN0L2luZGV4LmpzXCIsUj1cIi4vZGlzdC9pbmRleC5kLnRzXCIseD17YnVpbGQ6XCJucG0gcnVuIHRzYyAmJiB3ZWJwYWNrXCIsdHNjOlwidHNjIC1wIHRzY29uZmlnLmpzb25cIixcInRzYzp3XCI6XCJ0c2MgLXAgdHNjb25maWcuanNvbiAtd1wiLHRlc3Q6XCJqZXN0IC0tdmVyYm9zZSBmYWxzZSAtaVwiLGUyZTonTk9ERV9FTlY9ZTJlIHdlYnBhY2sgJiYgamVzdCAtLWNvbmZpZz1cIi4vamVzdC5lMmUuY29uZmlnLmpzXCIgIC0tdmVyYm9zZSBmYWxzZSAtaSBcImUyZVwiJyxzdGFydDpcIndlYnBhY2stZGV2LXNlcnZlciAtLWhvdCAtLW9wZW5cIixlc2xpbnQ6J2VzbGludCBcIi4vKiovKi5qc1wiIFwiLi8qKi8qLnRzXCInLFwiZXNsaW50LWZpeFwiOidlc2xpbnQgLS1maXggXCIuLyoqLyouanNcIiBcIi4vKiovKi50c1wiJyx0ZXN0X3dlYjpcIm5wbSBydW4gdHNjICYmIHdlYnBhY2stZGV2LXNlcnZlciAtLWRldnRvb2wgZXZhbC1zb3VyY2UtbWFwIC0tcHJvZ3Jlc3MgLS1jb2xvcnMgLS1ob3QgLS1pbmxpbmUgLS1jb250ZW50LWJhc2UgLi9kaXN0IC0taG9zdCBqaW1teXRlc3QtMDg4YmVmLnRjYi5xY2xvdWQubGEgLS1wb3J0IDgwIC0tZGlzYWJsZUhvc3RDaGVjayB0cnVlIC0tbW9kZSBkZXZlbG9wbWVudCAtLWNvbmZpZyB3ZWJwYWNrLnRlc3QuanNcIn0scT17dHlwZTpcImdpdFwiLHVybDpcImh0dHBzOi8vZ2l0aHViLmNvbS9UZW5jZW50Q2xvdWRCYXNlL3RjYi1qcy1zZGtcIn0sVT1bXCJ0Y2JcIixcImpzLXNka1wiXSxqPXtcIkBjbG91ZGJhc2UvYWRhcHRlci1pbnRlcmZhY2VcIjpcIl4wLjIuMFwiLFwiQGNsb3VkYmFzZS9hZGFwdGVyLXd4X21wXCI6XCJeMC4yLjFcIixcIkBjbG91ZGJhc2UvZGF0YWJhc2VcIjpcIl4wLjkuOFwifSxMPXtcIkBiYWJlbC9jb3JlXCI6XCJeNy42LjJcIixcIkBiYWJlbC9wbHVnaW4tcHJvcG9zYWwtY2xhc3MtcHJvcGVydGllc1wiOlwiXjcuNS41XCIsXCJAYmFiZWwvcGx1Z2luLXByb3Bvc2FsLW9iamVjdC1yZXN0LXNwcmVhZFwiOlwiXjcuNi4yXCIsXCJAYmFiZWwvcGx1Z2luLXRyYW5zZm9ybS1ydW50aW1lXCI6XCJeNy42LjJcIixcIkBiYWJlbC9wcmVzZXQtZW52XCI6XCJeNy42LjJcIixcIkBiYWJlbC9wcmVzZXQtdHlwZXNjcmlwdFwiOlwiXjcuNi4wXCIsXCJAYmFiZWwvcnVudGltZVwiOlwiXjcuNi4yXCIsXCJAdHlwZXMvamVzdFwiOlwiXjIzLjEuNFwiLFwiQHR5cGVzL25vZGVcIjpcIl4xMC4xNC40XCIsXCJAdHlwZXMvc3VwZXJhZ2VudFwiOlwiXjQuMS40XCIsYXhpb3M6XCJeMC4xOS4wXCIsXCJiYWJlbC1lc2xpbnRcIjpcIl4xMC4wLjFcIixcImJhYmVsLWxvYWRlclwiOlwiXjguMC42XCIsXCJiYWJlbC1wb2x5ZmlsbFwiOlwiXjYuMjYuMFwiLGVzbGludDpcIl41LjE2LjBcIixcImVzbGludC1jb25maWctYWxsb3lcIjpcIl4xLjQuMlwiLFwiZXNsaW50LWNvbmZpZy1wcmV0dGllclwiOlwiXjQuMS4wXCIsXCJlc2xpbnQtcGx1Z2luLXByZXR0aWVyXCI6XCJeMy4wLjFcIixcImVzbGludC1wbHVnaW4tdHlwZXNjcmlwdFwiOlwiXjEuMC4wLXJjLjNcIixleHByZXNzOlwiXjQuMTcuMVwiLGh1c2t5OlwiXjMuMS4wXCIsamVzdDpcIl4yNC43LjFcIixcImplc3QtcHVwcGV0ZWVyXCI6XCJeNC4zLjBcIixcImxpbnQtc3RhZ2VkXCI6XCJeOS41LjBcIixcInBvd2VyLWFzc2VydFwiOlwiXjEuNi4xXCIscHVwcGV0ZWVyOlwiXjEuMjAuMFwiLFwic2VydmUtc3RhdGljXCI6XCJeMS4xNC4xXCIsXCJ0cy1qZXN0XCI6XCJeMjMuMTAuNFwiLFwidHMtbG9hZGVyXCI6XCJeNi4yLjFcIix0eXBlc2NyaXB0OlwiXjMuNC4zXCIsXCJ0eXBlc2NyaXB0LWVzbGludC1wYXJzZXJcIjpcIl4yMi4wLjBcIix3ZWJwYWNrOlwiXjQuNDEuM1wiLFwid2VicGFjay1idW5kbGUtYW5hbHl6ZXJcIjpcIl4zLjQuMVwiLFwid2VicGFjay1jbGlcIjpcIl4zLjMuMFwiLFwid2VicGFjay1kZXYtc2VydmVyXCI6XCJeMy4zLjFcIixcIndlYnBhY2stbWVyZ2VcIjpcIl40LjIuMlwiLFwid2VicGFjay12aXN1YWxpemVyLXBsdWdpblwiOlwiXjAuMS4xMVwifSxEPXtob29rczp7XCJwcmUtY29tbWl0XCI6XCJsaW50LXN0YWdlZFwifX0sRj17bmFtZTpcInRjYi1qcy1zZGtcIix2ZXJzaW9uOlwiMS4zLjVcIixkZXNjcmlwdGlvbjpcImpzIHNkayBmb3IgdGNiXCIsbWFpbjpDLHR5cGVzOlIsc2NyaXB0czp4LHJlcG9zaXRvcnk6cSxrZXl3b3JkczpVLGF1dGhvcjpcImppbW15anpoYW5nXCIsbGljZW5zZTpcIklTQ1wiLGRlcGVuZGVuY2llczpqLGRldkRlcGVuZGVuY2llczpMLGh1c2t5OkQsXCJsaW50LXN0YWdlZFwiOntcIioue2pzLHRzfVwiOltcImVzbGludCAtLWZpeFwiLFwiZ2l0IGFkZFwiXX19LE09KE49T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsbmFtZTpcInRjYi1qcy1zZGtcIix2ZXJzaW9uOlwiMS4zLjVcIixkZXNjcmlwdGlvbjpcImpzIHNkayBmb3IgdGNiXCIsbWFpbjpDLHR5cGVzOlIsc2NyaXB0czp4LHJlcG9zaXRvcnk6cSxrZXl3b3JkczpVLGF1dGhvcjpcImppbW15anpoYW5nXCIsbGljZW5zZTpcIklTQ1wiLGRlcGVuZGVuY2llczpqLGRldkRlcGVuZGVuY2llczpMLGh1c2t5OkQsZGVmYXVsdDpGfSkpJiZOLmRlZmF1bHR8fE4sSz1uKChmdW5jdGlvbih0LG4pe3ZhciByPWUmJmUuX19pbXBvcnRTdGFyfHxmdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIG4gaW4gZSlPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiYodFtuXT1lW25dKTtyZXR1cm4gdC5kZWZhdWx0PWUsdH07T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cihNKTtuLlNES19WRVJJU09OPW8udmVyc2lvbixuLkFDQ0VTU19UT0tFTj1cImFjY2Vzc190b2tlblwiLG4uQUNDRVNTX1RPS0VOX0V4cGlyZT1cImFjY2Vzc190b2tlbl9leHBpcmVcIixuLlJFRlJFU0hfVE9LRU49XCJyZWZyZXNoX3Rva2VuXCIsbi5BTk9OWU1PVVNfVVVJRD1cImFub255bW91c191dWlkXCIsbi5MT0dJTl9UWVBFX0tFWT1cImxvZ2luX3R5cGVcIixuLnByb3RvY29sPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBsb2NhdGlvbiYmXCJodHRwOlwiPT09bG9jYXRpb24ucHJvdG9jb2w/XCJodHRwOlwiOlwiaHR0cHM6XCIsbi5CQVNFX1VSTD1cImUyZVwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwicHJlXCI9PT1wcm9jZXNzLmVudi5FTkRfUE9JTlQ/XCIvL3RjYi1wcmUudGVuY2VudGNsb3VkYXBpLmNvbS93ZWJcIjpcIi8vdGNiLWFwaS50ZW5jZW50Y2xvdWRhcGkuY29tL3dlYlwifSkpO3QoSyk7dmFyIEc7Sy5TREtfVkVSSVNPTixLLkFDQ0VTU19UT0tFTixLLkFDQ0VTU19UT0tFTl9FeHBpcmUsSy5SRUZSRVNIX1RPS0VOLEsuQU5PTllNT1VTX1VVSUQsSy5MT0dJTl9UWVBFX0tFWSxLLnByb3RvY29sLEsuQkFTRV9VUkw7IWZ1bmN0aW9uKGUpe2UubG9jYWw9XCJsb2NhbFwiLGUubm9uZT1cIm5vbmVcIixlLnNlc3Npb249XCJzZXNzaW9uXCJ9KEd8fChHPXt9KSk7dmFyIEg9ZnVuY3Rpb24oKXt9LFk9ZnVuY3Rpb24oKXt9O3ZhciBWPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldCBTdG9yYWdlVHlwZSgpe3JldHVybiBHfSxBYnN0cmFjdFNES1JlcXVlc3Q6SCxBYnN0cmFjdFN0b3JhZ2U6WSxmb3JtYXRVcmw6ZnVuY3Rpb24oZSx0LG4pe3ZvaWQgMD09PW4mJihuPXt9KTt2YXIgcj0vXFw/Ly50ZXN0KHQpLG89XCJcIjtmb3IodmFyIHMgaW4gbilcIlwiPT09bz8hciYmKHQrPVwiP1wiKTpvKz1cIiZcIixvKz1zK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChuW3NdKTtyZXR1cm4vXmh0dHAocyk/XFw6XFwvXFwvLy50ZXN0KHQrPW8pP3Q6XCJcIitlK3R9fSksQj1uKChmdW5jdGlvbih0LG4pe3ZhciByPWUmJmUuX19leHRlbmRzfHxmdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKHQsbil7cmV0dXJuKGU9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShuKSYmKGVbbl09dFtuXSl9KSh0LG4pfTtyZXR1cm4gZnVuY3Rpb24odCxuKXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj10fWUodCxuKSx0LnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihyLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgcil9fSgpLG89ZSYmZS5fX2Fzc2lnbnx8ZnVuY3Rpb24oKXtyZXR1cm4obz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQsbj0xLHI9YXJndW1lbnRzLmxlbmd0aDtuPHI7bisrKWZvcih2YXIgbyBpbiB0PWFyZ3VtZW50c1tuXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmKGVbb109dFtvXSk7cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHM9ZSYmZS5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBuZXcobnx8KG49UHJvbWlzZSkpKChmdW5jdGlvbihvLHMpe2Z1bmN0aW9uIGkoZSl7dHJ5e2Moci5uZXh0KGUpKX1jYXRjaChlKXtzKGUpfX1mdW5jdGlvbiBhKGUpe3RyeXtjKHIudGhyb3coZSkpfWNhdGNoKGUpe3MoZSl9fWZ1bmN0aW9uIGMoZSl7dmFyIHQ7ZS5kb25lP28oZS52YWx1ZSk6KHQ9ZS52YWx1ZSx0IGluc3RhbmNlb2Ygbj90Om5ldyBuKChmdW5jdGlvbihlKXtlKHQpfSkpKS50aGVuKGksYSl9Yygocj1yLmFwcGx5KGUsdHx8W10pKS5uZXh0KCkpfSkpfSxpPWUmJmUuX19nZW5lcmF0b3J8fGZ1bmN0aW9uKGUsdCl7dmFyIG4scixvLHMsaT17bGFiZWw6MCxzZW50OmZ1bmN0aW9uKCl7aWYoMSZvWzBdKXRocm93IG9bMV07cmV0dXJuIG9bMV19LHRyeXM6W10sb3BzOltdfTtyZXR1cm4gcz17bmV4dDphKDApLHRocm93OmEoMSkscmV0dXJuOmEoMil9LFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKHNbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSkscztmdW5jdGlvbiBhKHMpe3JldHVybiBmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24ocyl7aWYobil0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtmb3IoO2k7KXRyeXtpZihuPTEsciYmKG89MiZzWzBdP3IucmV0dXJuOnNbMF0/ci50aHJvd3x8KChvPXIucmV0dXJuKSYmby5jYWxsKHIpLDApOnIubmV4dCkmJiEobz1vLmNhbGwocixzWzFdKSkuZG9uZSlyZXR1cm4gbztzd2l0Y2gocj0wLG8mJihzPVsyJnNbMF0sby52YWx1ZV0pLHNbMF0pe2Nhc2UgMDpjYXNlIDE6bz1zO2JyZWFrO2Nhc2UgNDpyZXR1cm4gaS5sYWJlbCsrLHt2YWx1ZTpzWzFdLGRvbmU6ITF9O2Nhc2UgNTppLmxhYmVsKysscj1zWzFdLHM9WzBdO2NvbnRpbnVlO2Nhc2UgNzpzPWkub3BzLnBvcCgpLGkudHJ5cy5wb3AoKTtjb250aW51ZTtkZWZhdWx0OmlmKCEobz0obz1pLnRyeXMpLmxlbmd0aD4wJiZvW28ubGVuZ3RoLTFdKSYmKDY9PT1zWzBdfHwyPT09c1swXSkpe2k9MDtjb250aW51ZX1pZigzPT09c1swXSYmKCFvfHxzWzFdPm9bMF0mJnNbMV08b1szXSkpe2kubGFiZWw9c1sxXTticmVha31pZig2PT09c1swXSYmaS5sYWJlbDxvWzFdKXtpLmxhYmVsPW9bMV0sbz1zO2JyZWFrfWlmKG8mJmkubGFiZWw8b1syXSl7aS5sYWJlbD1vWzJdLGkub3BzLnB1c2gocyk7YnJlYWt9b1syXSYmaS5vcHMucG9wKCksaS50cnlzLnBvcCgpO2NvbnRpbnVlfXM9dC5jYWxsKGUsaSl9Y2F0Y2goZSl7cz1bNixlXSxyPTB9ZmluYWxseXtuPW89MH1pZig1JnNbMF0pdGhyb3cgc1sxXTtyZXR1cm57dmFsdWU6c1swXT9zWzFdOnZvaWQgMCxkb25lOiEwfX0oW3MsYV0pfX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gbnVsbCE9PWUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiByKHQsZSksdC5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9yZXF1ZXN0KG8obyh7fSxlKSx7bWV0aG9kOlwiZ2V0XCJ9KSl9LHQucHJvdG90eXBlLnBvc3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX3JlcXVlc3QobyhvKHt9LGUpLHttZXRob2Q6XCJwb3N0XCJ9KSl9LHQucHJvdG90eXBlLnVwbG9hZD1mdW5jdGlvbihlKXt2YXIgdD1lLmRhdGEsbj1lLmZpbGUscj1lLm5hbWUscz1uZXcgRm9ybURhdGE7Zm9yKHZhciBpIGluIHQpcy5hcHBlbmQoaSx0W2ldKTtyZXR1cm4gcy5hcHBlbmQoXCJrZXlcIixyKSxzLmFwcGVuZChcImZpbGVcIixuKSx0aGlzLl9yZXF1ZXN0KG8obyh7fSxlKSx7ZGF0YTpzLG1ldGhvZDpcInBvc3RcIn0pKX0sdC5wcm90b3R5cGUuZG93bmxvYWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHModGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0LG47cmV0dXJuIGkodGhpcywoZnVuY3Rpb24ocil7cmV0dXJuIHQ9ZGVjb2RlVVJJQ29tcG9uZW50KG5ldyBVUkwoZS51cmwpLnBhdGhuYW1lLnNwbGl0KFwiL1wiKS5wb3AoKXx8XCJcIiksKG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIikpLmhyZWY9ZS51cmwsbi5zZXRBdHRyaWJ1dGUoXCJkb3dubG9hZFwiLHQpLG4uc2V0QXR0cmlidXRlKFwidGFyZ2V0XCIsXCJfYmxhbmtcIiksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChuKSxuLmNsaWNrKCksWzIsbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe3Qoe3N0YXR1c0NvZGU6MjAwLHRlbXBGaWxlUGF0aDplLnVybH0pfSkpXX0pKX0pKX0sdC5wcm90b3R5cGUuX3JlcXVlc3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9U3RyaW5nKGUubWV0aG9kKS50b0xvd2VyQ2FzZSgpfHxcImdldFwiO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obil7dmFyIHI9ZS51cmwsbz1lLmhlYWRlcnMscz12b2lkIDA9PT1vP3t9Om8saT1lLmRhdGEsYT1lLnJlc3BvbnNlVHlwZSxjPUkuZm9ybWF0VXJsKEsucHJvdG9jb2wscixcImdldFwiPT09dD9pOnt9KSx1PW5ldyBYTUxIdHRwUmVxdWVzdDtmb3IodmFyIGwgaW4gdS5vcGVuKHQsYyksYSYmKHUucmVzcG9uc2VUeXBlPWEpLHMpdS5zZXRSZXF1ZXN0SGVhZGVyKGwsc1tsXSk7dS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtpZig0PT09dS5yZWFkeVN0YXRlKXt2YXIgZT17c3RhdHVzQ29kZTp1LnN0YXR1c307dHJ5e2UuZGF0YT1KU09OLnBhcnNlKHUucmVzcG9uc2VUZXh0KX1jYXRjaChlKXt9bihlKX19LHUuc2VuZChcInBvc3RcIj09PXQmJkkuaXNGb3JtRGF0YShpKT9pOkpTT04uc3RyaW5naWZ5KGl8fHt9KSl9KSl9LHR9KFYuQWJzdHJhY3RTREtSZXF1ZXN0KTtuLldlYlJlcXVlc3Q9YSxuLmdlbkFkYXB0ZXI9ZnVuY3Rpb24oKXtyZXR1cm57cm9vdDp3aW5kb3cscmVxQ2xhc3M6YSx3c0NsYXNzOldlYlNvY2tldCxsb2NhbFN0b3JhZ2U6bG9jYWxTdG9yYWdlLHNlc3Npb25TdG9yYWdlOnNlc3Npb25TdG9yYWdlfX19KSk7dChCKTtCLldlYlJlcXVlc3QsQi5nZW5BZGFwdGVyO3ZhciBXPW4oKGZ1bmN0aW9uKHQsbil7dmFyIHI9ZSYmZS5fX2ltcG9ydFN0YXJ8fGZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgbiBpbiBlKU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fTtPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbyxzPXIoQik7IWZ1bmN0aW9uKGUpe2UuV0VCPVwid2ViXCIsZS5XWF9NUD1cInd4X21wXCJ9KG89bi5SVU5USU1FfHwobi5SVU5USU1FPXt9KSksbi51c2VBZGFwdGVycz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxuPUkuaXNBcnJheShlKT9lOltlXTt0PG4ubGVuZ3RoO3QrKyl7dmFyIHI9blt0XSxvPXIuaXNNYXRjaCxzPXIuZ2VuQWRhcHRlcixpPXIucnVudGltZTtpZihvKCkpcmV0dXJue2FkYXB0ZXI6cygpLHJ1bnRpbWU6aX19fSxuLnVzZURlZmF1bHRBZGFwdGVyPWZ1bmN0aW9uKCl7cmV0dXJue2FkYXB0ZXI6cy5nZW5BZGFwdGVyKCkscnVudGltZTpvLldFQn19LG4uQWRhcHRlcj17YWRhcHRlcjpudWxsLHJ1bnRpbWU6dm9pZCAwfX0pKTt0KFcpO1cuUlVOVElNRSxXLnVzZUFkYXB0ZXJzLFcudXNlRGVmYXVsdEFkYXB0ZXIsVy5BZGFwdGVyO3ZhciB6PW4oKGZ1bmN0aW9uKHQsbil7dmFyIHI9ZSYmZS5fX2V4dGVuZHN8fGZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24odCxuKXtyZXR1cm4oZT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4gaW4gdCl0Lmhhc093blByb3BlcnR5KG4pJiYoZVtuXT10W25dKX0pKHQsbil9O3JldHVybiBmdW5jdGlvbih0LG4pe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPXR9ZSh0LG4pLHQucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KHIucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyByKX19KCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3N3aXRjaChXLkFkYXB0ZXIuYWRhcHRlci5wcmltYXJ5U3RvcmFnZXx8ZSl7Y2FzZVwibG9jYWxcIjp0aGlzLnN0b3JhZ2VDbGFzcz1XLkFkYXB0ZXIuYWRhcHRlci5sb2NhbFN0b3JhZ2V8fG5ldyBzO2JyZWFrO2Nhc2VcIm5vbmVcIjp0aGlzLnN0b3JhZ2VDbGFzcz1uZXcgczticmVhaztkZWZhdWx0OnRoaXMuc3RvcmFnZUNsYXNzPVcuQWRhcHRlci5hZGFwdGVyLnNlc3Npb25TdG9yYWdlfHxuZXcgc319cmV0dXJuIGUucHJvdG90eXBlLnNldFN0b3JlPWZ1bmN0aW9uKGUsdCxuKXt0cnl7aWYoIXRoaXMuc3RvcmFnZUNsYXNzKXJldHVybn1jYXRjaChlKXtyZXR1cm59dmFyIHIsbz17fTtvLnZlcnNpb249bnx8XCJsb2NhbENhY2hldjFcIixvLmNvbnRlbnQ9dCxyPUpTT04uc3RyaW5naWZ5KG8pO3RyeXt0aGlzLnN0b3JhZ2VDbGFzcy5zZXRJdGVtKGUscil9Y2F0Y2goZSl7cmV0dXJufX0sZS5wcm90b3R5cGUuZ2V0U3RvcmU9ZnVuY3Rpb24oZSx0KXt0cnl7aWYoIXRoaXMuc3RvcmFnZUNsYXNzKXJldHVybn1jYXRjaChlKXtyZXR1cm5cIlwifXQ9dHx8XCJsb2NhbENhY2hldjFcIjt2YXIgbj10aGlzLnN0b3JhZ2VDbGFzcy5nZXRJdGVtKGUpO3JldHVybiBuJiZuLmluZGV4T2YodCk+PTA/SlNPTi5wYXJzZShuKS5jb250ZW50OlwiXCJ9LGUucHJvdG90eXBlLnJlbW92ZVN0b3JlPWZ1bmN0aW9uKGUpe3RoaXMuc3RvcmFnZUNsYXNzLnJlbW92ZUl0ZW0oZSl9LGV9KCk7bi5DYWNoZT1vO3ZhciBzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt2YXIgdD1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIFcuQWRhcHRlci5hZGFwdGVyLnJvb3QudGNiT2JqZWN0fHwoVy5BZGFwdGVyLmFkYXB0ZXIucm9vdC50Y2JPYmplY3Q9e30pLHR9cmV0dXJuIHIodCxlKSx0LnByb3RvdHlwZS5zZXRJdGVtPWZ1bmN0aW9uKGUsdCl7Vy5BZGFwdGVyLmFkYXB0ZXIucm9vdC50Y2JPYmplY3RbZV09dH0sdC5wcm90b3R5cGUuZ2V0SXRlbT1mdW5jdGlvbihlKXtyZXR1cm4gVy5BZGFwdGVyLmFkYXB0ZXIucm9vdC50Y2JPYmplY3RbZV19LHQucHJvdG90eXBlLnJlbW92ZUl0ZW09ZnVuY3Rpb24oZSl7ZGVsZXRlIFcuQWRhcHRlci5hZGFwdGVyLnJvb3QudGNiT2JqZWN0W2VdfSx0LnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe2RlbGV0ZSBXLkFkYXB0ZXIuYWRhcHRlci5yb290LnRjYk9iamVjdH0sdH0oVi5BYnN0cmFjdFN0b3JhZ2UpfSkpO3Qoeik7ei5DYWNoZTt2YXIgSj1uKChmdW5jdGlvbih0LG4pe3ZhciByPWUmJmUuX19leHRlbmRzfHxmdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKHQsbil7cmV0dXJuKGU9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShuKSYmKGVbbl09dFtuXSl9KSh0LG4pfTtyZXR1cm4gZnVuY3Rpb24odCxuKXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj10fWUodCxuKSx0LnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihyLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgcil9fSgpLG89ZSYmZS5fX3NwcmVhZEFycmF5c3x8ZnVuY3Rpb24oKXtmb3IodmFyIGU9MCx0PTAsbj1hcmd1bWVudHMubGVuZ3RoO3Q8bjt0KyspZSs9YXJndW1lbnRzW3RdLmxlbmd0aDt2YXIgcj1BcnJheShlKSxvPTA7Zm9yKHQ9MDt0PG47dCsrKWZvcih2YXIgcz1hcmd1bWVudHNbdF0saT0wLGE9cy5sZW5ndGg7aTxhO2krKyxvKyspcltvXT1zW2ldO3JldHVybiByfTtPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1mdW5jdGlvbihlLHQpe3RoaXMuZGF0YT10fHxudWxsLHRoaXMubmFtZT1lfTtuLklFdmVudD1zO3ZhciBpPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxuKXt2YXIgcj1lLmNhbGwodGhpcyxcImVycm9yXCIse2Vycm9yOnQsZGF0YTpufSl8fHRoaXM7cmV0dXJuIHIuZXJyb3I9dCxyfXJldHVybiByKHQsZSksdH0ocyk7bi5JRXJyb3JFdmVudD1pO3ZhciBhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3RoaXMuX2xpc3RlbmVycz17fX1yZXR1cm4gZS5wcm90b3R5cGUub249ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24oZSx0LG4pe25bZV09bltlXXx8W10sbltlXS5wdXNoKHQpfShlLHQsdGhpcy5fbGlzdGVuZXJzKSx0aGlzfSxlLnByb3RvdHlwZS5vZmY9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24oZSx0LG4pe2lmKG4mJm5bZV0pe3ZhciByPW5bZV0uaW5kZXhPZih0KTstMSE9PXImJm5bZV0uc3BsaWNlKHIsMSl9fShlLHQsdGhpcy5fbGlzdGVuZXJzKSx0aGlzfSxlLnByb3RvdHlwZS5maXJlPWZ1bmN0aW9uKGUsdCl7aWYoSS5pc0luc3RhbmNlT2YoZSxpKSlyZXR1cm4gY29uc29sZS5lcnJvcihlLmVycm9yKSx0aGlzO3ZhciBuPUkuaXNTdHJpbmcoZSk/bmV3IHMoZSx0fHx7fSk6ZSxyPW4ubmFtZTtpZih0aGlzLl9saXN0ZW5zKHIpKXtuLnRhcmdldD10aGlzO2Zvcih2YXIgYT0wLGM9dGhpcy5fbGlzdGVuZXJzW3JdP28odGhpcy5fbGlzdGVuZXJzW3JdKTpbXTthPGMubGVuZ3RoO2ErKyl7Y1thXS5jYWxsKHRoaXMsbil9fXJldHVybiB0aGlzfSxlLnByb3RvdHlwZS5fbGlzdGVucz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fbGlzdGVuZXJzW2VdJiZ0aGlzLl9saXN0ZW5lcnNbZV0ubGVuZ3RoPjB9LGV9KCk7bi5JRXZlbnRFbWl0dGVyPWE7dmFyIGM9bmV3IGE7bi5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7Yy5vbihlLHQpfSxuLmFjdGl2YXRlRXZlbnQ9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT10JiYodD17fSksYy5maXJlKGUsdCl9LG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe2Mub2ZmKGUsdCl9LG4uRVZFTlRTPXtMT0dJTl9TVEFURV9DSEFOR0VEOlwibG9naW5TdGF0ZUNoYW5nZWRcIixMT0dJTl9TVEFURV9FWFBJUkU6XCJsb2dpblN0YXRlRXhwaXJlXCIsTE9HSU5fVFlQRV9DSEFOR0U6XCJsb2dpblR5cGVDaGFuZ2VkXCIsQU5PTllNT1VTX0NPTlZFUlRFRDpcImFub255bW91c0NvbnZlcnRlZFwiLFJFRlJFU0hfQUNDRVNTX1RPS0VOOlwicmVmcmVzaEFjY2Vzc1Rva2VuXCJ9fSkpO3QoSik7Si5JRXZlbnQsSi5JRXJyb3JFdmVudCxKLklFdmVudEVtaXR0ZXIsSi5hZGRFdmVudExpc3RlbmVyLEouYWN0aXZhdGVFdmVudCxKLnJlbW92ZUV2ZW50TGlzdGVuZXIsSi5FVkVOVFM7dmFyIFg9bigoZnVuY3Rpb24odCxuKXt2YXIgcj1lJiZlLl9fYXNzaWdufHxmdW5jdGlvbigpe3JldHVybihyPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKyspZm9yKHZhciBvIGluIHQ9YXJndW1lbnRzW25dKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiYoZVtvXT10W29dKTtyZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sbz1lJiZlLl9fYXdhaXRlcnx8ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIG5ldyhufHwobj1Qcm9taXNlKSkoKGZ1bmN0aW9uKG8scyl7ZnVuY3Rpb24gaShlKXt0cnl7YyhyLm5leHQoZSkpfWNhdGNoKGUpe3MoZSl9fWZ1bmN0aW9uIGEoZSl7dHJ5e2Moci50aHJvdyhlKSl9Y2F0Y2goZSl7cyhlKX19ZnVuY3Rpb24gYyhlKXt2YXIgdDtlLmRvbmU/byhlLnZhbHVlKToodD1lLnZhbHVlLHQgaW5zdGFuY2VvZiBuP3Q6bmV3IG4oKGZ1bmN0aW9uKGUpe2UodCl9KSkpLnRoZW4oaSxhKX1jKChyPXIuYXBwbHkoZSx0fHxbXSkpLm5leHQoKSl9KSl9LHM9ZSYmZS5fX2dlbmVyYXRvcnx8ZnVuY3Rpb24oZSx0KXt2YXIgbixyLG8scyxpPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJm9bMF0pdGhyb3cgb1sxXTtyZXR1cm4gb1sxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBzPXtuZXh0OmEoMCksdGhyb3c6YSgxKSxyZXR1cm46YSgyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoc1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxzO2Z1bmN0aW9uIGEocyl7cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihzKXtpZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7aTspdHJ5e2lmKG49MSxyJiYobz0yJnNbMF0/ci5yZXR1cm46c1swXT9yLnRocm93fHwoKG89ci5yZXR1cm4pJiZvLmNhbGwociksMCk6ci5uZXh0KSYmIShvPW8uY2FsbChyLHNbMV0pKS5kb25lKXJldHVybiBvO3N3aXRjaChyPTAsbyYmKHM9WzImc1swXSxvLnZhbHVlXSksc1swXSl7Y2FzZSAwOmNhc2UgMTpvPXM7YnJlYWs7Y2FzZSA0OnJldHVybiBpLmxhYmVsKysse3ZhbHVlOnNbMV0sZG9uZTohMX07Y2FzZSA1OmkubGFiZWwrKyxyPXNbMV0scz1bMF07Y29udGludWU7Y2FzZSA3OnM9aS5vcHMucG9wKCksaS50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShvPShvPWkudHJ5cykubGVuZ3RoPjAmJm9bby5sZW5ndGgtMV0pJiYoNj09PXNbMF18fDI9PT1zWzBdKSl7aT0wO2NvbnRpbnVlfWlmKDM9PT1zWzBdJiYoIW98fHNbMV0+b1swXSYmc1sxXTxvWzNdKSl7aS5sYWJlbD1zWzFdO2JyZWFrfWlmKDY9PT1zWzBdJiZpLmxhYmVsPG9bMV0pe2kubGFiZWw9b1sxXSxvPXM7YnJlYWt9aWYobyYmaS5sYWJlbDxvWzJdKXtpLmxhYmVsPW9bMl0saS5vcHMucHVzaChzKTticmVha31vWzJdJiZpLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWV9cz10LmNhbGwoZSxpKX1jYXRjaChlKXtzPVs2LGVdLHI9MH1maW5hbGx5e249bz0wfWlmKDUmc1swXSl0aHJvdyBzWzFdO3JldHVybnt2YWx1ZTpzWzBdP3NbMV06dm9pZCAwLGRvbmU6ITB9fShbcyxhXSl9fX07T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9W1wiYXV0aC5nZXRKd3RcIixcImF1dGgubG9nb3V0XCIsXCJhdXRoLnNpZ25JbldpdGhUaWNrZXRcIixcImF1dGguc2lnbkluQW5vbnltb3VzbHlcIl0sYT17XCJYLVNESy1WZXJzaW9uXCI6Sy5TREtfVkVSSVNPTn07ZnVuY3Rpb24gYyhlLHQsbil7dmFyIG89ZVt0XTtlW3RdPWZ1bmN0aW9uKHQpe3ZhciBzPXt9LGk9e307bi5mb3JFYWNoKChmdW5jdGlvbihuKXt2YXIgcj1uLmNhbGwoZSx0KSxvPXIuZGF0YSxhPXIuaGVhZGVycztPYmplY3QuYXNzaWduKHMsbyksT2JqZWN0LmFzc2lnbihpLGEpfSkpO3ZhciBhPXQuZGF0YTtyZXR1cm4gYSYmZnVuY3Rpb24oKXtpZihJLmlzRm9ybURhdGEoYSkpZm9yKHZhciBlIGluIHMpYS5hcHBlbmQoZSxzW2VdKTtlbHNlIHQuZGF0YT1yKHIoe30sYSkscyl9KCksdC5oZWFkZXJzPXIocih7fSx0LmhlYWRlcnN8fHt9KSxpKSxvLmNhbGwoZSx0KX19ZnVuY3Rpb24gdSgpe3ZhciBlPUkuZ2VuU2VxSWQoKTtyZXR1cm57ZGF0YTp7c2VxSWQ6ZX0saGVhZGVyczpyKHIoe30sYSkse1wieC1zZXFpZFwiOmV9KX19dmFyIGw9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZvaWQgMD09PWUmJihlPXt9KSx0aGlzLmNvbmZpZz1lLHRoaXMuY2FjaGU9bmV3IHouQ2FjaGUoZS5wZXJzaXN0ZW5jZSksdGhpcy5hY2Nlc3NUb2tlbktleT1LLkFDQ0VTU19UT0tFTitcIl9cIitlLmVudix0aGlzLmFjY2Vzc1Rva2VuRXhwaXJlS2V5PUsuQUNDRVNTX1RPS0VOX0V4cGlyZStcIl9cIitlLmVudix0aGlzLnJlZnJlc2hUb2tlbktleT1LLlJFRlJFU0hfVE9LRU4rXCJfXCIrZS5lbnYsdGhpcy5hbm9ueW1vdXNVdWlkS2V5PUsuQU5PTllNT1VTX1VVSUQrXCJfXCIrZS5lbnYsdGhpcy5sb2dpblR5cGVLZXk9Sy5MT0dJTl9UWVBFX0tFWStcIl9cIitlLmVudix0aGlzLl9yZXFDbGFzcz1uZXcgVy5BZGFwdGVyLmFkYXB0ZXIucmVxQ2xhc3MsYyh0aGlzLl9yZXFDbGFzcyxcInBvc3RcIixbdV0pLGModGhpcy5fcmVxQ2xhc3MsXCJ1cGxvYWRcIixbdV0pLGModGhpcy5fcmVxQ2xhc3MsXCJkb3dubG9hZFwiLFt1XSl9cmV0dXJuIGUucHJvdG90eXBlLnBvc3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIG8odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiBzKHRoaXMsKGZ1bmN0aW9uKHQpe3N3aXRjaCh0LmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5fcmVxQ2xhc3MucG9zdChlKV07Y2FzZSAxOnJldHVyblsyLHQuc2VudCgpXX19KSl9KSl9LGUucHJvdG90eXBlLnVwbG9hZD1mdW5jdGlvbihlKXtyZXR1cm4gbyh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHModGhpcywoZnVuY3Rpb24odCl7c3dpdGNoKHQubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLl9yZXFDbGFzcy51cGxvYWQoZSldO2Nhc2UgMTpyZXR1cm5bMix0LnNlbnQoKV19fSkpfSkpfSxlLnByb3RvdHlwZS5kb3dubG9hZD1mdW5jdGlvbihlKXtyZXR1cm4gbyh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHModGhpcywoZnVuY3Rpb24odCl7c3dpdGNoKHQubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLl9yZXFDbGFzcy5kb3dubG9hZChlKV07Y2FzZSAxOnJldHVyblsyLHQuc2VudCgpXX19KSl9KSl9LGUucHJvdG90eXBlLnJlZnJlc2hBY2Nlc3NUb2tlbj1mdW5jdGlvbigpe3JldHVybiBvKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZSx0LG47cmV0dXJuIHModGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDp0aGlzLl9yZWZyZXNoQWNjZXNzVG9rZW5Qcm9taXNlfHwodGhpcy5fcmVmcmVzaEFjY2Vzc1Rva2VuUHJvbWlzZT10aGlzLl9yZWZyZXNoQWNjZXNzVG9rZW4oKSksci5sYWJlbD0xO2Nhc2UgMTpyZXR1cm4gci50cnlzLnB1c2goWzEsMywsNF0pLFs0LHRoaXMuX3JlZnJlc2hBY2Nlc3NUb2tlblByb21pc2VdO2Nhc2UgMjpyZXR1cm4gZT1yLnNlbnQoKSxbMyw0XTtjYXNlIDM6cmV0dXJuIG49ci5zZW50KCksdD1uLFszLDRdO2Nhc2UgNDppZih0aGlzLl9yZWZyZXNoQWNjZXNzVG9rZW5Qcm9taXNlPW51bGwsdGhpcy5fc2hvdWxkUmVmcmVzaEFjY2Vzc1Rva2VuSG9vaz1udWxsLHQpdGhyb3cgdDtyZXR1cm5bMixlXX19KSl9KSl9LGUucHJvdG90eXBlLl9yZWZyZXNoQWNjZXNzVG9rZW49ZnVuY3Rpb24oKXtyZXR1cm4gbyh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsdCxuLHI7cmV0dXJuIHModGhpcywoZnVuY3Rpb24obyl7c3dpdGNoKG8ubGFiZWwpe2Nhc2UgMDppZih0aGlzLmNhY2hlLnJlbW92ZVN0b3JlKHRoaXMuYWNjZXNzVG9rZW5LZXkpLHRoaXMuY2FjaGUucmVtb3ZlU3RvcmUodGhpcy5hY2Nlc3NUb2tlbkV4cGlyZUtleSksIShlPXRoaXMuY2FjaGUuZ2V0U3RvcmUodGhpcy5yZWZyZXNoVG9rZW5LZXkpKSl0aHJvdyBuZXcgRXJyb3IoXCJbdGNiLWpzLXNka10g5pyq55m75b2VQ2xvdWRCYXNlXCIpO3JldHVybiB0PXtyZWZyZXNoX3Rva2VuOmV9LHRoaXMuY2FjaGUuZ2V0U3RvcmUodGhpcy5sb2dpblR5cGVLZXkpPT09JC5MT0dJTlRZUEUuQU5PTllNT1VTJiYodC5hbm9ueW1vdXNfdXVpZD10aGlzLmNhY2hlLmdldFN0b3JlKHRoaXMuYW5vbnltb3VzVXVpZEtleSkpLFs0LHRoaXMucmVxdWVzdChcImF1dGguZ2V0Snd0XCIsdCldO2Nhc2UgMTppZigobj1vLnNlbnQoKSkuZGF0YS5jb2RlKXRocm93XCJTSUdOX1BBUkFNX0lOVkFMSURcIiE9PShyPW4uZGF0YS5jb2RlKSYmXCJSRUZSRVNIX1RPS0VOX0VYUElSRURcIiE9PXImJlwiSU5WQUxJRF9SRUZSRVNIX1RPS0VOXCIhPT1yfHwoSi5hY3RpdmF0ZUV2ZW50KEouRVZFTlRTLkxPR0lOX1NUQVRFX0VYUElSRSksdGhpcy5jYWNoZS5yZW1vdmVTdG9yZSh0aGlzLnJlZnJlc2hUb2tlbktleSkpLG5ldyBFcnJvcihcIlt0Y2ItanMtc2RrXSDliLfmlrBhY2Nlc3MgdG9rZW7lpLHotKXvvJpcIituLmRhdGEuY29kZSk7cmV0dXJuIG4uZGF0YS5hY2Nlc3NfdG9rZW4/KEouYWN0aXZhdGVFdmVudChKLkVWRU5UUy5SRUZSRVNIX0FDQ0VTU19UT0tFTiksdGhpcy5jYWNoZS5zZXRTdG9yZSh0aGlzLmFjY2Vzc1Rva2VuS2V5LG4uZGF0YS5hY2Nlc3NfdG9rZW4pLHRoaXMuY2FjaGUuc2V0U3RvcmUodGhpcy5hY2Nlc3NUb2tlbkV4cGlyZUtleSxuLmRhdGEuYWNjZXNzX3Rva2VuX2V4cGlyZStEYXRlLm5vdygpKSxKLmFjdGl2YXRlRXZlbnQoSi5FVkVOVFMuTE9HSU5fVFlQRV9DSEFOR0Usbi5kYXRhLmxvZ2luX3R5cGUpLFsyLHthY2Nlc3NUb2tlbjpuLmRhdGEuYWNjZXNzX3Rva2VuLGFjY2Vzc1Rva2VuRXhwaXJlOm4uZGF0YS5hY2Nlc3NfdG9rZW5fZXhwaXJlfV0pOihuLmRhdGEucmVmcmVzaF90b2tlbiYmKHRoaXMuY2FjaGUucmVtb3ZlU3RvcmUodGhpcy5yZWZyZXNoVG9rZW5LZXkpLHRoaXMuY2FjaGUuc2V0U3RvcmUodGhpcy5yZWZyZXNoVG9rZW5LZXksbi5kYXRhLnJlZnJlc2hfdG9rZW4pLHRoaXMuX3JlZnJlc2hBY2Nlc3NUb2tlbigpKSxbMl0pfX0pKX0pKX0sZS5wcm90b3R5cGUuZ2V0QWNjZXNzVG9rZW49ZnVuY3Rpb24oKXtyZXR1cm4gbyh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsdCxuLHI7cmV0dXJuIHModGhpcywoZnVuY3Rpb24obyl7c3dpdGNoKG8ubGFiZWwpe2Nhc2UgMDpyZXR1cm4gZT10aGlzLmNhY2hlLmdldFN0b3JlKHRoaXMuYWNjZXNzVG9rZW5LZXkpLHQ9dGhpcy5jYWNoZS5nZXRTdG9yZSh0aGlzLmFjY2Vzc1Rva2VuRXhwaXJlS2V5KSxuPSEwLChyPXRoaXMuX3Nob3VsZFJlZnJlc2hBY2Nlc3NUb2tlbkhvb2spP1s0LHRoaXMuX3Nob3VsZFJlZnJlc2hBY2Nlc3NUb2tlbkhvb2soZSx0KV06WzMsMl07Y2FzZSAxOnI9IW8uc2VudCgpLG8ubGFiZWw9MjtjYXNlIDI6cmV0dXJuIHImJihuPSExKSwoIWV8fCF0fHx0PERhdGUubm93KCkpJiZuP1syLHRoaXMucmVmcmVzaEFjY2Vzc1Rva2VuKCldOlsyLHthY2Nlc3NUb2tlbjplLGFjY2Vzc1Rva2VuRXhwaXJlOnR9XX19KSl9KSl9LGUucHJvdG90eXBlLnJlcXVlc3Q9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBvKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgbyxhLGMsdSxsLGYscCxoLGQseSx2LGc7cmV0dXJuIHModGhpcywoZnVuY3Rpb24ocyl7c3dpdGNoKHMubGFiZWwpe2Nhc2UgMDpyZXR1cm4gbz1cImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLGE9cih7YWN0aW9uOmUsZW52OnRoaXMuY29uZmlnLmVudixkYXRhVmVyc2lvbjpcIjIwMTktMDgtMTZcIn0sdCksLTEhPT1pLmluZGV4T2YoZSk/WzMsMl06KGM9YSxbNCx0aGlzLmdldEFjY2Vzc1Rva2VuKCldKTtjYXNlIDE6Yy5hY2Nlc3NfdG9rZW49cy5zZW50KCkuYWNjZXNzVG9rZW4scy5sYWJlbD0yO2Nhc2UgMjppZihcInN0b3JhZ2UudXBsb2FkRmlsZVwiPT09ZSl7Zm9yKGwgaW4gdT1uZXcgRm9ybURhdGEpdS5oYXNPd25Qcm9wZXJ0eShsKSYmdm9pZCAwIT09dVtsXSYmdS5hcHBlbmQobCxhW2xdKTtvPVwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwifWVsc2Ugbz1cImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiLHU9YTtyZXR1cm4gZj17aGVhZGVyczp7XCJjb250ZW50LXR5cGVcIjpvfX0sbiYmbi5vblVwbG9hZFByb2dyZXNzJiYoZi5vblVwbG9hZFByb2dyZXNzPW4ub25VcGxvYWRQcm9ncmVzcykscD10LnBhcnNlLGg9dC5xdWVyeSxkPXQuc2VhcmNoLHk9e2Vudjp0aGlzLmNvbmZpZy5lbnZ9LHAmJih5LnBhcnNlPSEwKSxoJiYoeT1yKHIoe30saCkseSkpLHY9SS5mb3JtYXRVcmwoSy5wcm90b2NvbCxLLkJBU0VfVVJMLHkpLGQmJih2Kz1kKSxbNCx0aGlzLnBvc3Qocih7dXJsOnYsZGF0YTp1fSxmKSldO2Nhc2UgMzppZihnPXMuc2VudCgpLDIwMCE9PU51bWJlcihnLnN0YXR1cykmJjIwMCE9PU51bWJlcihnLnN0YXR1c0NvZGUpfHwhZy5kYXRhKXRocm93IG5ldyBFcnJvcihcIm5ldHdvcmsgcmVxdWVzdCBlcnJvclwiKTtyZXR1cm5bMixnXX19KSl9KSl9LGUucHJvdG90eXBlLnNlbmQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9e30pLG8odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBuLHIsbztyZXR1cm4gcyh0aGlzLChmdW5jdGlvbihzKXtzd2l0Y2gocy5sYWJlbCl7Y2FzZSAwOnJldHVybiBuPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiRGF0YWJhc2Ugb3BlcmF0aW9uIGlzIGxvbmdlciB0aGFuIDNzLiBQbGVhc2UgY2hlY2sgcXVlcnkgcGVyZm9ybWFuY2UgYW5kIHlvdXIgbmV0d29yayBlbnZpcm9ubWVudC5cIil9KSwzZTMpLFs0LHRoaXMucmVxdWVzdChlLHQse29uVXBsb2FkUHJvZ3Jlc3M6dC5vblVwbG9hZFByb2dyZXNzfSldO2Nhc2UgMTpyZXR1cm4gcj1zLnNlbnQoKSxjbGVhclRpbWVvdXQobiksXCJBQ0NFU1NfVE9LRU5fRVhQSVJFRFwiIT09ci5kYXRhLmNvZGV8fC0xIT09aS5pbmRleE9mKGUpP1szLDRdOls0LHRoaXMucmVmcmVzaEFjY2Vzc1Rva2VuKCldO2Nhc2UgMjpyZXR1cm4gcy5zZW50KCksWzQsdGhpcy5yZXF1ZXN0KGUsdCx7b25VcGxvYWRQcm9ncmVzczp0Lm9uVXBsb2FkUHJvZ3Jlc3N9KV07Y2FzZSAzOmlmKChvPXMuc2VudCgpKS5kYXRhLmNvZGUpdGhyb3cgbmV3IEVycm9yKFwiW1wiK28uZGF0YS5jb2RlK1wiXSBcIitvLmRhdGEubWVzc2FnZSk7cmV0dXJuWzIsby5kYXRhXTtjYXNlIDQ6aWYoci5kYXRhLmNvZGUpdGhyb3cgbmV3IEVycm9yKFwiW1wiK3IuZGF0YS5jb2RlK1wiXSBcIityLmRhdGEubWVzc2FnZSk7cmV0dXJuWzIsci5kYXRhXX19KSl9KSl9LGV9KCk7bi5SZXF1ZXN0PWx9KSk7dChYKTtYLlJlcXVlc3Q7dmFyICQ9bigoZnVuY3Rpb24odCxuKXt2YXIgcixvPWUmJmUuX19hd2FpdGVyfHxmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gbmV3KG58fChuPVByb21pc2UpKSgoZnVuY3Rpb24obyxzKXtmdW5jdGlvbiBpKGUpe3RyeXtjKHIubmV4dChlKSl9Y2F0Y2goZSl7cyhlKX19ZnVuY3Rpb24gYShlKXt0cnl7YyhyLnRocm93KGUpKX1jYXRjaChlKXtzKGUpfX1mdW5jdGlvbiBjKGUpe3ZhciB0O2UuZG9uZT9vKGUudmFsdWUpOih0PWUudmFsdWUsdCBpbnN0YW5jZW9mIG4/dDpuZXcgbigoZnVuY3Rpb24oZSl7ZSh0KX0pKSkudGhlbihpLGEpfWMoKHI9ci5hcHBseShlLHR8fFtdKSkubmV4dCgpKX0pKX0scz1lJiZlLl9fZ2VuZXJhdG9yfHxmdW5jdGlvbihlLHQpe3ZhciBuLHIsbyxzLGk9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKDEmb1swXSl0aHJvdyBvWzFdO3JldHVybiBvWzFdfSx0cnlzOltdLG9wczpbXX07cmV0dXJuIHM9e25leHQ6YSgwKSx0aHJvdzphKDEpLHJldHVybjphKDIpfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihzW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLHM7ZnVuY3Rpb24gYShzKXtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKHMpe2lmKG4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7Zm9yKDtpOyl0cnl7aWYobj0xLHImJihvPTImc1swXT9yLnJldHVybjpzWzBdP3IudGhyb3d8fCgobz1yLnJldHVybikmJm8uY2FsbChyKSwwKTpyLm5leHQpJiYhKG89by5jYWxsKHIsc1sxXSkpLmRvbmUpcmV0dXJuIG87c3dpdGNoKHI9MCxvJiYocz1bMiZzWzBdLG8udmFsdWVdKSxzWzBdKXtjYXNlIDA6Y2FzZSAxOm89czticmVhaztjYXNlIDQ6cmV0dXJuIGkubGFiZWwrKyx7dmFsdWU6c1sxXSxkb25lOiExfTtjYXNlIDU6aS5sYWJlbCsrLHI9c1sxXSxzPVswXTtjb250aW51ZTtjYXNlIDc6cz1pLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKG89KG89aS50cnlzKS5sZW5ndGg+MCYmb1tvLmxlbmd0aC0xXSkmJig2PT09c1swXXx8Mj09PXNbMF0pKXtpPTA7Y29udGludWV9aWYoMz09PXNbMF0mJighb3x8c1sxXT5vWzBdJiZzWzFdPG9bM10pKXtpLmxhYmVsPXNbMV07YnJlYWt9aWYoNj09PXNbMF0mJmkubGFiZWw8b1sxXSl7aS5sYWJlbD1vWzFdLG89czticmVha31pZihvJiZpLmxhYmVsPG9bMl0pe2kubGFiZWw9b1syXSxpLm9wcy5wdXNoKHMpO2JyZWFrfW9bMl0mJmkub3BzLnBvcCgpLGkudHJ5cy5wb3AoKTtjb250aW51ZX1zPXQuY2FsbChlLGkpfWNhdGNoKGUpe3M9WzYsZV0scj0wfWZpbmFsbHl7bj1vPTB9aWYoNSZzWzBdKXRocm93IHNbMV07cmV0dXJue3ZhbHVlOnNbMF0/c1sxXTp2b2lkIDAsZG9uZTohMH19KFtzLGFdKX19fTtPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxmdW5jdGlvbihlKXtlLkFOT05ZTU9VUz1cIkFOT05ZTU9VU1wiLGUuV0VDSEFUPVwiV0VDSEFUXCIsZS5DVVNUT009XCJDVVNUT01cIixlLk5VTEw9XCJOVUxMXCJ9KHI9bi5MT0dJTlRZUEV8fChuLkxPR0lOVFlQRT17fSkpO3ZhciBpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLl9sb2dpblR5cGU9ci5OVUxMLHRoaXMuY29uZmlnPWUsdGhpcy5vbkxvZ2luVHlwZUNoYW5nZWQ9dGhpcy5vbkxvZ2luVHlwZUNoYW5nZWQuYmluZCh0aGlzKSxKLmFkZEV2ZW50TGlzdGVuZXIoSi5FVkVOVFMuTE9HSU5fVFlQRV9DSEFOR0UsdGhpcy5vbkxvZ2luVHlwZUNoYW5nZWQpfXJldHVybiBlLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKCl7dGhpcy5odHRwUmVxdWVzdD1uZXcgWC5SZXF1ZXN0KHRoaXMuY29uZmlnKSx0aGlzLmNhY2hlPW5ldyB6LkNhY2hlKHRoaXMuY29uZmlnLnBlcnNpc3RlbmNlKSx0aGlzLmFjY2Vzc1Rva2VuS2V5PUsuQUNDRVNTX1RPS0VOK1wiX1wiK3RoaXMuY29uZmlnLmVudix0aGlzLmFjY2Vzc1Rva2VuRXhwaXJlS2V5PUsuQUNDRVNTX1RPS0VOX0V4cGlyZStcIl9cIit0aGlzLmNvbmZpZy5lbnYsdGhpcy5yZWZyZXNoVG9rZW5LZXk9Sy5SRUZSRVNIX1RPS0VOK1wiX1wiK3RoaXMuY29uZmlnLmVudix0aGlzLmxvZ2luVHlwZUtleT1LLkxPR0lOX1RZUEVfS0VZK1wiX1wiK3RoaXMuY29uZmlnLmVudn0sZS5wcm90b3R5cGUub25Mb2dpblR5cGVDaGFuZ2VkPWZ1bmN0aW9uKGUpe3RoaXMuX2xvZ2luVHlwZT1lLmRhdGEsdGhpcy5jYWNoZS5zZXRTdG9yZSh0aGlzLmxvZ2luVHlwZUtleSx0aGlzLl9sb2dpblR5cGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJsb2dpblR5cGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2xvZ2luVHlwZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5zZXRSZWZyZXNoVG9rZW49ZnVuY3Rpb24oZSl7dGhpcy5jYWNoZS5yZW1vdmVTdG9yZSh0aGlzLmFjY2Vzc1Rva2VuS2V5KSx0aGlzLmNhY2hlLnJlbW92ZVN0b3JlKHRoaXMuYWNjZXNzVG9rZW5FeHBpcmVLZXkpLHRoaXMuY2FjaGUuc2V0U3RvcmUodGhpcy5yZWZyZXNoVG9rZW5LZXksZSl9LGUucHJvdG90eXBlLmdldFJlZnJlc2hUb2tlbkJ5V1hDb2RlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbyh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHI7cmV0dXJuIHModGhpcywoZnVuY3Rpb24obyl7cmV0dXJuXCJhdXRoLmdldEp3dFwiLHI9Vy5BZGFwdGVyLnJ1bnRpbWU9PT1XLlJVTlRJTUUuV1hfTVA/XCIxXCI6XCIwXCIsWzIsdGhpcy5odHRwUmVxdWVzdC5zZW5kKFwiYXV0aC5nZXRKd3RcIix7YXBwaWQ6ZSxsb2dpblR5cGU6dCxjb2RlOm4saHlicmlkTWluaWFwcDpyfSkudGhlbigoZnVuY3Rpb24oZSl7aWYoZS5jb2RlKXRocm93IG5ldyBFcnJvcihcIlt0Y2ItanMtc2RrXSDlvq7kv6HnmbvlvZXlpLHotKU6IFwiK2UuY29kZSk7aWYoZS5yZWZyZXNoX3Rva2VuKXJldHVybntyZWZyZXNoVG9rZW46ZS5yZWZyZXNoX3Rva2VuLGFjY2Vzc1Rva2VuOmUuYWNjZXNzX3Rva2VuLGFjY2Vzc1Rva2VuRXhwaXJlOmUuYWNjZXNzX3Rva2VuX2V4cGlyZX07dGhyb3cgbmV3IEVycm9yKFwiW3RjYi1qcy1zZGtdIGdldEp3dOacqui/lOWbnnJlZnJlc2hUb2tlblwiKX0pKV19KSl9KSl9LGV9KCk7bi5kZWZhdWx0PWl9KSk7dCgkKTskLkxPR0lOVFlQRTt2YXIgUT1uKChmdW5jdGlvbih0LG4pe3ZhciByPWUmJmUuX19leHRlbmRzfHxmdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKHQsbil7cmV0dXJuKGU9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShuKSYmKGVbbl09dFtuXSl9KSh0LG4pfTtyZXR1cm4gZnVuY3Rpb24odCxuKXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj10fWUodCxuKSx0LnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihyLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgcil9fSgpLG89ZSYmZS5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBuZXcobnx8KG49UHJvbWlzZSkpKChmdW5jdGlvbihvLHMpe2Z1bmN0aW9uIGkoZSl7dHJ5e2Moci5uZXh0KGUpKX1jYXRjaChlKXtzKGUpfX1mdW5jdGlvbiBhKGUpe3RyeXtjKHIudGhyb3coZSkpfWNhdGNoKGUpe3MoZSl9fWZ1bmN0aW9uIGMoZSl7dmFyIHQ7ZS5kb25lP28oZS52YWx1ZSk6KHQ9ZS52YWx1ZSx0IGluc3RhbmNlb2Ygbj90Om5ldyBuKChmdW5jdGlvbihlKXtlKHQpfSkpKS50aGVuKGksYSl9Yygocj1yLmFwcGx5KGUsdHx8W10pKS5uZXh0KCkpfSkpfSxzPWUmJmUuX19nZW5lcmF0b3J8fGZ1bmN0aW9uKGUsdCl7dmFyIG4scixvLHMsaT17bGFiZWw6MCxzZW50OmZ1bmN0aW9uKCl7aWYoMSZvWzBdKXRocm93IG9bMV07cmV0dXJuIG9bMV19LHRyeXM6W10sb3BzOltdfTtyZXR1cm4gcz17bmV4dDphKDApLHRocm93OmEoMSkscmV0dXJuOmEoMil9LFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKHNbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSkscztmdW5jdGlvbiBhKHMpe3JldHVybiBmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24ocyl7aWYobil0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtmb3IoO2k7KXRyeXtpZihuPTEsciYmKG89MiZzWzBdP3IucmV0dXJuOnNbMF0/ci50aHJvd3x8KChvPXIucmV0dXJuKSYmby5jYWxsKHIpLDApOnIubmV4dCkmJiEobz1vLmNhbGwocixzWzFdKSkuZG9uZSlyZXR1cm4gbztzd2l0Y2gocj0wLG8mJihzPVsyJnNbMF0sby52YWx1ZV0pLHNbMF0pe2Nhc2UgMDpjYXNlIDE6bz1zO2JyZWFrO2Nhc2UgNDpyZXR1cm4gaS5sYWJlbCsrLHt2YWx1ZTpzWzFdLGRvbmU6ITF9O2Nhc2UgNTppLmxhYmVsKysscj1zWzFdLHM9WzBdO2NvbnRpbnVlO2Nhc2UgNzpzPWkub3BzLnBvcCgpLGkudHJ5cy5wb3AoKTtjb250aW51ZTtkZWZhdWx0OmlmKCEobz0obz1pLnRyeXMpLmxlbmd0aD4wJiZvW28ubGVuZ3RoLTFdKSYmKDY9PT1zWzBdfHwyPT09c1swXSkpe2k9MDtjb250aW51ZX1pZigzPT09c1swXSYmKCFvfHxzWzFdPm9bMF0mJnNbMV08b1szXSkpe2kubGFiZWw9c1sxXTticmVha31pZig2PT09c1swXSYmaS5sYWJlbDxvWzFdKXtpLmxhYmVsPW9bMV0sbz1zO2JyZWFrfWlmKG8mJmkubGFiZWw8b1syXSl7aS5sYWJlbD1vWzJdLGkub3BzLnB1c2gocyk7YnJlYWt9b1syXSYmaS5vcHMucG9wKCksaS50cnlzLnBvcCgpO2NvbnRpbnVlfXM9dC5jYWxsKGUsaSl9Y2F0Y2goZSl7cz1bNixlXSxyPTB9ZmluYWxseXtuPW89MH1pZig1JnNbMF0pdGhyb3cgc1sxXTtyZXR1cm57dmFsdWU6c1swXT9zWzFdOnZvaWQgMCxkb25lOiEwfX0oW3MsYV0pfX19LGk9ZSYmZS5fX2ltcG9ydFN0YXJ8fGZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgbiBpbiBlKU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fTtPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYSxjLHU9aShJKSxsPWkoJCk7IWZ1bmN0aW9uKGUpe2Uuc25zYXBpX2Jhc2U9XCJzbnNhcGlfYmFzZVwiLGUuc25zYXBpX3VzZXJpbmZvPVwic25zYXBpX3VzZXJpbmZvXCIsZS5zbnNhcGlfbG9naW49XCJzbnNhcGlfbG9naW5cIn0oYXx8KGE9e30pKSxmdW5jdGlvbihlKXtlLnJlZGlyZWN0PVwicmVkaXJlY3RcIixlLnByb21wdD1cInByb21wdFwifShjfHwoYz17fSkpO3ZhciBmPXt9LHA9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LG4scixvLHMpe3ZhciBpPWUuY2FsbCh0aGlzLHQpfHx0aGlzO3JldHVybiBpLmNvbmZpZz10LGkuYXBwaWQ9bixpLnNjb3BlPVcuQWRhcHRlci5ydW50aW1lPT09Vy5SVU5USU1FLldYX01QP1wic25zYXBpX2Jhc2VcIjpyLGkuc3RhdGU9c3x8XCJ3ZWl4aW5cIixpLmxvZ2luTW9kZT1vfHxcInJlZGlyZWN0XCIsaX1yZXR1cm4gcih0LGUpLHQucHJvdG90eXBlLnNpZ25Jbj1mdW5jdGlvbigpe3JldHVybiBvKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZSx0LG47cmV0dXJuIHModGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpmW3RoaXMuY29uZmlnLmVudl18fChmW3RoaXMuY29uZmlnLmVudl09dGhpcy5fc2lnbkluKCkpLHIubGFiZWw9MTtjYXNlIDE6cmV0dXJuIHIudHJ5cy5wdXNoKFsxLDMsLDRdKSxbNCxmW3RoaXMuY29uZmlnLmVudl1dO2Nhc2UgMjpyZXR1cm4gZT1yLnNlbnQoKSxbMyw0XTtjYXNlIDM6cmV0dXJuIG49ci5zZW50KCksdD1uLFszLDRdO2Nhc2UgNDppZihmW3RoaXMuY29uZmlnLmVudl09bnVsbCx0KXRocm93IHQ7cmV0dXJuWzIsZV19fSkpfSkpfSx0LnByb3RvdHlwZS5fc2lnbkluPWZ1bmN0aW9uKCl7cmV0dXJuIG8odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlLHQsbixyLG8saTtyZXR1cm4gcyh0aGlzLChmdW5jdGlvbihzKXtzd2l0Y2gocy5sYWJlbCl7Y2FzZSAwOmlmKGU9dGhpcy5jYWNoZS5nZXRTdG9yZSh0aGlzLmFjY2Vzc1Rva2VuS2V5KSx0PXRoaXMuY2FjaGUuZ2V0U3RvcmUodGhpcy5hY2Nlc3NUb2tlbkV4cGlyZUtleSksZSl7aWYodCYmdD5EYXRlLm5vdygpKXJldHVyblsyLHtjcmVkZW50aWFsOnthY2Nlc3NUb2tlbjplLHJlZnJlc2hUb2tlbjp0aGlzLmNhY2hlLmdldFN0b3JlKHRoaXMucmVmcmVzaFRva2VuS2V5KX19XTt0aGlzLmNhY2hlLnJlbW92ZVN0b3JlKHRoaXMuYWNjZXNzVG9rZW5LZXkpLHRoaXMuY2FjaGUucmVtb3ZlU3RvcmUodGhpcy5hY2Nlc3NUb2tlbkV4cGlyZUtleSl9aWYoITE9PT1PYmplY3QudmFsdWVzKGEpLmluY2x1ZGVzKGFbdGhpcy5zY29wZV0pKXRocm93IG5ldyBFcnJvcihcIumUmeivr+eahHNjb3Bl57G75Z6LXCIpO3JldHVybiBXLkFkYXB0ZXIucnVudGltZSE9PVcuUlVOVElNRS5XWF9NUD9bMywyXTpbNCx1LmdldE1pbmlBcHBDb2RlKCldO2Nhc2UgMTpyZXR1cm4gbj1zLnNlbnQoKSxbMyw0XTtjYXNlIDI6cmV0dXJuWzQsdS5nZXRXZWl4aW5Db2RlKCldO2Nhc2UgMzppZighKG49cy5zZW50KCkpKXJldHVyblsyLHRoaXMucmVkaXJlY3QoKV07cy5sYWJlbD00O2Nhc2UgNDpyZXR1cm4gcj1mdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZSBhLnNuc2FwaV9sb2dpbjpyZXR1cm5cIldFQ0hBVC1PUEVOXCI7ZGVmYXVsdDpyZXR1cm5cIldFQ0hBVC1QVUJMSUNcIn19KHRoaXMuc2NvcGUpLFs0LHRoaXMuZ2V0UmVmcmVzaFRva2VuQnlXWENvZGUodGhpcy5hcHBpZCxyLG4pXTtjYXNlIDU6cmV0dXJuIG89cy5zZW50KCksaT1vLnJlZnJlc2hUb2tlbix0aGlzLmNhY2hlLnNldFN0b3JlKHRoaXMucmVmcmVzaFRva2VuS2V5LGkpLG8uYWNjZXNzVG9rZW4mJnRoaXMuY2FjaGUuc2V0U3RvcmUodGhpcy5hY2Nlc3NUb2tlbktleSxvLmFjY2Vzc1Rva2VuKSxvLmFjY2Vzc1Rva2VuRXhwaXJlJiZ0aGlzLmNhY2hlLnNldFN0b3JlKHRoaXMuYWNjZXNzVG9rZW5FeHBpcmVLZXksby5hY2Nlc3NUb2tlbkV4cGlyZStEYXRlLm5vdygpKSxKLmFjdGl2YXRlRXZlbnQoSi5FVkVOVFMuTE9HSU5fU1RBVEVfQ0hBTkdFRCksSi5hY3RpdmF0ZUV2ZW50KEouRVZFTlRTLkxPR0lOX1RZUEVfQ0hBTkdFLGwuTE9HSU5UWVBFLldFQ0hBVCksWzIse2NyZWRlbnRpYWw6e3JlZnJlc2hUb2tlbjppfX1dfX0pKX0pKX0sdC5wcm90b3R5cGUucmVkaXJlY3Q9ZnVuY3Rpb24oKXt2YXIgZT11LnJlbW92ZVBhcmFtKFwiY29kZVwiLGxvY2F0aW9uLmhyZWYpO2U9dS5yZW1vdmVQYXJhbShcInN0YXRlXCIsZSksZT1lbmNvZGVVUklDb21wb25lbnQoZSk7dmFyIHQ9XCIvL29wZW4ud2VpeGluLnFxLmNvbS9jb25uZWN0L29hdXRoMi9hdXRob3JpemVcIjtcInNuc2FwaV9sb2dpblwiPT09dGhpcy5zY29wZSYmKHQ9XCIvL29wZW4ud2VpeGluLnFxLmNvbS9jb25uZWN0L3FyY29ubmVjdFwiKSxcInJlZGlyZWN0XCI9PT1jW3RoaXMubG9naW5Nb2RlXSYmKGxvY2F0aW9uLmhyZWY9dCtcIj9hcHBpZD1cIit0aGlzLmFwcGlkK1wiJnJlZGlyZWN0X3VyaT1cIitlK1wiJnJlc3BvbnNlX3R5cGU9Y29kZSZzY29wZT1cIit0aGlzLnNjb3BlK1wiJnN0YXRlPVwiK3RoaXMuc3RhdGUrXCIjd2VjaGF0X3JlZGlyZWN0XCIpfSx0fShsLmRlZmF1bHQpO24uZGVmYXVsdD1wfSkpO3QoUSk7dmFyIFo9bigoZnVuY3Rpb24odCxuKXt2YXIgcj1lJiZlLl9fZXh0ZW5kc3x8ZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbih0LG4pe3JldHVybihlPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgbiBpbiB0KXQuaGFzT3duUHJvcGVydHkobikmJihlW25dPXRbbl0pfSkodCxuKX07cmV0dXJuIGZ1bmN0aW9uKHQsbil7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9dH1lKHQsbiksdC5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooci5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IHIpfX0oKSxvPWUmJmUuX19hc3NpZ258fGZ1bmN0aW9uKCl7cmV0dXJuKG89T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49MSxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rKylmb3IodmFyIG8gaW4gdD1hcmd1bWVudHNbbl0pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbykmJihlW29dPXRbb10pO3JldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxzPWUmJmUuX19hd2FpdGVyfHxmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gbmV3KG58fChuPVByb21pc2UpKSgoZnVuY3Rpb24obyxzKXtmdW5jdGlvbiBpKGUpe3RyeXtjKHIubmV4dChlKSl9Y2F0Y2goZSl7cyhlKX19ZnVuY3Rpb24gYShlKXt0cnl7YyhyLnRocm93KGUpKX1jYXRjaChlKXtzKGUpfX1mdW5jdGlvbiBjKGUpe3ZhciB0O2UuZG9uZT9vKGUudmFsdWUpOih0PWUudmFsdWUsdCBpbnN0YW5jZW9mIG4/dDpuZXcgbigoZnVuY3Rpb24oZSl7ZSh0KX0pKSkudGhlbihpLGEpfWMoKHI9ci5hcHBseShlLHR8fFtdKSkubmV4dCgpKX0pKX0saT1lJiZlLl9fZ2VuZXJhdG9yfHxmdW5jdGlvbihlLHQpe3ZhciBuLHIsbyxzLGk9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKDEmb1swXSl0aHJvdyBvWzFdO3JldHVybiBvWzFdfSx0cnlzOltdLG9wczpbXX07cmV0dXJuIHM9e25leHQ6YSgwKSx0aHJvdzphKDEpLHJldHVybjphKDIpfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihzW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLHM7ZnVuY3Rpb24gYShzKXtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKHMpe2lmKG4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7Zm9yKDtpOyl0cnl7aWYobj0xLHImJihvPTImc1swXT9yLnJldHVybjpzWzBdP3IudGhyb3d8fCgobz1yLnJldHVybikmJm8uY2FsbChyKSwwKTpyLm5leHQpJiYhKG89by5jYWxsKHIsc1sxXSkpLmRvbmUpcmV0dXJuIG87c3dpdGNoKHI9MCxvJiYocz1bMiZzWzBdLG8udmFsdWVdKSxzWzBdKXtjYXNlIDA6Y2FzZSAxOm89czticmVhaztjYXNlIDQ6cmV0dXJuIGkubGFiZWwrKyx7dmFsdWU6c1sxXSxkb25lOiExfTtjYXNlIDU6aS5sYWJlbCsrLHI9c1sxXSxzPVswXTtjb250aW51ZTtjYXNlIDc6cz1pLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKG89KG89aS50cnlzKS5sZW5ndGg+MCYmb1tvLmxlbmd0aC0xXSkmJig2PT09c1swXXx8Mj09PXNbMF0pKXtpPTA7Y29udGludWV9aWYoMz09PXNbMF0mJighb3x8c1sxXT5vWzBdJiZzWzFdPG9bM10pKXtpLmxhYmVsPXNbMV07YnJlYWt9aWYoNj09PXNbMF0mJmkubGFiZWw8b1sxXSl7aS5sYWJlbD1vWzFdLG89czticmVha31pZihvJiZpLmxhYmVsPG9bMl0pe2kubGFiZWw9b1syXSxpLm9wcy5wdXNoKHMpO2JyZWFrfW9bMl0mJmkub3BzLnBvcCgpLGkudHJ5cy5wb3AoKTtjb250aW51ZX1zPXQuY2FsbChlLGkpfWNhdGNoKGUpe3M9WzYsZV0scj0wfWZpbmFsbHl7bj1vPTB9aWYoNSZzWzBdKXRocm93IHNbMV07cmV0dXJue3ZhbHVlOnNbMF0/c1sxXTp2b2lkIDAsZG9uZTohMH19KFtzLGFdKX19fSxhPWUmJmUuX19pbXBvcnRTdGFyfHxmdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIG4gaW4gZSlPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiYodFtuXT1lW25dKTtyZXR1cm4gdC5kZWZhdWx0PWUsdH07T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGM9YSgkKSx1PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIG49ZS5jYWxsKHRoaXMsbyhvKHt9LHQpLHtwZXJzaXN0ZW5jZTpcImxvY2FsXCJ9KSl8fHRoaXM7cmV0dXJuIG4uX2Fub255bW91c1V1aWRLZXk9Sy5BTk9OWU1PVVNfVVVJRCtcIl9cIituLmNvbmZpZy5lbnYsbi5fbG9naW5UeXBlS2V5PUsuTE9HSU5fVFlQRV9LRVkrXCJfXCIrbi5jb25maWcuZW52LG59cmV0dXJuIHIodCxlKSx0LnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKCl7ZS5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpfSx0LnByb3RvdHlwZS5zaWduSW49ZnVuY3Rpb24oKXtyZXR1cm4gcyh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsdCxuO3JldHVybiBpKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGU9dGhpcy5jYWNoZS5nZXRTdG9yZSh0aGlzLl9hbm9ueW1vdXNVdWlkS2V5KXx8dm9pZCAwLHQ9dGhpcy5jYWNoZS5nZXRTdG9yZSh0aGlzLnJlZnJlc2hUb2tlbktleSl8fHZvaWQgMCxbNCx0aGlzLmh0dHBSZXF1ZXN0LnNlbmQoXCJhdXRoLnNpZ25JbkFub255bW91c2x5XCIse2Fub255bW91c191dWlkOmUscmVmcmVzaF90b2tlbjp0fSldO2Nhc2UgMTpyZXR1cm4obj1yLnNlbnQoKSkudXVpZCYmbi5yZWZyZXNoX3Rva2VuPyh0aGlzLl9zZXRBbm9ueW1vdXNVVUlEKG4udXVpZCksdGhpcy5zZXRSZWZyZXNoVG9rZW4obi5yZWZyZXNoX3Rva2VuKSxbNCx0aGlzLmh0dHBSZXF1ZXN0LnJlZnJlc2hBY2Nlc3NUb2tlbigpXSk6WzMsM107Y2FzZSAyOnJldHVybiByLnNlbnQoKSxKLmFjdGl2YXRlRXZlbnQoSi5FVkVOVFMuTE9HSU5fU1RBVEVfQ0hBTkdFRCksSi5hY3RpdmF0ZUV2ZW50KEouRVZFTlRTLkxPR0lOX1RZUEVfQ0hBTkdFLGMuTE9HSU5UWVBFLkFOT05ZTU9VUyksWzIse2NyZWRlbnRpYWw6e3JlZnJlc2hUb2tlbjpuLnJlZnJlc2hfdG9rZW59fV07Y2FzZSAzOnRocm93IG5ldyBFcnJvcihcIlt0Y2ItanMtc2RrXSDljL/lkI3nmbvlvZXlpLHotKVcIil9fSkpfSkpfSx0LnByb3RvdHlwZS5saW5rQW5kUmV0cmlldmVEYXRhV2l0aFRpY2tldD1mdW5jdGlvbihlKXtyZXR1cm4gcyh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHQsbixyO3JldHVybiBpKHRoaXMsKGZ1bmN0aW9uKG8pe3N3aXRjaChvLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHQ9dGhpcy5jYWNoZS5nZXRTdG9yZSh0aGlzLl9hbm9ueW1vdXNVdWlkS2V5KSxuPXRoaXMuY2FjaGUuZ2V0U3RvcmUodGhpcy5yZWZyZXNoVG9rZW5LZXkpLFs0LHRoaXMuaHR0cFJlcXVlc3Quc2VuZChcImF1dGgubGlua0FuZFJldHJpZXZlRGF0YVdpdGhUaWNrZXRcIix7YW5vbnltb3VzX3V1aWQ6dCxyZWZyZXNoX3Rva2VuOm4sdGlja2V0OmV9KV07Y2FzZSAxOnJldHVybihyPW8uc2VudCgpKS5yZWZyZXNoX3Rva2VuPyh0aGlzLl9jbGVhckFub255bW91c1VVSUQoKSx0aGlzLnNldFJlZnJlc2hUb2tlbihyLnJlZnJlc2hfdG9rZW4pLFs0LHRoaXMuaHR0cFJlcXVlc3QucmVmcmVzaEFjY2Vzc1Rva2VuKCldKTpbMywzXTtjYXNlIDI6cmV0dXJuIG8uc2VudCgpLEouYWN0aXZhdGVFdmVudChKLkVWRU5UUy5BTk9OWU1PVVNfQ09OVkVSVEVELHtyZWZyZXNoX3Rva2VuOnIucmVmcmVzaF90b2tlbn0pLEouYWN0aXZhdGVFdmVudChKLkVWRU5UUy5MT0dJTl9UWVBFX0NIQU5HRSxjLkxPR0lOVFlQRS5DVVNUT00pLFsyLHtjcmVkZW50aWFsOntyZWZyZXNoVG9rZW46ci5yZWZyZXNoX3Rva2VufX1dO2Nhc2UgMzp0aHJvdyBuZXcgRXJyb3IoXCJbdGNiLWpzLXNka10g5Yy/5ZCN6L2s5YyW5aSx6LSlXCIpfX0pKX0pKX0sdC5wcm90b3R5cGUuZ2V0QWxsU3RvcmU9ZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gZVt0aGlzLnJlZnJlc2hUb2tlbktleV09dGhpcy5jYWNoZS5nZXRTdG9yZSh0aGlzLnJlZnJlc2hUb2tlbktleSl8fFwiXCIsZVt0aGlzLl9sb2dpblR5cGVLZXldPXRoaXMuY2FjaGUuZ2V0U3RvcmUodGhpcy5fbG9naW5UeXBlS2V5KXx8XCJcIixlW3RoaXMuYWNjZXNzVG9rZW5LZXldPXRoaXMuY2FjaGUuZ2V0U3RvcmUodGhpcy5hY2Nlc3NUb2tlbktleSl8fFwiXCIsZVt0aGlzLmFjY2Vzc1Rva2VuRXhwaXJlS2V5XT10aGlzLmNhY2hlLmdldFN0b3JlKHRoaXMuYWNjZXNzVG9rZW5FeHBpcmVLZXkpfHxcIlwiLGV9LHQucHJvdG90eXBlLl9zZXRBbm9ueW1vdXNVVUlEPWZ1bmN0aW9uKGUpe3RoaXMuY2FjaGUucmVtb3ZlU3RvcmUodGhpcy5fYW5vbnltb3VzVXVpZEtleSksdGhpcy5jYWNoZS5zZXRTdG9yZSh0aGlzLl9hbm9ueW1vdXNVdWlkS2V5LGUpLHRoaXMuY2FjaGUuc2V0U3RvcmUodGhpcy5fbG9naW5UeXBlS2V5LGMuTE9HSU5UWVBFLkFOT05ZTU9VUyl9LHQucHJvdG90eXBlLl9jbGVhckFub255bW91c1VVSUQ9ZnVuY3Rpb24oKXt0aGlzLmNhY2hlLnJlbW92ZVN0b3JlKHRoaXMuX2Fub255bW91c1V1aWRLZXkpfSx0fShjLmRlZmF1bHQpO24uQW5vbnltb3VzQXV0aFByb3ZpZGVyPXV9KSk7dChaKTtaLkFub255bW91c0F1dGhQcm92aWRlcjt2YXIgZWU9bigoZnVuY3Rpb24odCxuKXt2YXIgcj1lJiZlLl9fZXh0ZW5kc3x8ZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbih0LG4pe3JldHVybihlPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgbiBpbiB0KXQuaGFzT3duUHJvcGVydHkobikmJihlW25dPXRbbl0pfSkodCxuKX07cmV0dXJuIGZ1bmN0aW9uKHQsbil7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9dH1lKHQsbiksdC5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooci5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IHIpfX0oKSxvPWUmJmUuX19hc3NpZ258fGZ1bmN0aW9uKCl7cmV0dXJuKG89T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49MSxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rKylmb3IodmFyIG8gaW4gdD1hcmd1bWVudHNbbl0pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbykmJihlW29dPXRbb10pO3JldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxzPWUmJmUuX19hd2FpdGVyfHxmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gbmV3KG58fChuPVByb21pc2UpKSgoZnVuY3Rpb24obyxzKXtmdW5jdGlvbiBpKGUpe3RyeXtjKHIubmV4dChlKSl9Y2F0Y2goZSl7cyhlKX19ZnVuY3Rpb24gYShlKXt0cnl7YyhyLnRocm93KGUpKX1jYXRjaChlKXtzKGUpfX1mdW5jdGlvbiBjKGUpe3ZhciB0O2UuZG9uZT9vKGUudmFsdWUpOih0PWUudmFsdWUsdCBpbnN0YW5jZW9mIG4/dDpuZXcgbigoZnVuY3Rpb24oZSl7ZSh0KX0pKSkudGhlbihpLGEpfWMoKHI9ci5hcHBseShlLHR8fFtdKSkubmV4dCgpKX0pKX0saT1lJiZlLl9fZ2VuZXJhdG9yfHxmdW5jdGlvbihlLHQpe3ZhciBuLHIsbyxzLGk9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKDEmb1swXSl0aHJvdyBvWzFdO3JldHVybiBvWzFdfSx0cnlzOltdLG9wczpbXX07cmV0dXJuIHM9e25leHQ6YSgwKSx0aHJvdzphKDEpLHJldHVybjphKDIpfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihzW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLHM7ZnVuY3Rpb24gYShzKXtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKHMpe2lmKG4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7Zm9yKDtpOyl0cnl7aWYobj0xLHImJihvPTImc1swXT9yLnJldHVybjpzWzBdP3IudGhyb3d8fCgobz1yLnJldHVybikmJm8uY2FsbChyKSwwKTpyLm5leHQpJiYhKG89by5jYWxsKHIsc1sxXSkpLmRvbmUpcmV0dXJuIG87c3dpdGNoKHI9MCxvJiYocz1bMiZzWzBdLG8udmFsdWVdKSxzWzBdKXtjYXNlIDA6Y2FzZSAxOm89czticmVhaztjYXNlIDQ6cmV0dXJuIGkubGFiZWwrKyx7dmFsdWU6c1sxXSxkb25lOiExfTtjYXNlIDU6aS5sYWJlbCsrLHI9c1sxXSxzPVswXTtjb250aW51ZTtjYXNlIDc6cz1pLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKG89KG89aS50cnlzKS5sZW5ndGg+MCYmb1tvLmxlbmd0aC0xXSkmJig2PT09c1swXXx8Mj09PXNbMF0pKXtpPTA7Y29udGludWV9aWYoMz09PXNbMF0mJighb3x8c1sxXT5vWzBdJiZzWzFdPG9bM10pKXtpLmxhYmVsPXNbMV07YnJlYWt9aWYoNj09PXNbMF0mJmkubGFiZWw8b1sxXSl7aS5sYWJlbD1vWzFdLG89czticmVha31pZihvJiZpLmxhYmVsPG9bMl0pe2kubGFiZWw9b1syXSxpLm9wcy5wdXNoKHMpO2JyZWFrfW9bMl0mJmkub3BzLnBvcCgpLGkudHJ5cy5wb3AoKTtjb250aW51ZX1zPXQuY2FsbChlLGkpfWNhdGNoKGUpe3M9WzYsZV0scj0wfWZpbmFsbHl7bj1vPTB9aWYoNSZzWzBdKXRocm93IHNbMV07cmV0dXJue3ZhbHVlOnNbMF0/c1sxXTp2b2lkIDAsZG9uZTohMH19KFtzLGFdKX19fSxhPWUmJmUuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19LGM9ZSYmZS5fX2ltcG9ydFN0YXJ8fGZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgbiBpbiBlKU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fTtPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgdT1hKFEpLGw9YygkKSxmPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIG49ZS5jYWxsKHRoaXMsdCl8fHRoaXM7cmV0dXJuIG4uY29uZmlnPXQsbn1yZXR1cm4gcih0LGUpLHQucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXtlLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcyksdGhpcy5jdXN0b21BdXRoUHJvdmlkZXI9bmV3IGwuZGVmYXVsdCh0aGlzLmNvbmZpZyksdGhpcy5jdXN0b21BdXRoUHJvdmlkZXIuaW5pdCgpfSx0LnByb3RvdHlwZS53ZWl4aW5BdXRoUHJvdmlkZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5hcHBpZCxuPWUuc2NvcGUscj1lLmxvZ2luTW9kZSxvPWUuc3RhdGUscz1uZXcgdS5kZWZhdWx0KHRoaXMuY29uZmlnLHQsbixyLG8pO3JldHVybiBzLmluaXQoKSxzfSx0LnByb3RvdHlwZS5zaWduSW5Bbm9ueW1vdXNseT1mdW5jdGlvbigpe3JldHVybiBzKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiBpKHRoaXMsKGZ1bmN0aW9uKHQpe3N3aXRjaCh0LmxhYmVsKXtjYXNlIDA6cmV0dXJuIHRoaXMuX2Fub255bW91c0F1dGhQcm92aWRlcnx8KHRoaXMuX2Fub255bW91c0F1dGhQcm92aWRlcj1uZXcgWi5Bbm9ueW1vdXNBdXRoUHJvdmlkZXIodGhpcy5jb25maWcpLHRoaXMuX2Fub255bW91c0F1dGhQcm92aWRlci5pbml0KCkpLEouYWRkRXZlbnRMaXN0ZW5lcihKLkVWRU5UUy5MT0dJTl9UWVBFX0NIQU5HRSwoZnVuY3Rpb24odCl7aWYodCYmdC5kYXRhPT09bC5MT0dJTlRZUEUuQU5PTllNT1VTKXt2YXIgbj1lLl9hbm9ueW1vdXNBdXRoUHJvdmlkZXIuZ2V0QWxsU3RvcmUoKTtmb3IodmFyIHIgaW4gbiluW3JdJiZlLmh0dHBSZXF1ZXN0LmNhY2hlLnNldFN0b3JlKHIsbltyXSl9fSkpLFs0LHRoaXMuX2Fub255bW91c0F1dGhQcm92aWRlci5zaWduSW4oKV07Y2FzZSAxOnJldHVyblsyLHQuc2VudCgpXX19KSl9KSl9LHQucHJvdG90eXBlLmxpbmtBbmRSZXRyaWV2ZURhdGFXaXRoVGlja2V0PWZ1bmN0aW9uKGUpe3JldHVybiBzKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybiBpKHRoaXMsKGZ1bmN0aW9uKG4pe3N3aXRjaChuLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHRoaXMuX2Fub255bW91c0F1dGhQcm92aWRlcnx8KHRoaXMuX2Fub255bW91c0F1dGhQcm92aWRlcj1uZXcgWi5Bbm9ueW1vdXNBdXRoUHJvdmlkZXIodGhpcy5jb25maWcpLHRoaXMuX2Fub255bW91c0F1dGhQcm92aWRlci5pbml0KCkpLEouYWRkRXZlbnRMaXN0ZW5lcihKLkVWRU5UUy5BTk9OWU1PVVNfQ09OVkVSVEVELChmdW5jdGlvbihlKXt2YXIgbj1lLmRhdGEucmVmcmVzaF90b2tlbjtuJiZ0Lmh0dHBSZXF1ZXN0LmNhY2hlLnNldFN0b3JlKHQucmVmcmVzaFRva2VuS2V5LG4pfSkpLFs0LHRoaXMuX2Fub255bW91c0F1dGhQcm92aWRlci5saW5rQW5kUmV0cmlldmVEYXRhV2l0aFRpY2tldChlKV07Y2FzZSAxOnJldHVyblsyLG4uc2VudCgpXX19KSl9KSl9LHQucHJvdG90eXBlLnNpZ25PdXQ9ZnVuY3Rpb24oKXtyZXR1cm4gcyh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsdCxuLHIsbyxzLGE7cmV0dXJuIGkodGhpcywoZnVuY3Rpb24oaSl7c3dpdGNoKGkubGFiZWwpe2Nhc2UgMDppZih0aGlzLmxvZ2luVHlwZT09PWwuTE9HSU5UWVBFLkFOT05ZTU9VUyl0aHJvdyBuZXcgRXJyb3IoXCJbdGNiLWpzLXNka10g5Yy/5ZCN55So5oi35LiN5pSv5oyB55m75Ye65pON5L2cXCIpO3JldHVybiBlPXRoaXMuaHR0cFJlcXVlc3QsdD1lLmNhY2hlLG49ZS5yZWZyZXNoVG9rZW5LZXkscj1lLmFjY2Vzc1Rva2VuS2V5LG89ZS5hY2Nlc3NUb2tlbkV4cGlyZUtleSxcImF1dGgubG9nb3V0XCIsKHM9dC5nZXRTdG9yZShuKSk/WzQsdGhpcy5odHRwUmVxdWVzdC5zZW5kKFwiYXV0aC5sb2dvdXRcIix7cmVmcmVzaF90b2tlbjpzfSldOlsyXTtjYXNlIDE6cmV0dXJuIGE9aS5zZW50KCksdC5yZW1vdmVTdG9yZShuKSx0LnJlbW92ZVN0b3JlKHIpLHQucmVtb3ZlU3RvcmUobyksSi5hY3RpdmF0ZUV2ZW50KEouRVZFTlRTLkxPR0lOX1NUQVRFX0NIQU5HRUQpLEouYWN0aXZhdGVFdmVudChKLkVWRU5UUy5MT0dJTl9UWVBFX0NIQU5HRSxsLkxPR0lOVFlQRS5OVUxMKSxbMixhXX19KSl9KSl9LHQucHJvdG90eXBlLmdldEFjY2Vzc1Rva2VuPWZ1bmN0aW9uKCl7cmV0dXJuIHModGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlO3JldHVybiBpKHRoaXMsKGZ1bmN0aW9uKHQpe3N3aXRjaCh0LmxhYmVsKXtjYXNlIDA6cmV0dXJuIGU9e30sWzQsdGhpcy5odHRwUmVxdWVzdC5nZXRBY2Nlc3NUb2tlbigpXTtjYXNlIDE6cmV0dXJuWzIsKGUuYWNjZXNzVG9rZW49dC5zZW50KCkuYWNjZXNzVG9rZW4sZS5lbnY9dGhpcy5jb25maWcuZW52LGUpXX19KSl9KSl9LHQucHJvdG90eXBlLm9uTG9naW5TdGF0ZUV4cGlyZT1mdW5jdGlvbihlKXtKLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2dpblN0YXRlRXhwaXJlXCIsZSl9LHQucHJvdG90eXBlLmdldExvZ2luU3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gcyh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsdCxuLHIsbztyZXR1cm4gaSh0aGlzLChmdW5jdGlvbihzKXtzd2l0Y2gocy5sYWJlbCl7Y2FzZSAwOmlmKGU9dGhpcy5odHRwUmVxdWVzdCx0PWUuY2FjaGUsbj1lLnJlZnJlc2hUb2tlbktleSxyPWUuYWNjZXNzVG9rZW5LZXksIShvPXQuZ2V0U3RvcmUobikpKXJldHVyblszLDVdO3MubGFiZWw9MTtjYXNlIDE6cmV0dXJuIHMudHJ5cy5wdXNoKFsxLDMsLDRdKSxbNCx0aGlzLmh0dHBSZXF1ZXN0LnJlZnJlc2hBY2Nlc3NUb2tlbigpXTtjYXNlIDI6cmV0dXJuIHMuc2VudCgpLFszLDRdO2Nhc2UgMzpyZXR1cm4gcy5zZW50KCksWzIsbnVsbF07Y2FzZSA0OnJldHVyblsyLHtpc0Fub255bW91czp0aGlzLmxvZ2luVHlwZT09PWwuTE9HSU5UWVBFLkFOT05ZTU9VUyxjcmVkZW50aWFsOntyZWZyZXNoVG9rZW46byxhY2Nlc3NUb2tlbjp0LmdldFN0b3JlKHIpfX1dO2Nhc2UgNTpyZXR1cm5bMixudWxsXX19KSl9KSl9LHQucHJvdG90eXBlLnNpZ25JbldpdGhUaWNrZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHModGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0LG4scixvO3JldHVybiBpKHRoaXMsKGZ1bmN0aW9uKHMpe3N3aXRjaChzLmxhYmVsKXtjYXNlIDA6aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwidGlja2V0IG11c3QgYmUgYSBzdHJpbmdcIik7cmV0dXJuIHQ9dGhpcy5odHRwUmVxdWVzdCxuPXQuY2FjaGUscj10LnJlZnJlc2hUb2tlbktleSxbNCx0aGlzLmh0dHBSZXF1ZXN0LnNlbmQoXCJhdXRoLnNpZ25JbldpdGhUaWNrZXRcIix7dGlja2V0OmUscmVmcmVzaF90b2tlbjpuLmdldFN0b3JlKHIpfHxcIlwifSldO2Nhc2UgMTpyZXR1cm4obz1zLnNlbnQoKSkucmVmcmVzaF90b2tlbj8odGhpcy5jdXN0b21BdXRoUHJvdmlkZXIuc2V0UmVmcmVzaFRva2VuKG8ucmVmcmVzaF90b2tlbiksWzQsdGhpcy5odHRwUmVxdWVzdC5yZWZyZXNoQWNjZXNzVG9rZW4oKV0pOlszLDNdO2Nhc2UgMjpyZXR1cm4gcy5zZW50KCksSi5hY3RpdmF0ZUV2ZW50KEouRVZFTlRTLkxPR0lOX1NUQVRFX0NIQU5HRUQpLEouYWN0aXZhdGVFdmVudChKLkVWRU5UUy5MT0dJTl9UWVBFX0NIQU5HRSxsLkxPR0lOVFlQRS5DVVNUT00pLFsyLHtjcmVkZW50aWFsOntyZWZyZXNoVG9rZW46by5yZWZyZXNoX3Rva2VufX1dO2Nhc2UgMzp0aHJvdyBuZXcgRXJyb3IoXCJbdGNiLWpzLXNka10g6Ieq5a6a5LmJ55m75b2V5aSx6LSlXCIpfX0pKX0pKX0sdC5wcm90b3R5cGUuc2hvdWxkUmVmcmVzaEFjY2Vzc1Rva2VuPWZ1bmN0aW9uKGUpe3RoaXMuaHR0cFJlcXVlc3QuX3Nob3VsZFJlZnJlc2hBY2Nlc3NUb2tlbkhvb2s9ZS5iaW5kKHRoaXMpfSx0LnByb3RvdHlwZS5nZXRVc2VySW5mbz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmh0dHBSZXF1ZXN0LnNlbmQoXCJhdXRoLmdldFVzZXJJbmZvXCIse30pLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiBlLmNvZGU/ZTpvKG8oe30sZS5kYXRhKSx7cmVxdWVzdElkOmUuc2VxSWR9KX0pKX0sdH0obC5kZWZhdWx0KTtuLmRlZmF1bHQ9Zn0pKTt0KGVlKTt2YXIgdGU9bigoZnVuY3Rpb24odCxuKXt2YXIgcj1lJiZlLl9fYXdhaXRlcnx8ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIG5ldyhufHwobj1Qcm9taXNlKSkoKGZ1bmN0aW9uKG8scyl7ZnVuY3Rpb24gaShlKXt0cnl7YyhyLm5leHQoZSkpfWNhdGNoKGUpe3MoZSl9fWZ1bmN0aW9uIGEoZSl7dHJ5e2Moci50aHJvdyhlKSl9Y2F0Y2goZSl7cyhlKX19ZnVuY3Rpb24gYyhlKXt2YXIgdDtlLmRvbmU/byhlLnZhbHVlKToodD1lLnZhbHVlLHQgaW5zdGFuY2VvZiBuP3Q6bmV3IG4oKGZ1bmN0aW9uKGUpe2UodCl9KSkpLnRoZW4oaSxhKX1jKChyPXIuYXBwbHkoZSx0fHxbXSkpLm5leHQoKSl9KSl9LG89ZSYmZS5fX2dlbmVyYXRvcnx8ZnVuY3Rpb24oZSx0KXt2YXIgbixyLG8scyxpPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJm9bMF0pdGhyb3cgb1sxXTtyZXR1cm4gb1sxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBzPXtuZXh0OmEoMCksdGhyb3c6YSgxKSxyZXR1cm46YSgyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoc1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxzO2Z1bmN0aW9uIGEocyl7cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihzKXtpZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7aTspdHJ5e2lmKG49MSxyJiYobz0yJnNbMF0/ci5yZXR1cm46c1swXT9yLnRocm93fHwoKG89ci5yZXR1cm4pJiZvLmNhbGwociksMCk6ci5uZXh0KSYmIShvPW8uY2FsbChyLHNbMV0pKS5kb25lKXJldHVybiBvO3N3aXRjaChyPTAsbyYmKHM9WzImc1swXSxvLnZhbHVlXSksc1swXSl7Y2FzZSAwOmNhc2UgMTpvPXM7YnJlYWs7Y2FzZSA0OnJldHVybiBpLmxhYmVsKysse3ZhbHVlOnNbMV0sZG9uZTohMX07Y2FzZSA1OmkubGFiZWwrKyxyPXNbMV0scz1bMF07Y29udGludWU7Y2FzZSA3OnM9aS5vcHMucG9wKCksaS50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShvPShvPWkudHJ5cykubGVuZ3RoPjAmJm9bby5sZW5ndGgtMV0pJiYoNj09PXNbMF18fDI9PT1zWzBdKSl7aT0wO2NvbnRpbnVlfWlmKDM9PT1zWzBdJiYoIW98fHNbMV0+b1swXSYmc1sxXTxvWzNdKSl7aS5sYWJlbD1zWzFdO2JyZWFrfWlmKDY9PT1zWzBdJiZpLmxhYmVsPG9bMV0pe2kubGFiZWw9b1sxXSxvPXM7YnJlYWt9aWYobyYmaS5sYWJlbDxvWzJdKXtpLmxhYmVsPW9bMl0saS5vcHMucHVzaChzKTticmVha31vWzJdJiZpLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWV9cz10LmNhbGwoZSxpKX1jYXRjaChlKXtzPVs2LGVdLHI9MH1maW5hbGx5e249bz0wfWlmKDUmc1swXSl0aHJvdyBzWzFdO3JldHVybnt2YWx1ZTpzWzBdP3NbMV06dm9pZCAwLGRvbmU6ITB9fShbcyxhXSl9fX07T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksbi51cGxvYWRGaWxlPWZ1bmN0aW9uKGUsdCl7dD10fHxJLmNyZWF0ZVByb21pc2VDYWxsYmFjaygpO3ZhciBuPW5ldyBYLlJlcXVlc3QodGhpcy5jb25maWcpLHI9ZS5jbG91ZFBhdGgsbz1lLmZpbGVQYXRoLHM9ZS5vblVwbG9hZFByb2dyZXNzO3JldHVybiBuLnNlbmQoXCJzdG9yYWdlLmdldFVwbG9hZE1ldGFkYXRhXCIse3BhdGg6cn0pLnRoZW4oKGZ1bmN0aW9uKGUpe3ZhciBpPWUuZGF0YSxhPWkudXJsLGM9aS5hdXRob3JpemF0aW9uLHU9aS50b2tlbixsPWkuZmlsZUlkLGY9aS5jb3NGaWxlSWQscD1lLnJlcXVlc3RJZCxoPXtrZXk6cixzaWduYXR1cmU6YyxcIngtY29zLW1ldGEtZmlsZWlkXCI6ZixzdWNjZXNzX2FjdGlvbl9zdGF0dXM6XCIyMDFcIixcIngtY29zLXNlY3VyaXR5LXRva2VuXCI6dX07bi51cGxvYWQoe3VybDphLGRhdGE6aCxmaWxlOm8sbmFtZTpyLG9uVXBsb2FkUHJvZ3Jlc3M6c30pLnRoZW4oKGZ1bmN0aW9uKGUpezIwMT09PWUuc3RhdHVzQ29kZT90KG51bGwse2ZpbGVJRDpsLHJlcXVlc3RJZDpwfSk6dChuZXcgRXJyb3IoXCJTVE9SQUdFX1JFUVVFU1RfRkFJTDogXCIrZS5kYXRhKSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe3QoZSl9KSl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe3QoZSl9KSksdC5wcm9taXNlfSxuLmRlbGV0ZUZpbGU9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmZpbGVMaXN0O2lmKHQ9dHx8SS5jcmVhdGVQcm9taXNlQ2FsbGJhY2soKSwhbnx8IUFycmF5LmlzQXJyYXkobikpcmV0dXJue2NvZGU6XCJJTlZBTElEX1BBUkFNXCIsbWVzc2FnZTpcImZpbGVMaXN05b+F6aG75piv6Z2e56m655qE5pWw57uEXCJ9O2Zvcih2YXIgcj0wLG89bjtyPG8ubGVuZ3RoO3IrKyl7dmFyIHM9b1tyXTtpZighc3x8XCJzdHJpbmdcIiE9dHlwZW9mIHMpcmV0dXJue2NvZGU6XCJJTlZBTElEX1BBUkFNXCIsbWVzc2FnZTpcImZpbGVMaXN055qE5YWD57Sg5b+F6aG75piv6Z2e56m655qE5a2X56ym5LiyXCJ9fXZhciBpPXtmaWxlaWRfbGlzdDpufTtyZXR1cm4gbmV3IFguUmVxdWVzdCh0aGlzLmNvbmZpZykuc2VuZChcInN0b3JhZ2UuYmF0Y2hEZWxldGVGaWxlXCIsaSkudGhlbigoZnVuY3Rpb24oZSl7ZS5jb2RlP3QobnVsbCxlKTp0KG51bGwse2ZpbGVMaXN0OmUuZGF0YS5kZWxldGVfbGlzdCxyZXF1ZXN0SWQ6ZS5yZXF1ZXN0SWR9KX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7dChlKX0pKSx0LnByb21pc2V9LG4uZ2V0VGVtcEZpbGVVUkw9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmZpbGVMaXN0O3Q9dHx8SS5jcmVhdGVQcm9taXNlQ2FsbGJhY2soKSxuJiZBcnJheS5pc0FycmF5KG4pfHx0KG51bGwse2NvZGU6XCJJTlZBTElEX1BBUkFNXCIsbWVzc2FnZTpcImZpbGVMaXN05b+F6aG75piv6Z2e56m655qE5pWw57uEXCJ9KTtmb3IodmFyIHI9W10sbz0wLHM9bjtvPHMubGVuZ3RoO28rKyl7dmFyIGk9c1tvXTtcIm9iamVjdFwiPT10eXBlb2YgaT8oaS5oYXNPd25Qcm9wZXJ0eShcImZpbGVJRFwiKSYmaS5oYXNPd25Qcm9wZXJ0eShcIm1heEFnZVwiKXx8dChudWxsLHtjb2RlOlwiSU5WQUxJRF9QQVJBTVwiLG1lc3NhZ2U6XCJmaWxlTGlzdOeahOWFg+e0oOW/hemhu+aYr+WMheWQq2ZpbGVJROWSjG1heEFnZeeahOWvueixoVwifSksci5wdXNoKHtmaWxlaWQ6aS5maWxlSUQsbWF4X2FnZTppLm1heEFnZX0pKTpcInN0cmluZ1wiPT10eXBlb2YgaT9yLnB1c2goe2ZpbGVpZDppfSk6dChudWxsLHtjb2RlOlwiSU5WQUxJRF9QQVJBTVwiLG1lc3NhZ2U6XCJmaWxlTGlzdOeahOWFg+e0oOW/hemhu+aYr+Wtl+espuS4slwifSl9dmFyIGE9e2ZpbGVfbGlzdDpyfTtyZXR1cm4gbmV3IFguUmVxdWVzdCh0aGlzLmNvbmZpZykuc2VuZChcInN0b3JhZ2UuYmF0Y2hHZXREb3dubG9hZFVybFwiLGEpLnRoZW4oKGZ1bmN0aW9uKGUpe2UuY29kZT90KG51bGwsZSk6dChudWxsLHtmaWxlTGlzdDplLmRhdGEuZG93bmxvYWRfbGlzdCxyZXF1ZXN0SWQ6ZS5yZXF1ZXN0SWR9KX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7dChlKX0pKSx0LnByb21pc2V9LG4uZG93bmxvYWRGaWxlPWZ1bmN0aW9uKGUsdCl7dmFyIHM9ZS5maWxlSUQ7cmV0dXJuIHIodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlLHIsaSxhLGM7cmV0dXJuIG8odGhpcywoZnVuY3Rpb24obyl7c3dpdGNoKG8ubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCxuLmdldFRlbXBGaWxlVVJMLmNhbGwodGhpcyx7ZmlsZUxpc3Q6W3tmaWxlSUQ6cyxtYXhBZ2U6NjAwfV19KV07Y2FzZSAxOnJldHVybiBlPW8uc2VudCgpLFwiU1VDQ0VTU1wiIT09KHI9ZS5maWxlTGlzdFswXSkuY29kZT9bMix0P3Qocik6bmV3IFByb21pc2UoKGZ1bmN0aW9uKGUpe2Uocil9KSldOihpPXIuZG93bmxvYWRfdXJsLGk9ZW5jb2RlVVJJKGkpLGE9bmV3IFguUmVxdWVzdCh0aGlzLmNvbmZpZyksdD9bNCxhLmRvd25sb2FkKHt1cmw6aX0pXTpbMywzXSk7Y2FzZSAyOnJldHVybiBjPW8uc2VudCgpLHQoYyksWzMsNF07Y2FzZSAzOnJldHVyblsyLGEuZG93bmxvYWQoe3VybDppfSldO2Nhc2UgNDpyZXR1cm5bMl19fSkpfSkpfX0pKTt0KHRlKTt0ZS51cGxvYWRGaWxlLHRlLmRlbGV0ZUZpbGUsdGUuZ2V0VGVtcEZpbGVVUkwsdGUuZG93bmxvYWRGaWxlO3ZhciBuZT1uKChmdW5jdGlvbihlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuY2FsbEZ1bmN0aW9uPWZ1bmN0aW9uKGUsdCl7dmFyIG4scj1lLm5hbWUsbz1lLmRhdGEscz1lLnF1ZXJ5LGk9ZS5wYXJzZSxhPWUuc2VhcmNoLGM9dHx8SS5jcmVhdGVQcm9taXNlQ2FsbGJhY2soKTt0cnl7bj1vP0pTT04uc3RyaW5naWZ5KG8pOlwiXCJ9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfWlmKCFyKXJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCLlh73mlbDlkI3kuI3og73kuLrnqbpcIikpO3ZhciB1PXtxdWVyeTpzLHBhcnNlOmksc2VhcmNoOmEsZnVuY3Rpb25fbmFtZTpyLHJlcXVlc3RfZGF0YTpufTtyZXR1cm4gbmV3IFguUmVxdWVzdCh0aGlzLmNvbmZpZykuc2VuZChcImZ1bmN0aW9ucy5pbnZva2VGdW5jdGlvblwiLHUpLnRoZW4oKGZ1bmN0aW9uKGUpe2lmKGUuY29kZSljKG51bGwsZSk7ZWxzZXt2YXIgdD1lLmRhdGEucmVzcG9uc2VfZGF0YTtpZihpKWMobnVsbCx7cmVzdWx0OnQscmVxdWVzdElkOmUucmVxdWVzdElkfSk7ZWxzZSB0cnl7dD1KU09OLnBhcnNlKGUuZGF0YS5yZXNwb25zZV9kYXRhKSxjKG51bGwse3Jlc3VsdDp0LHJlcXVlc3RJZDplLnJlcXVlc3RJZH0pfWNhdGNoKGUpe2MobmV3IEVycm9yKFwicmVzcG9uc2UgZGF0YSBtdXN0IGJlIGpzb25cIikpfX1yZXR1cm4gYy5wcm9taXNlfSkpLmNhdGNoKChmdW5jdGlvbihlKXtjKGUpfSkpLGMucHJvbWlzZX19KSk7dChuZSk7bmUuY2FsbEZ1bmN0aW9uO3ZhciByZT10KG4oKGZ1bmN0aW9uKHQpe3ZhciBuPWUmJmUuX19hc3NpZ258fGZ1bmN0aW9uKCl7cmV0dXJuKG49T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49MSxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rKylmb3IodmFyIG8gaW4gdD1hcmd1bWVudHNbbl0pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbykmJihlW29dPXRbb10pO3JldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxyPWUmJmUuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19LG89ZSYmZS5fX2ltcG9ydFN0YXJ8fGZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgbiBpbiBlKU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fSxzPXIoUCksaT1yKGVlKSxhPW8odGUpLGM9byhuZSksdT17dGltZW91dDoxNWUzfSxsPW5ldyhmdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9dGhpczt0aGlzLmNvbmZpZz1lfHx0aGlzLmNvbmZpZyx0aGlzLmF1dGhPYmo9dm9pZCAwLEouYWRkRXZlbnRMaXN0ZW5lcihKLkVWRU5UUy5MT0dJTl9UWVBFX0NIQU5HRSwoZnVuY3Rpb24oZSl7ZS5kYXRhPT09JC5MT0dJTlRZUEUuQU5PTllNT1VTJiYodC5jb25maWcucGVyc2lzdGVuY2U9XCJsb2NhbFwiKX0pKX1yZXR1cm4gZS5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jb25maWc9bihuKHt9LHUpLHQpLFcuQWRhcHRlci5hZGFwdGVyfHx0aGlzLl91c2VEZWZhdWx0QWRhcHRlcigpLG5ldyBlKHRoaXMuY29uZmlnKX0sZS5wcm90b3R5cGUuYXV0aD1mdW5jdGlvbihlKXt2YXIgdD0odm9pZCAwPT09ZT97fTplKS5wZXJzaXN0ZW5jZTtyZXR1cm4gdGhpcy5hdXRoT2JqP3RoaXMuYXV0aE9iajoodGhpcy5jb25maWc9bihuKHt9LHRoaXMuY29uZmlnKSx7cGVyc2lzdGVuY2U6dHx8Vy5BZGFwdGVyLmFkYXB0ZXIucHJpbWFyeVN0b3JhZ2V8fFwic2Vzc2lvblwifSksdGhpcy5hdXRoT2JqPW5ldyBpLmRlZmF1bHQodGhpcy5jb25maWcpLHRoaXMuYXV0aE9iai5pbml0KCksdGhpcy5hdXRoT2JqKX0sZS5wcm90b3R5cGUub249ZnVuY3Rpb24oZSx0KXtyZXR1cm4gSi5hZGRFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsW2UsdF0pfSxlLnByb3RvdHlwZS5vZmY9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gSi5yZW1vdmVFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsW2UsdF0pfSxlLnByb3RvdHlwZS5jYWxsRnVuY3Rpb249ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYy5jYWxsRnVuY3Rpb24uYXBwbHkodGhpcyxbZSx0XSl9LGUucHJvdG90eXBlLmRlbGV0ZUZpbGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYS5kZWxldGVGaWxlLmFwcGx5KHRoaXMsW2UsdF0pfSxlLnByb3RvdHlwZS5nZXRUZW1wRmlsZVVSTD1mdW5jdGlvbihlLHQpe3JldHVybiBhLmdldFRlbXBGaWxlVVJMLmFwcGx5KHRoaXMsW2UsdF0pfSxlLnByb3RvdHlwZS5kb3dubG9hZEZpbGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYS5kb3dubG9hZEZpbGUuYXBwbHkodGhpcyxbZSx0XSl9LGUucHJvdG90eXBlLnVwbG9hZEZpbGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYS51cGxvYWRGaWxlLmFwcGx5KHRoaXMsW2UsdF0pfSxlLnByb3RvdHlwZS51c2VBZGFwdGVycz1mdW5jdGlvbihlKXt2YXIgdD1XLnVzZUFkYXB0ZXJzKGUpfHx7fSxuPXQuYWRhcHRlcixyPXQucnVudGltZTtuJiYoVy5BZGFwdGVyLmFkYXB0ZXI9biksciYmKFcuQWRhcHRlci5ydW50aW1lPXIpfSxlLnByb3RvdHlwZS5fdXNlRGVmYXVsdEFkYXB0ZXI9ZnVuY3Rpb24oKXt2YXIgZT1XLnVzZURlZmF1bHRBZGFwdGVyKCksdD1lLmFkYXB0ZXIsbj1lLnJ1bnRpbWU7Vy5BZGFwdGVyLmFkYXB0ZXI9dCxXLkFkYXB0ZXIucnVudGltZT1ufSxlfSgpKTtsLnVzZUFkYXB0ZXJzKHMuZGVmYXVsdCk7dHJ5e3dpbmRvdy50Y2I9bH1jYXRjaChlKXt9dC5leHBvcnRzPWx9KSkpO3JlLnVzZUFkYXB0ZXJzKFApO2NvbnN0IG9lPXJlLHNlPW9lLmluaXQ7bGV0IGllLGFlO2Z1bmN0aW9uIGNlKGUpe2llfHwoaWU9e1BMQVRGT1JNOnByb2Nlc3MuZW52LlZVRV9BUFBfUExBVEZPUk0sT1M6eSxBUFBJRDpsLmFwcGlkfSxhZT17YWs6bC5hcHBpZCxwOlwiYW5kcm9pZFwiPT09eT9cImFcIjpcImlcIix1dDpnKCksdXVpZDp2KCl9KTtjb25zdCB0PUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZS5kYXRhfHx7fSkpLG49ZS5uYW1lLHI9dGhpcy5jb25maWcuc3BhY2VJZCxvPXt0ZW5jZW50OlwidFwiLGFsaXl1bjpcImFcIn1bdGhpcy5jb25maWcucHJvdmlkZXJdLHM9T2JqZWN0LmFzc2lnbih7fSxhZSx7Zm46bixzaWQ6cixwdmQ6b30pO3JldHVybiBPYmplY3QuYXNzaWduKHQse2NsaWVudEluZm86aWUsdW5pQ2xvdWRDbGllbnRJbmZvOmVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzKSl9KSxlLmRhdGE9dCxlfWZ1bmN0aW9uIHVlKGUpe2NvbnN0IHQ9Y2UuY2FsbCh0aGlzLGUpLG49e3RlbmNlbnQ6XCJ0Y2JcIixhbGl5dW46XCJhbGl5dW5cIn1bdGhpcy5jb25maWcucHJvdmlkZXJdLHI9YWUuYWssbz10aGlzLmNvbmZpZy5zcGFjZUlkLGk9SlNPTi5zdHJpbmdpZnkodC5kYXRhKSxhPXQubmFtZSxjPUpTT04uc3RyaW5naWZ5KHtib2R5Ontwcm92aWRlcjpuLGFwcGlkOnIsc3BhY2VJZDpvLGZ1bmN0aW9uTmFtZTphLHJ1bl9wYXJhbXM6aX0saGVhZGVyOnt0b2tlbjpwcm9jZXNzLmVudi5IQlhfVVNFUl9UT0tFTn19KTtyZXR1cm4gbmV3IFByb21pc2UoKGUsdCk9Pnt1bmkucmVxdWVzdCh7dXJsOmgsbWV0aG9kOlwiUE9TVFwiLGRhdGE6e3BhcmFtOmN9LGNvbXBsZXRlKHIpe3J8fChyPXt9KTtjb25zdCBvPXIuZGF0YSYmci5kYXRhLmJvZHk7aWYoIW8pcmV0dXJuIHZvaWQgdChuZXcgcyh7bWVzc2FnZTpgW0ZVTkNUSU9OU19FWEVDVVRFX0ZBSUxdIFJlcXVlc3QgRmFpbDogWyR7YX1dYH0pKTtpZihcInRjYlwiPT09biYmY29uc29sZS5sb2coby5sb2cpLDAhPT1vLmludm9rZVJlc3VsdCYmXCIwXCIhPT1vLmludm9rZVJlc3VsdClyZXR1cm4gdm9pZCB0KG5ldyBzKHttZXNzYWdlOm8uZXJyb3JNc2d9KSk7Y29uc3QgaT1vLnJlcXVlc3RJZDtsZXQgYz17fTt0cnl7Yz1KU09OLnBhcnNlKG8ucmVzdWx0KX1jYXRjaChlKXtjPW8ucmVzdWx0fWUoe3JlcXVlc3RJZDppLHJlc3VsdDpjfSl9fSl9KX1vZS5pbml0PWZ1bmN0aW9uKGUpe2UuZW52PWUuc3BhY2VJZDtjb25zdCB0PXNlLmNhbGwodGhpcyxlKTt0LmNvbmZpZy5wcm92aWRlcj1cInRlbmNlbnRcIix0LmNvbmZpZy5zcGFjZUlkPWUuc3BhY2VJZDtjb25zdCBuPXQuYXV0aDt0LmF1dGg9ZnVuY3Rpb24oZSl7Y29uc3QgdD1uLmNhbGwodGhpcyxlKTtyZXR1cm5bXCJsaW5rQW5kUmV0cmlldmVEYXRhV2l0aFRpY2tldFwiLFwic2lnbkluQW5vbnltb3VzbHlcIixcInNpZ25PdXRcIixcImdldEFjY2Vzc1Rva2VuXCIsXCJnZXRMb2dpblN0YXRlXCIsXCJzaWduSW5XaXRoVGlja2V0XCIsXCJnZXRVc2VySW5mb1wiXS5mb3JFYWNoKGU9Pnt0W2VdPV8odFtlXSkuYmluZCh0KX0pLHR9O2lmKFtcInVwbG9hZEZpbGVcIixcImRlbGV0ZUZpbGVcIixcImdldFRlbXBGaWxlVVJMXCIsXCJkb3dubG9hZEZpbGVcIl0uZm9yRWFjaChlPT57dFtlXT1fKHRbZV0pLmJpbmQodCl9KSwhMSE9PWUuYXV0b1NpZ25Jbil7Y29uc3QgZT10LmF1dGgoKTtlLmdldExvZ2luU3RhdGUoKS50aGVuKHQ9Pnt0fHxlLnNpZ25JbkFub255bW91c2x5KCl9KX1yZXR1cm4gdH07Y29uc3QgbGU9e2luaXQoZSl7bGV0IHQ9e30sbj0hKCExPT09ZS5kZWJ1Z0Z1bmN0aW9ufHxcImRldmVsb3BtZW50XCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8IXByb2Nlc3MuZW52LkhCWF9VU0VSX1RPS0VOKTtzd2l0Y2goZS5wcm92aWRlcil7Y2FzZVwidGVuY2VudFwiOnQ9b2UuaW5pdChPYmplY3QuYXNzaWduKGUse3VzZURlYnVnRnVuY3Rpb246bn0pKTticmVhaztjYXNlXCJhbGl5dW5cIjpuPW4mJihcImg1XCI9PT1wcm9jZXNzLmVudi5WVUVfQVBQX1BMQVRGT1JNJiZuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJIQnVpbGRlclhcIik+MHx8XCJhcHAtcGx1c1wiPT09cHJvY2Vzcy5lbnYuVlVFX0FQUF9QTEFURk9STSksdD1tLmluaXQoT2JqZWN0LmFzc2lnbihlLHt1c2VEZWJ1Z0Z1bmN0aW9uOm59KSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCLmnKrmj5DkvpvmraPnoa7nmoRwcm92aWRlcuWPguaVsFwiKX1yZXR1cm4gZnVuY3Rpb24oZSl7bGV0IHQ9ZS5jYWxsRnVuY3Rpb247ZS5jb25maWcudXNlRGVidWdGdW5jdGlvbiYmXCJ0ZW5jZW50XCI9PT1lLmNvbmZpZy5wcm92aWRlciYmKHQ9dWUpLGUuY2FsbEZ1bmN0aW9uPWZ1bmN0aW9uKGUpe1wiZGV2ZWxvcG1lbnRcIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZjb25zb2xlLmxvZyhgW3NwYWNlSWQ6JHt0aGlzLmNvbmZpZy5zcGFjZUlkfV1gKTtjb25zdCBuPWNlLmNhbGwodGhpcyxlKTtyZXR1cm4gbmV3IFByb21pc2UoKHIsbyk9Pnt0LmNhbGwodGhpcyxuKS50aGVuKGU9PntyKGUpfSkuY2F0Y2godD0+e3QmJnQubWVzc2FnZSYmKHQubWVzc2FnZT1gWyR7ZS5uYW1lfV06ICR7dC5tZXNzYWdlfWApLG8odCl9KX0pfTtjb25zdCBuPWUuY2FsbEZ1bmN0aW9uO2UuY2FsbEZ1bmN0aW9uPWZ1bmN0aW9uKGUpe3JldHVybiBfKG4pLmNhbGwodGhpcyxlKX19KHQpLHQuaW5pdD10aGlzLmluaXQsdH19O2xldCBmZT1sZTt0cnl7bGV0IGU9e307MT09PXByb2Nlc3MuZW52LlVOSV9DTE9VRF9QUk9WSURFUi5sZW5ndGgmJihlPXByb2Nlc3MuZW52LlVOSV9DTE9VRF9QUk9WSURFUlswXSksZmU9bGUuaW5pdChlKX1jYXRjaChlKXtbXCJhdXRoXCIsXCJjYWxsRnVuY3Rpb25cIixcInVwbG9hZEZpbGVcIixcImRlbGV0ZUZpbGVcIixcImdldFRlbXBGaWxlVVJMXCIsXCJkb3dubG9hZEZpbGVcIl0uZm9yRWFjaChlPT57ZmVbZV09ZnVuY3Rpb24oKXtjb25zdCBlPXByb2Nlc3MuZW52LlVOSV9DTE9VRF9QUk9WSURFUi5sZW5ndGg+MD9cIuW6lOeUqOacieWkmuS4quacjeWKoeepuumXtO+8jOivt+mAmui/h3VuaUNsb3VkLmluaXTmlrnms5XmjIflrpropoHkvb/nlKjnmoTmnI3liqHnqbrpl7RcIjpcIuW6lOeUqOacquWFs+iBlOacjeWKoeepuumXtO+8jOivt+WcqGNsb3VkZnVuY3Rpb25z55uu5b2V5Y+z6ZSu5YWz6IGU5pyN5Yqh56m66Ze0XCI7cmV0dXJuIGNvbnNvbGUuZXJyb3IoZSksUHJvbWlzZS5yZWplY3QobmV3IHMoe2NvZGU6XCJTWVNfRVJSXCIsbWVzc2FnZTplfSkpfX0pfXZhciBwZT1mZTtleHBvcnQgZGVmYXVsdCBwZTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcclxuXHRcInB1bGxkb3duXCI6IFwiXFx1ZTU4OFwiLFxyXG5cdFwicmVmcmVzaGVtcHR5XCI6IFwiXFx1ZTQ2MVwiLFxyXG5cdFwiYmFja1wiOiBcIlxcdWU0NzFcIixcclxuXHRcImZvcndhcmRcIjogXCJcXHVlNDcwXCIsXHJcblx0XCJtb3JlXCI6IFwiXFx1ZTUwN1wiLFxyXG5cdFwibW9yZS1maWxsZWRcIjogXCJcXHVlNTM3XCIsXHJcblx0XCJzY2FuXCI6IFwiXFx1ZTYxMlwiLFxyXG5cdFwicXFcIjogXCJcXHVlMjY0XCIsXHJcblx0XCJ3ZWlib1wiOiBcIlxcdWUyNjBcIixcclxuXHRcIndlaXhpblwiOiBcIlxcdWUyNjFcIixcclxuXHRcInBlbmd5b3VxdWFuXCI6IFwiXFx1ZTI2MlwiLFxyXG5cdFwibG9vcFwiOiBcIlxcdWU1NjVcIixcclxuXHRcInJlZnJlc2hcIjogXCJcXHVlNDA3XCIsXHJcblx0XCJyZWZyZXNoLWZpbGxlZFwiOiBcIlxcdWU0MzdcIixcclxuXHRcImFycm93dGhpbmRvd25cIjogXCJcXHVlNTg1XCIsXHJcblx0XCJhcnJvd3RoaW5sZWZ0XCI6IFwiXFx1ZTU4NlwiLFxyXG5cdFwiYXJyb3d0aGlucmlnaHRcIjogXCJcXHVlNTg3XCIsXHJcblx0XCJhcnJvd3RoaW51cFwiOiBcIlxcdWU1ODRcIixcclxuXHRcInVuZG8tZmlsbGVkXCI6IFwiXFx1ZTdkNlwiLFxyXG5cdFwidW5kb1wiOiBcIlxcdWU0MDZcIixcclxuXHRcInJlZG9cIjogXCJcXHVlNDA1XCIsXHJcblx0XCJyZWRvLWZpbGxlZFwiOiBcIlxcdWU3ZDlcIixcclxuXHRcImJhcnNcIjogXCJcXHVlNTYzXCIsXHJcblx0XCJjaGF0Ym94ZXNcIjogXCJcXHVlMjAzXCIsXHJcblx0XCJjYW1lcmFcIjogXCJcXHVlMzAxXCIsXHJcblx0XCJjaGF0Ym94ZXMtZmlsbGVkXCI6IFwiXFx1ZTIzM1wiLFxyXG5cdFwiY2FtZXJhLWZpbGxlZFwiOiBcIlxcdWU3ZWZcIixcclxuXHRcImNhcnQtZmlsbGVkXCI6IFwiXFx1ZTdmNFwiLFxyXG5cdFwiY2FydFwiOiBcIlxcdWU3ZjVcIixcclxuXHRcImNoZWNrYm94LWZpbGxlZFwiOiBcIlxcdWU0NDJcIixcclxuXHRcImNoZWNrYm94XCI6IFwiXFx1ZTdmYVwiLFxyXG5cdFwiYXJyb3dsZWZ0XCI6IFwiXFx1ZTU4MlwiLFxyXG5cdFwiYXJyb3dkb3duXCI6IFwiXFx1ZTU4MVwiLFxyXG5cdFwiYXJyb3dyaWdodFwiOiBcIlxcdWU1ODNcIixcclxuXHRcInNtYWxsY2lyY2xlLWZpbGxlZFwiOiBcIlxcdWU4MDFcIixcclxuXHRcImFycm93dXBcIjogXCJcXHVlNTgwXCIsXHJcblx0XCJjaXJjbGVcIjogXCJcXHVlNDExXCIsXHJcblx0XCJleWUtZmlsbGVkXCI6IFwiXFx1ZTU2OFwiLFxyXG5cdFwiZXllLXNsYXNoLWZpbGxlZFwiOiBcIlxcdWU4MjJcIixcclxuXHRcImV5ZS1zbGFzaFwiOiBcIlxcdWU4MjNcIixcclxuXHRcImV5ZVwiOiBcIlxcdWU4MjRcIixcclxuXHRcImZsYWctZmlsbGVkXCI6IFwiXFx1ZTgyNVwiLFxyXG5cdFwiZmxhZ1wiOiBcIlxcdWU1MDhcIixcclxuXHRcImdlYXItZmlsbGVkXCI6IFwiXFx1ZTUzMlwiLFxyXG5cdFwicmVsb2FkXCI6IFwiXFx1ZTQ2MlwiLFxyXG5cdFwiZ2VhclwiOiBcIlxcdWU1MDJcIixcclxuXHRcImhhbmQtdGh1bWJzZG93bi1maWxsZWRcIjogXCJcXHVlODNiXCIsXHJcblx0XCJoYW5kLXRodW1ic2Rvd25cIjogXCJcXHVlODNjXCIsXHJcblx0XCJoYW5kLXRodW1ic3VwLWZpbGxlZFwiOiBcIlxcdWU4M2RcIixcclxuXHRcImhlYXJ0LWZpbGxlZFwiOiBcIlxcdWU4M2VcIixcclxuXHRcImhhbmQtdGh1bWJzdXBcIjogXCJcXHVlODNmXCIsXHJcblx0XCJoZWFydFwiOiBcIlxcdWU4NDBcIixcclxuXHRcImhvbWVcIjogXCJcXHVlNTAwXCIsXHJcblx0XCJpbmZvXCI6IFwiXFx1ZTUwNFwiLFxyXG5cdFwiaG9tZS1maWxsZWRcIjogXCJcXHVlNTMwXCIsXHJcblx0XCJpbmZvLWZpbGxlZFwiOiBcIlxcdWU1MzRcIixcclxuXHRcImNpcmNsZS1maWxsZWRcIjogXCJcXHVlNDQxXCIsXHJcblx0XCJjaGF0LWZpbGxlZFwiOiBcIlxcdWU4NDdcIixcclxuXHRcImNoYXRcIjogXCJcXHVlMjYzXCIsXHJcblx0XCJtYWlsLW9wZW4tZmlsbGVkXCI6IFwiXFx1ZTg0ZFwiLFxyXG5cdFwiZW1haWwtZmlsbGVkXCI6IFwiXFx1ZTIzMVwiLFxyXG5cdFwibWFpbC1vcGVuXCI6IFwiXFx1ZTg0ZVwiLFxyXG5cdFwiZW1haWxcIjogXCJcXHVlMjAxXCIsXHJcblx0XCJjaGVja21hcmtlbXB0eVwiOiBcIlxcdWU0NzJcIixcclxuXHRcImxpc3RcIjogXCJcXHVlNTYyXCIsXHJcblx0XCJsb2NrZWQtZmlsbGVkXCI6IFwiXFx1ZTg1NlwiLFxyXG5cdFwibG9ja2VkXCI6IFwiXFx1ZTUwNlwiLFxyXG5cdFwibWFwLWZpbGxlZFwiOiBcIlxcdWU4NWNcIixcclxuXHRcIm1hcC1waW5cIjogXCJcXHVlODVlXCIsXHJcblx0XCJtYXAtcGluLWVsbGlwc2VcIjogXCJcXHVlODY0XCIsXHJcblx0XCJtYXBcIjogXCJcXHVlMzY0XCIsXHJcblx0XCJtaW51cy1maWxsZWRcIjogXCJcXHVlNDQwXCIsXHJcblx0XCJtaWMtZmlsbGVkXCI6IFwiXFx1ZTMzMlwiLFxyXG5cdFwibWludXNcIjogXCJcXHVlNDEwXCIsXHJcblx0XCJtaWNvZmZcIjogXCJcXHVlMzYwXCIsXHJcblx0XCJtaWNcIjogXCJcXHVlMzAyXCIsXHJcblx0XCJjbGVhclwiOiBcIlxcdWU0MzRcIixcclxuXHRcInNtYWxsY2lyY2xlXCI6IFwiXFx1ZTg2OFwiLFxyXG5cdFwiY2xvc2VcIjogXCJcXHVlNDA0XCIsXHJcblx0XCJjbG9zZWVtcHR5XCI6IFwiXFx1ZTQ2MFwiLFxyXG5cdFwicGFwZXJjbGlwXCI6IFwiXFx1ZTU2N1wiLFxyXG5cdFwicGFwZXJwbGFuZVwiOiBcIlxcdWU1MDNcIixcclxuXHRcInBhcGVycGxhbmUtZmlsbGVkXCI6IFwiXFx1ZTg2ZVwiLFxyXG5cdFwicGVyc29uLWZpbGxlZFwiOiBcIlxcdWUxMzFcIixcclxuXHRcImNvbnRhY3QtZmlsbGVkXCI6IFwiXFx1ZTEzMFwiLFxyXG5cdFwicGVyc29uXCI6IFwiXFx1ZTEwMVwiLFxyXG5cdFwiY29udGFjdFwiOiBcIlxcdWUxMDBcIixcclxuXHRcImltYWdlcy1maWxsZWRcIjogXCJcXHVlODdhXCIsXHJcblx0XCJwaG9uZVwiOiBcIlxcdWUyMDBcIixcclxuXHRcImltYWdlc1wiOiBcIlxcdWU4N2JcIixcclxuXHRcImltYWdlXCI6IFwiXFx1ZTM2M1wiLFxyXG5cdFwiaW1hZ2UtZmlsbGVkXCI6IFwiXFx1ZTg3N1wiLFxyXG5cdFwibG9jYXRpb24tZmlsbGVkXCI6IFwiXFx1ZTMzM1wiLFxyXG5cdFwibG9jYXRpb25cIjogXCJcXHVlMzAzXCIsXHJcblx0XCJwbHVzLWZpbGxlZFwiOiBcIlxcdWU0MzlcIixcclxuXHRcInBsdXNcIjogXCJcXHVlNDA5XCIsXHJcblx0XCJwbHVzZW1wdHlcIjogXCJcXHVlNDY4XCIsXHJcblx0XCJoZWxwLWZpbGxlZFwiOiBcIlxcdWU1MzVcIixcclxuXHRcImhlbHBcIjogXCJcXHVlNTA1XCIsXHJcblx0XCJuYXZpZ2F0ZS1maWxsZWRcIjogXCJcXHVlODg0XCIsXHJcblx0XCJuYXZpZ2F0ZVwiOiBcIlxcdWU1MDFcIixcclxuXHRcIm1pYy1zbGFzaC1maWxsZWRcIjogXCJcXHVlODkyXCIsXHJcblx0XCJzZWFyY2hcIjogXCJcXHVlNDY2XCIsXHJcblx0XCJzZXR0aW5nc1wiOiBcIlxcdWU1NjBcIixcclxuXHRcInNvdW5kXCI6IFwiXFx1ZTU5MFwiLFxyXG5cdFwic291bmQtZmlsbGVkXCI6IFwiXFx1ZThhMVwiLFxyXG5cdFwic3Bpbm5lci1jeWNsZVwiOiBcIlxcdWU0NjVcIixcclxuXHRcImRvd25sb2FkLWZpbGxlZFwiOiBcIlxcdWU4YTRcIixcclxuXHRcInBlcnNvbmFkZC1maWxsZWRcIjogXCJcXHVlMTMyXCIsXHJcblx0XCJ2aWRlb2NhbS1maWxsZWRcIjogXCJcXHVlOGFmXCIsXHJcblx0XCJwZXJzb25hZGRcIjogXCJcXHVlMTAyXCIsXHJcblx0XCJ1cGxvYWRcIjogXCJcXHVlNDAyXCIsXHJcblx0XCJ1cGxvYWQtZmlsbGVkXCI6IFwiXFx1ZThiMVwiLFxyXG5cdFwic3RhcmhhbGZcIjogXCJcXHVlNDYzXCIsXHJcblx0XCJzdGFyLWZpbGxlZFwiOiBcIlxcdWU0MzhcIixcclxuXHRcInN0YXJcIjogXCJcXHVlNDA4XCIsXHJcblx0XCJ0cmFzaFwiOiBcIlxcdWU0MDFcIixcclxuXHRcInBob25lLWZpbGxlZFwiOiBcIlxcdWUyMzBcIixcclxuXHRcImNvbXBvc2VcIjogXCJcXHVlNDAwXCIsXHJcblx0XCJ2aWRlb2NhbVwiOiBcIlxcdWUzMDBcIixcclxuXHRcInRyYXNoLWZpbGxlZFwiOiBcIlxcdWU4ZGNcIixcclxuXHRcImRvd25sb2FkXCI6IFwiXFx1ZTQwM1wiLFxyXG5cdFwiY2hhdGJ1YmJsZS1maWxsZWRcIjogXCJcXHVlMjMyXCIsXHJcblx0XCJjaGF0YnViYmxlXCI6IFwiXFx1ZTIwMlwiLFxyXG5cdFwiY2xvdWQtZG93bmxvYWRcIjogXCJcXHVlOGU0XCIsXHJcblx0XCJjbG91ZC11cGxvYWQtZmlsbGVkXCI6IFwiXFx1ZThlNVwiLFxyXG5cdFwiY2xvdWQtdXBsb2FkXCI6IFwiXFx1ZThlNlwiLFxyXG5cdFwiY2xvdWQtZG93bmxvYWQtZmlsbGVkXCI6IFwiXFx1ZThlOVwiLFxyXG5cdFwiaGVhZHBob25lc1wiOlwiXFx1ZThiZlwiLFxyXG5cdFwic2hvcFwiOlwiXFx1ZTYwOVwiXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==